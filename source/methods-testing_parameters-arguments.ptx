<section xml:id="methods-testing_parameters-arguments">
<title>Parameters and Arguments</title>
<p>
Some of the methods we have used require <em>arguments</em>, which are the values you provide in parentheses when you invoke the method.
</p>

<p>
For example, the <c>println</c> method takes a <c>String</c> argument.
To display a message, you have to provide the message: <c>System.out.println("Hello")</c>.
Similarly, the <c>printf</c> method can take multiple arguments.
The statement <c>System.out.printf("%d in = %f cm
n", inch, cm)</c> has three arguments: the format string, the <c>inch</c> value, and the <c>cm</c> value.
</p>

<p>
<idx><h>parameter</h></idx>
<idx><h>argument</h></idx>
When you invoke a method, you provide the arguments.
When you define a method, you name the <em>parameters</em>, which are variables that indicate what arguments are required.
The following class shows an example:
</p>

<p>
<idx><h>PrintTwice.java</h></idx>
</p>

<listing filename="PrintTwice.java">
<program>
public class PrintTwice {

    public static void printTwice(String s) {
        System.out.println(s);
        System.out.println(s);
    }

    public static void main(String[] args) {
        printTwice("Don't make me say this twice!");
    }
}
</program>
</listing>

<p>
The <c>printTwice</c> method has a parameter named <c>s</c> with type <c>String</c>.
When you invoke <c>printTwice</c>, you have to provide an argument with type <c>String</c>.
</p>

<p>
Before the method executes, the argument gets assigned to the parameter.
In the <c>printTwice</c> example, the argument <c>"Don't make me say this twice!"</c> gets assigned to the parameter <c>s</c>.
</p>

<p>
<idx><h>parameter passing</h></idx>
This process is called <em>parameter passing</em>, because the value gets passed from outside the method to the inside.
An argument can be any kind of expression, so if you have a <c>String</c> variable, you can use its value as an argument:
</p>

<program>
String message = "Never say never.";
printTwice(message);
</program>

<p>
The value you provide as an argument must have the same (or compatible) type as the parameter.
For example, if you try this:
</p>

<program>
printTwice(17);  // syntax error
</program>

<p>
You will get an error message like this:
</p>

<console>
<output>
File: Test.java  [line: 10]
Error: method printTwice in class Test cannot be applied
       to given types;
  required: java.lang.String
  found: int
  reason: actual argument int cannot be converted to
          java.lang.String by method invocation conversion
</output>
</console>

<p>
This error message says that it found an <c>int</c> argument, but the required parameter should be a <c>String</c>.
In the case of <c>printTwice</c>, Java won't convert the integer <c>17</c> to the string <c>"17"</c> automatically.
</p>

<p>
<idx><h>automatic conversion</h></idx>
Sometimes Java can convert an argument from one type to another automatically.
For example, <c>Math.sqrt</c> requires a <c>double</c>, but if you invoke <c>Math.sqrt(25)</c>, the integer value <c>25</c> is automatically converted to the floating-point value <c>25.0</c>.
</p>

<p>
<idx><h>local variable</h></idx>
<idx><h>variable</h><h>local</h></idx>
Parameters and other variables exist only inside their own methods.
In the <c>printTwice</c> example, there is no such thing as <c>s</c> in the <c>main</c> method.
If you try to use it there, you'll get a compiler error.
</p>

<p>
Similarly, inside <c>printTwice</c> there is no such thing as <c>message</c>.
That variable belongs to <c>main</c>.
Because variables exist only inside the methods where they are defined, they are often called <em>local variables</em>.
</p>
</section>
