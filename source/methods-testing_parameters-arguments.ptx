<section xml:id="methods-testing_parameters-arguments" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Parameters and Arguments</title>
<p>
Some of the functions we have used require <term>arguments</term>, which are the values you provide in parentheses when you invoke the function.
</p>

<p>
For example, the <c>println</c> function takes a <c>String</c> argument.
To display a message, you have to provide the message: <c>System.out.println("Hello")</c>.
Similarly, the <c>printf</c> function can take multiple arguments.
The statement <c>System.out.printf("%d in = %f cm
n", inch, cm)</c> has three arguments: the format string, the <c>inch</c> value, and the <c>cm</c> value.
</p>

<p>
<idx><h>parameter</h></idx>
<idx><h>argument</h></idx>
When you invoke a function, you provide the arguments.
When you define a function, you name the <term>parameters</term>, which are variables that indicate what arguments are required.
The following class shows an example:
</p>

<p>
<idx><h>PrintTwice.java</h></idx>
</p>

<listing filename="PrintTwice.java">
<program xml:id="methods-testing_parameters-arguments-1" interactive="activecode">
<xi:include href="../programs/methods-testing_parameters-arguments-1.cpp" parse="text"/>
</program>
</listing>

<p>
The <c>printTwice</c> function has a parameter named <c>s</c> with type <c>String</c>.
When you invoke <c>printTwice</c>, you have to provide an argument with type <c>String</c>.
</p>

<p>
Before the function executes, the argument gets assigned to the parameter.
In the <c>printTwice</c> example, the argument <c>"Don't make me say this twice!"</c> gets assigned to the parameter <c>s</c>.
</p>

<p>
<idx><h>parameter passing</h></idx>
This process is called <term>parameter passing</term>, because the value gets passed from outside the function to the inside.
An argument can be any kind of expression, so if you have a <c>String</c> variable, you can use its value as an argument:
</p>

<program xml:id="methods-testing_parameters-arguments-2">
<xi:include href="../programs/methods-testing_parameters-arguments-2.cpp" parse="text"/>
</program>

<p>
The value you provide as an argument must have the same (or compatible) type as the parameter.
For example, if you try this:
</p>

<program xml:id="methods-testing_parameters-arguments-3" interactive="activecode">
<xi:include href="../programs/methods-testing_parameters-arguments-3.cpp" parse="text"/>
</program>

<p>
You will get an error message like this:
</p>

<console>
<output>
File: Test.java  [line: 10]
Error: function printTwice in class Test cannot be applied
       to given types;
  required: java.lang.String
  found: int
  reason: actual argument int cannot be converted to
          java.lang.String by function invocation conversion
</output>
</console>

<p>
This error message says that it found an <c>int</c> argument, but the required parameter should be a <c>String</c>.
In the case of <c>printTwice</c>, Java won't convert the integer <c>17</c> to the string <c>"17"</c> automatically.
</p>

<p>
<idx><h>automatic conversion</h></idx>
Sometimes Java can convert an argument from one type to another automatically.
For example, <c>Math.sqrt</c> requires a <c>double</c>, but if you invoke <c>Math.sqrt(25)</c>, the integer value <c>25</c> is automatically converted to the floating-point value <c>25.0</c>.
</p>

<p>
<idx><h>local variable</h></idx>
<idx><h>variable</h><h>local</h></idx>
Parameters and other variables exist only inside their own functions.
In the <c>printTwice</c> example, there is no such thing as <c>s</c> in the <c>main</c> function.
If you try to use it there, you'll get a compiler error.
</p>

<p>
Similarly, inside <c>printTwice</c> there is no such thing as <c>message</c>.
That variable belongs to <c>main</c>.
Because variables exist only inside the functions where they are defined, they are often called <term>local variables</term>.
</p>
</section>
