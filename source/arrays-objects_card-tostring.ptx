<section xml:id="arrays-objects_card-tostring" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Card toString</title>
<p>
When you create a new class, the first step is to declare the instance variables and write constructors.
A good next step is to write <c>toString</c>, which is useful for debugging and incremental development.
</p>

<p>
    <idx><h>string</h><h>array of</h></idx>
    <idx><h>array</h><h>of strings</h></idx>
To display <c>Card</c> objects in a way that humans can read easily, we need to <q>decode</q> the integer values as words.
A natural way to do that is with an array of <c>String</c>s.
For example, we can create the array like this:
</p>

<program xml:id="arrays-objects_card-tostring-1">
<xi:include href="../programs/arrays-objects_card-tostring-1.cpp" parse="text"/>
</program>

<p>
And then assign values to the elements:
</p>

<program xml:id="arrays-objects_card-tostring-2">
<xi:include href="../programs/arrays-objects_card-tostring-2.cpp" parse="text"/>
</program>

<p>
Or we can create the array and initialize the elements at the same time, as you saw in <xref ref="printarray">Section</xref>:
</p>

<program xml:id="arrays-objects_card-tostring-3">
<xi:include href="../programs/arrays-objects_card-tostring-3.cpp" parse="text"/>
</program>

<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
    <idx><h>reference</h></idx>
    <idx><h>string</h><h>reference to</h></idx>
The memory diagram in <xref ref="fig_stringarray">Figure</xref> shows the result.
Each element of the array is a reference to a <c>String</c>.
</p>
<figure xml:id="fig_stringarray" >
<caption>Memory diagram of an array of strings.</caption>
<image width="73%" source="external/images/stringarray.png" />
</figure>
<p>
We also need an array to decode the ranks:
</p>

<program xml:id="arrays-objects_card-tostring-4">
<xi:include href="../programs/arrays-objects_card-tostring-4.cpp" parse="text"/>
</program>

<p>
The zeroth element should never be used, because the only valid ranks are 1<ndash/>13.
We set it to <c>null</c> to indicate an unused element.
</p>

<p>
Using these arrays, we can create a meaningful <c>String</c> by using <c>suit</c> and <c>rank</c> as indexes.
</p>

<program xml:id="arrays-objects_card-tostring-5">
<xi:include href="../programs/arrays-objects_card-tostring-5.cpp" parse="text"/>
</program>

<p>
The expression <c>ranks[this.rank]</c> means <q>use the instance variable <c>rank</c> from <c>this</c> object as an index into the array <c>ranks</c>.</q>
We select the string for <c>this.suit</c> in a similar way.
</p>

<p>
Now we can wrap all the previous code in a <c>toString</c> function:
</p>

<program xml:id="arrays-objects_card-tostring-6">
<xi:include href="../programs/arrays-objects_card-tostring-6.cpp" parse="text"/>
</program>

<p>
When we display a card, <c>println</c> automatically calls <c>toString</c>.
The output of the following code is <c>Jack of Diamonds</c>:
</p>

<program xml:id="arrays-objects_card-tostring-7">
<xi:include href="../programs/arrays-objects_card-tostring-7.cpp" parse="text"/>
</program>

</section>
