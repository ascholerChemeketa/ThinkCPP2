<section xml:id="advanced-topics_exercises" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Exercises</title>
<p>
The code for this chapter is in the <term>ch17</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>

<p>
The following exercises give you a chance to practice using the features in this chapter by extending the example code.
</p>
<exercise label="advanced-topics_exercises-ex-1">
<statement>
<p>
The <pf>Polygon</pf> class does not provide a <pf>toString</pf> function; it inherits the default <pf>toString</pf> from <pf>java.lang.Object</pf>, which includes only the class's name and memory location.
Write a more useful <pf>toString</pf> function for <pf>DrawablePolygon</pf> that includes its <m>(x, y)</m> points.
</p>
</statement>
</exercise>

<exercise label="advanced-topics_exercises-ex-2">
<statement>
<p>
Write a class <pf>MovingPolygon</pf> that extends <pf>RegularPolygon</pf> and implements <pf>Actor</pf>.
It should have instance variables <pf>posx</pf> and <pf>posy</pf> that specify its position, and <pf>dx</pf> and <pf>dy</pf> that specify its velocity (and direction).
During each time step, it should update its position.
If it gets to the edge of the <pf>Drawing</pf>, it should reverse direction by changing the sign of <pf>dx</pf> or <pf>dy</pf>.
</p>
</statement>
</exercise>

<exercise label="advanced-topics_exercises-ex-3">
<statement>
<p>
Modify the <pf>VideoGame</pf> class so it displays a <pf>Sprite</pf> and a <pf>MovingPolygon</pf> (from the previous exercise).
Add code that detects collisions between <pf>Actor</pf> objects in the same <pf>Drawing</pf>, and invoke a function on both objects when they collide.
</p>

<p>
<term>Hint:</term> You might want to add a function to the <pf>Actor</pf> interface, guaranteeing that all <pf>Actor</pf> objects know how to handle collisions.
</p>
</statement>
</exercise>

<exercise label="advanced-topics_exercises-ex-4">
<statement>
<p>
Java provides other event listeners that you can implement to make your programs interactive.
For example, the interfaces <pf>MouseListener</pf>, <pf>MouseMotionListener</pf>, and <pf>MouseWheelListener</pf> allow you to respond to mouse input.
Use the <pf>MouseListener</pf> interface to implement an <pf>Actor</pf> that can respond to mouse clicks.
</p>
</statement>
</exercise>
<p>
\appendix
</p>
</section>
