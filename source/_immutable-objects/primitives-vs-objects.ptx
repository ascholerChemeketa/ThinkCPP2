<section xml:id="immutable-objects_primitives-vs-objects" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Primitives vs Objects</title>
<p>
    <idx><h>primitive</h></idx>
Not everything in Java is an object: <pf>int</pf>, <pf>double</pf>, <pf>char</pf>, and <pf>boolean</pf> are <term>primitive</term> types.
When you declare a variable with a primitive type, Java reserves a small amount of memory to store its value.
<xref ref="fig_mem1">Figure</xref> shows how the following values are stored in memory:
</p>

<program>
<xi:include href="../../programs/immutable-objects/primitives-vs-objects-1.cpp" parse="text"/>
</program>
  <figure xml:id="fig_mem1" >
<caption>Memory diagram of two primitive variables.</caption>
<image width="73%" source="images/mem1.png" />
</figure>
<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
As you learned in <xref ref="elements">Section</xref>, an array variable stores a <term>reference</term> to an array.
For example, the following line declares a variable named <pf>array</pf> and creates an array of three characters:
</p>

<program>
<xi:include href="../../programs/immutable-objects/primitives-vs-objects-2.cpp" parse="text"/>
</program>

<p>
<xref ref="fig_mem2">Figure</xref> shows them both, with a box to represent the location of the variable and an arrow pointing to the location of the array.
</p>
<figure xml:id="fig_mem2" >
<caption>Memory diagram of an array of characters.</caption>
<image width="73%" source="images/mem2.png" />
</figure>
<p>
Objects work in a similar way.
For example, this line declares a <pf>String</pf> variable named <pf>word</pf> and creates a <pf>String</pf> object, as shown in <xref ref="fig_mem3">Figure</xref>:
</p>

<program>
<xi:include href="../../programs/immutable-objects/primitives-vs-objects-3.cpp" parse="text"/>
</program>
  <figure xml:id="fig_mem3" >
<caption>Memory diagram of a <pf>String</pf> object.</caption>
<image width="73%" source="images/mem3.png" />
</figure>
<p>
Objects and arrays are usually created with the <pf>new</pf> keyword, which allocates memory for them.
For convenience, you don't have to use <pf>new</pf> to create strings:
</p>

<program>
<xi:include href="../../programs/immutable-objects/primitives-vs-objects-4.cpp" parse="text"/>
</program>

<p>
    <idx><h>string</h><h>comparing</h></idx>
Recall from <xref ref="strcmp">Section</xref> that you need to use the <pf>equals</pf> function to compare strings.
The <pf>equals</pf> function traverses the <pf>String</pf> objects and tests whether they contain the same characters.
</p>

<p>
To test whether two integers or other primitive types are equal, you can simply use the <pf>==</pf> operator.
But two <pf>String</pf> objects with the same characters would not be considered equal in the <pf>==</pf> sense.
The <pf>==</pf> operator, when applied to string variables, tests only whether they refer to the <term>same</term> object.
</p>
</section>
