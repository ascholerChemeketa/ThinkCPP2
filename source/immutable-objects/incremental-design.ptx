<section xml:id="immutable-objects_incremental-design" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Incremental Design</title>
<p>
    <idx><h>design process</h></idx>
    <idx><h>encapsulation</h><h>and generalization</h></idx>
One challenge of programming, especially for beginners, is figuring out how to divide a program into functions.
In this section, we present a <term>design process</term> that allows you to divide a program into functions as you go along.
The process is called <q>encapsulation and generalization</q>.
The essential steps are as follows:
<ol>
<li><p>Write a few lines of code in <pf>main</pf> or another function, and test them.</p></li>
<li><p>When they are working, wrap them in a new function and test again.</p></li>
<li><p>If it's appropriate, replace literal values with variables and parameters.</p></li>
</ol>
</p>

<p>
    <idx><h>table</h><h>two-dimensional</h></idx>
To demonstrate this process, we'll develop functions that display multiplication tables.
We begin by writing and testing a few lines of code.
Here is a loop that displays the multiples of two, all on one line:
</p>

<program xml:id="immutable-objects_incremental-design-1">
<xi:include href="../../programs/immutable-objects/incremental-design-1.cpp" parse="text"/>
</program>

<p>
Each time through the loop, we display the value of <pf>2 * i</pf>, padded with spaces so it's four characters wide.
Since we use <pf>System.out.printf</pf>, the output appears on a single line.
</p>

<p>
After the loop, we call <pf>println</pf> to print a newline character.
Remember that in some environments, none of the output is displayed until the line is complete.
The output of the code so far is shown here:
</p>

<console>
<output>
2   4   6   8  10  12
</output>
</console>

<p>
    <idx><h>encapsulate</h></idx>
The next step is to <term>encapsulate</term> the code; that is, we <q>wrap</q> the code in a function:
</p>

<program xml:id="immutable-objects_incremental-design-2">
<xi:include href="../../programs/immutable-objects/incremental-design-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>generalize</h></idx>
Finally, we <term>generalize</term> the function to print multiples of other numbers by replacing the constant value <pf>2</pf> with a parameter <pf>n</pf>.
This step is called <q>generalization</q>, because it makes the function more general (less specific):
</p>

<program xml:id="immutable-objects_incremental-design-3">
<xi:include href="../../programs/immutable-objects/incremental-design-3.cpp" parse="text"/>
</program>

<p>
Invoking this function with the argument <pf>2</pf> yields the same output as before.
With the argument <pf>3</pf>, the output is as follows:
</p>

<console>
<output>
3   6   9  12  15  18
</output>
</console>

<p>
By now, you can probably guess how we are going to display a multiplication table: we'll invoke <pf>printRow</pf> repeatedly with different arguments.
In fact, we'll use another loop to iterate through the rows:
</p>

<program xml:id="immutable-objects_incremental-design-4">
<xi:include href="../../programs/immutable-objects/incremental-design-4.cpp" parse="text"/>
</program>

<p>
And the output looks like this:
</p>

<console>
<output>
1   2   3   4   5   6
   2   4   6   8  10  12
   3   6   9  12  15  18
   4   8  12  16  20  24
   5  10  15  20  25  30
   6  12  18  24  30  36
</output>
</console>

</section>
