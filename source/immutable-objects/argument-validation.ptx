<section xml:id="immutable-objects_argument-validation" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Argument Validation</title>
<p>
As we discussed in <xref ref="validate">Section</xref>, you should never assume that program input will be in the correct format.
Sometimes users make mistakes, such as pressing the wrong key or misreading instructions.
</p>

<p>
    <idx><h>hacker</h></idx>
Or even worse, someone might make intentional <q>mistakes</q> to see what your program will do.
One way hackers break into computer systems is by entering malicious input that causes a program to fail.
</p>

<p>
Programmers can make mistakes too.
It's difficult to write bug-free software, especially when working in teams on large projects.
</p>

<p>
    <idx><h>validate</h></idx>
For all of these reasons, it's good practice to validate arguments passed to functions, including the <pf>main</pf> function.
In the previous section, we did this by ensuring that <pf>args.length</pf> was not 0.
</p>

<p>
    <idx><h>Character</h></idx>
As a further example, consider a function that checks whether the first word of a sentence is capitalized.
We can write this function using the <pf>Character</pf> wrapper class:
</p>

<program xml:id="immutable-objects_argument-validation-1">
<xi:include href="../../programs/immutable-objects/argument-validation-1.cpp" parse="text"/>
</program>

<p>
The expression <pf>str.charAt(0)</pf> makes two assumptions: the string object referenced by <pf>str</pf> exists, and it has at least one character.
What if these assumptions don't hold at run-time?
</p>

<p>
    <idx><h>NullPointerException</h></idx>
    <idx><h>exception</h><h>NullPointer</h></idx>
<ul>
<li><p>If <pf>str</pf> is <pf>null</pf>, invoking <pf>charAt</pf> will cause a <pf>NullPointerException</pf>, because you can't invoke a function on <pf>null</pf>.</p></li>
<li><p>If <pf>str</pf> refers to an empty string, which is a <pf>String</pf> object with no characters, <pf>charAt</pf> will cause a <pf>StringIndexOutOfBoundsException</pf>, because there is no character at index <pf>0</pf>.</p></li>
</ul>
</p>

<p>
    <idx><h>StringIndexOutOfBoundsException</h></idx>
    <idx><h>exception</h><h>StringIndexOutOfBounds</h></idx>
We can prevent these exceptions by validating <pf>str</pf> <term>at the start</term> of the function.
If it's invalid, we return before executing the rest of the function:
</p>

<program xml:id="immutable-objects_argument-validation-2">
<xi:include href="../../programs/immutable-objects/argument-validation-2.cpp" parse="text"/>
</program>

<p>
Notice that <pf>null</pf> and <term>empty</term> are different concepts, as shown in <xref ref="fig_nullempty">Figure</xref>.
The variable <pf>str1</pf> is <pf>null</pf>, meaning that it doesn't reference an object.
The variable <pf>str2</pf> refers to the empty string, an object that exists.
</p>
<figure xml:id="fig_nullempty" >
<caption>Memory diagram of <pf>null</pf> and empty string.</caption>
<image width="73%" source="images/nullempty.png" />
</figure>
<p>
Beginners sometimes make the mistake of checking for empty first.
Doing so causes a <pf>NullPointerException</pf>, because you can't invoke functions on variables that are <pf>null</pf>:
</p>

<program xml:id="immutable-objects_argument-validation-3">
<xi:include href="../../programs/immutable-objects/argument-validation-3.cpp" parse="text"/>
</program>

<p>
    <idx><h>short circuit</h></idx>
Checking for <pf>null</pf> first prevents the <pf>NullPointerException</pf>.
If <pf>str</pf> is <pf>null</pf>, the <pf>||</pf> operator will short circuit (see <xref ref="shortcircuit">Section</xref>) and evaluate to <pf>true</pf> immediately.
As a result, <pf>str.isEmpty()</pf> will not be called.
</p>
</section>
