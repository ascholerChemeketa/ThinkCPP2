<section xml:id="immutable-objects_strings-are-immutable" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Strings Are Immutable</title>
<p>
If the Java library didn't have a <pf>String</pf> class, we would have to use character arrays to store and manipulate text.
Operations like concatenation<nbsp/>(<pf>+</pf>), <pf>indexOf</pf>, and <pf>substring</pf> would be difficult and inconvenient.
Fortunately, Java does have a <pf>String</pf> class that provides these and other functions.
</p>

<p>
    <idx><h>toUpperCase</h></idx>
    <idx><h>toLowerCase</h></idx>
    <idx><h>immutable</h></idx>
For example, the functions <pf>toLowerCase</pf> and <pf>toUpperCase</pf> convert uppercase letters to lowercase, and vice versa.
These functions are often a source of confusion, because it sounds like they modify strings.
But neither these functions nor any others can change a string, because strings are <term>immutable</term>.
</p>

<p>
When you invoke <pf>toUpperCase</pf> on a string, you get a new <pf>String</pf> object as a result.
For example:
</p>

<program xml:id="immutable-objects_strings-are-immutable-1">
<xi:include href="../../programs/immutable-objects/strings-are-immutable-1.cpp" parse="text"/>
</program>

<p>
After these statements run, <pf>upperName</pf> refers to the string <pf>"ALAN TURING"</pf>.
But <pf>name</pf> still refers to <pf>"Alan Turing"</pf>.
A common mistake is to assume that <pf>toUpperCase</pf> somehow affects the original string:
</p>

<program xml:id="immutable-objects_strings-are-immutable-2">
<xi:include href="../../programs/immutable-objects/strings-are-immutable-2.cpp" parse="text"/>
</program>

<p>
The previous code displays <pf>"Alan Turing"</pf>, because the value of <pf>name</pf>, which refers to the original <pf>String</pf> object, never changes.
If you want to change <pf>name</pf> to be uppercase, then you need to assign the return value:
</p>

<program xml:id="immutable-objects_strings-are-immutable-3">
<xi:include href="../../programs/immutable-objects/strings-are-immutable-3.cpp" parse="text"/>
</program>

<p>
    <idx><h>replace</h></idx>
A similar function is <pf>replace</pf>, which finds and replaces instances of one string within another.
This example replaces <pf>"Computer Science"</pf> with <pf>"CS"</pf>:
</p>

<program xml:id="immutable-objects_strings-are-immutable-4">
<xi:include href="../../programs/immutable-objects/strings-are-immutable-4.cpp" parse="text"/>
</program>

<p>
As with <pf>toUpperCase</pf>, assigning the return value (to <pf>text</pf>) is important.
If you don't assign the return value, invoking <pf>text.replace</pf> has no effect.
</p>

<p>
Strings are immutable by design, because it simplifies passing them as parameters and return values.
And since the contents of a string can never change, two variables can reference the same string without one accidentally corrupting the other.
</p>
</section>
