<section xml:id="immutable-objects_more-generalization" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>More Generalization</title>
<p>
The previous result is similar to the <q>nested loops</q> approach in <xref ref="nested">Section</xref>.
However, the inner loop is now encapsulated in the <pf>printRow</pf> function.
We can encapsulate the outer loop in a function too:
</p>

<program xml:id="immutable-objects_more-generalization-1">
<xi:include href="../../programs/immutable-objects/more-generalization-1.cpp" parse="text"/>
</program>

<p>
The initial version of <pf>printTable</pf> always displays six rows.
We can generalize it by replacing the literal <pf>6</pf> with a parameter:
</p>

<program xml:id="immutable-objects_more-generalization-2">
<xi:include href="../../programs/immutable-objects/more-generalization-2.cpp" parse="text"/>
</program>

<p>
Here is the output of <pf>printTable(7)</pf>:
</p>

<console>
<output>
1   2   3   4   5   6
   2   4   6   8  10  12
   3   6   9  12  15  18
   4   8  12  16  20  24
   5  10  15  20  25  30
   6  12  18  24  30  36
   7  14  21  28  35  42
</output>
</console>

<p>
That's better, but it always displays the same number of columns.
We can generalize more by adding a parameter to <pf>printRow</pf>:
</p>

<program xml:id="immutable-objects_more-generalization-3">
<xi:include href="../../programs/immutable-objects/more-generalization-3.cpp" parse="text"/>
</program>

<p>
Now <pf>printRow</pf> takes two parameters: <pf>n</pf> is the value whose multiples should be displayed, and <pf>cols</pf> is the number of columns.
Since we added a parameter to <pf>printRow</pf>, we also have to change the line in <pf>printTable</pf> where it is invoked:
</p>

<program xml:id="immutable-objects_more-generalization-4">
<xi:include href="../../programs/immutable-objects/more-generalization-4.cpp" parse="text"/>
</program>

<p>
When this line executes, it evaluates <pf>rows</pf> and passes the value, which is <pf>7</pf> in this example, as an argument.
In <pf>printRow</pf>, this value is assigned to <pf>cols</pf>.
As a result, the number of columns equals the number of rows, so we get a square \mbox{7 x 7} table, instead of the previous \mbox{7 x 6} table.
</p>

<p>
When you generalize a function appropriately, you often find that it has capabilities you did not plan.
For example, you might notice that the multiplication table is symmetric.
Since <m>ab = ba</m>, all the entries in the table appear twice.
You could save ink by printing half of the table, and you would have to change only <term>one line</term> of <pf>printTable</pf>:
</p>

<program xml:id="immutable-objects_more-generalization-5">
<xi:include href="../../programs/immutable-objects/more-generalization-5.cpp" parse="text"/>
</program>

<p>
This means the length of each row is the same as its row number.
The result is a triangular multiplication table:
</p>

<console>
<output>
1
   2   4
   3   6   9
   4   8  12  16
   5  10  15  20  25
   6  12  18  24  30  36
   7  14  21  28  35  42  49
</output>
</console>

<p>
Generalization makes code more versatile, more likely to be reused, and sometimes easier to write.
</p>
</section>
