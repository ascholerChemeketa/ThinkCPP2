<section xml:id="immutable-objects_wrapper-classes" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Wrapper Classes</title>
<p>
Primitive types like <pf>int</pf>, <pf>double</pf>, and <pf>char</pf> cannot be <pf>null</pf>, and they do not provide functions.
For example, you can't invoke <pf>equals</pf> on an <pf>int</pf>:
</p>

<program>
<xi:include href="../../programs/immutable-objects/wrapper-classes-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>wrapper class</h></idx>
    <idx><h>class</h><h>wrapper</h></idx>
    <idx><h>Character</h></idx>
    <idx><h>Integer</h></idx>
    <idx><h>Double</h></idx>
But for each primitive type, there is a corresponding <term>wrapper class</term> in the Java library.
The wrapper class for <pf>int</pf> is named <pf>Integer</pf>, with a capital <pf>I</pf>:
</p>

<program>
<xi:include href="../../programs/immutable-objects/wrapper-classes-2.cpp" parse="text"/>
</program>

<p>
Other wrapper classes include <pf>Boolean</pf>, <pf>Character</pf>, <pf>Double</pf>, and <pf>Long</pf>.
They are in the <pf>java.lang</pf> package, so you can use them without importing them.
</p>

<p>
Like strings, objects from wrapper classes are immutable, and you have to use the <pf>equals</pf> function to compare them:
</p>

<program>
<xi:include href="../../programs/immutable-objects/wrapper-classes-3.cpp" parse="text"/>
</program>

<p>
Because <pf>x</pf> and <pf>y</pf> refer to different objects, this code displays only <q>x and y have the same value</q>.
</p>

<p>
Each wrapper class defines the constants <pf>MIN_VALUE</pf> and <pf>MAX_VALUE</pf>.
For example, <pf>Integer.MIN_VALUE</pf> is <pf>-2147483648</pf>, and <pf>Integer.MAX_VALUE</pf> is <pf>2147483647</pf>.
Because these constants are available in wrapper classes, you don't have to remember them, and you don't have to write them yourself.
</p>

<p>
    <idx><h>parse</h></idx>
Wrapper classes also provide functions for converting strings to and from primitive types.
For example, <pf>Integer.parseInt</pf> converts a string to an <pf>int</pf>.
In this context, <term>parse</term> means <q>read and translate</q>.
</p>

<program>
<xi:include href="../../programs/immutable-objects/wrapper-classes-4.cpp" parse="text"/>
</program>

<p>
Other wrapper classes provide similar functions, like <pf>Double.parseDouble</pf> and <pf>Boolean.parseBoolean</pf>.
They also provide <pf>toString</pf>, which returns a string representation of a value:
</p>

<program>
<xi:include href="../../programs/immutable-objects/wrapper-classes-5.cpp" parse="text"/>
</program>

<p>
The result is the <pf>String</pf> object <pf>"12345"</pf>.
</p>

<p>
    <idx><h>NumberFormatException</h></idx>
    <idx><h>exception</h><h>NumberFormat</h></idx>
It's always possible to convert a primitive value to a string, but not the other way around. For example, say we try to parse an invalid string like this:
</p>

<program>
<xi:include href="../../programs/immutable-objects/wrapper-classes-6.cpp" parse="text"/>
</program>

<p>
<pf>parseInt</pf> throws a <pf>NumberFormatException</pf>, because the characters in the string <pf>"five"</pf> are not digits.
</p>
</section>
