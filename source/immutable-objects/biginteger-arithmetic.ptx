<section xml:id="immutable-objects_biginteger-arithmetic" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>BigInteger Arithmetic</title>
<p>
It might not be clear at this point why you would ever need an integer object when you can just use an <pf>int</pf> or <pf>long</pf>.
One advantage is the variety of functions that <pf>Integer</pf> and <pf>Long</pf> provide.
But there is another reason: when you need very large integers that exceed <pf>Long.MAX_VALUE</pf>.
</p>

<p>
    <idx><h>BigInteger</h></idx>
<pf>BigInteger</pf> is a Java class that can represent arbitrarily large integers.
There is no upper bound except the limitations of memory size and processing speed.
Take a minute to read the documentation, which you can find by doing a web search for <q>Java BigInteger</q>.
</p>

<p>
    <idx><h>java.math</h></idx>
To use BigIntegers, you have to <pf>import java.math.BigInteger</pf> at the beginning of your program.
There are several ways to create a BigInteger, but the simplest uses <pf>valueOf</pf>.
The following code converts a <pf>long</pf> to a <pf>BigInteger</pf>:
</p>

<program>
<xi:include href="../../programs/immutable-objects/biginteger-arithmetic-1.cpp" parse="text"/>
</program>

<p>
You can also create BigIntegers from strings.
For example, here is a 20-digit integer that is too big to store using a <pf>long</pf>:
</p>

<program>
<xi:include href="../../programs/immutable-objects/biginteger-arithmetic-2.cpp" parse="text"/>
</program>

<p>
Notice the difference in the previous two examples: you use <pf>valueOf</pf> to convert integers, and <pf>new BigInteger</pf> to convert strings.
</p>

<p>
Since BigIntegers are not primitive types, the usual math operators don't work.
Instead, we have to use functions like <pf>add</pf>.
To add two BigIntegers, we invoke <pf>add</pf> on one and pass the other as an argument:
</p>

<program>
<xi:include href="../../programs/immutable-objects/biginteger-arithmetic-3.cpp" parse="text"/>
</program>

<p>
Like strings, <pf>BigInteger</pf> objects are immutable.
functions like <pf>add</pf>, <pf>multiply</pf>, and <pf>pow</pf> all return new BigIntegers, rather than modify an existing one.
</p>

<p>
Internally, a <pf>BigInteger</pf> is implemented using an array of <pf>int</pf>s, similar to the way a string is implemented using an array of <pf>char</pf>s.
Each <pf>int</pf> in the array stores a portion of the BigInteger.
The functions of <pf>BigInteger</pf> traverse this array to perform addition, multiplication, etc.
</p>

<p>
For very long floating-point values, take a look at <pf>java.math.BigDecimal</pf>.
Interestingly, <pf>BigDecimal</pf> objects represent floating-point numbers internally by using a <pf>BigInteger</pf>!
</p>
</section>
