<section xml:id="immutable-objects_commandline-arguments" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Command-Line Arguments</title>
<p>
    <idx><h>args</h></idx>
    <idx><h>command-line interface</h></idx>
Now that you know about strings, arrays, and wrapper classes, we can <term>finally</term> explain the <pf>args</pf> parameter of the <pf>main</pf> function, which we have been ignoring since <xref ref="theway">Chapter</xref>.
If you are unfamiliar with the command-line interface, please read <xref ref="commandline">Appendix</xref>.
</p>

<p>
Let's write a program to find the maximum value in a sequence of numbers.
Rather than read the numbers from <pf>System.in</pf> by using a <pf>Scanner</pf>, we'll pass them as command-line arguments.
Here is a starting point:
</p>

<program label="immutable-objects_commandline-arguments-program-1" interactive="activecode">
<xi:include href="../../programs/immutable-objects/commandline-arguments-1.cpp" parse="text"/>
</program>

<p>
You can run this program from the command line by typing this:
</p>

<console>
<output>
java Max
</output>
</console>

<p>
    <idx><h>empty array</h></idx>
The output indicates that <pf>args</pf> is an <term>empty array</term>; that is, it has no elements:
</p>

<p>
If you provide additional values on the command line, they are passed as arguments to <pf>main</pf>.
For example, say you run the program like this:
</p>

<console>
<output>
java Max 10 -3 55 0 14
</output>
</console>

<p>
The output is shown here:
</p>

<p>
It's not clear from the output, but the elements of <pf>args</pf> are strings.
So <pf>args</pf> is the array <pf>\{"10", "-3", "55", "0", "14"\}</pf>.
To find the maximum number, we have to convert the arguments to integers.
</p>

<p>
The following code uses an enhanced <pf>for</pf> loop (see <xref ref="enhanced">Section</xref>) to parse the arguments and find the largest value:
</p>

<program>
<xi:include href="../../programs/immutable-objects/commandline-arguments-2.cpp" parse="text"/>
</program>

<p>
We begin by initializing <pf>max</pf> to the smallest (most negative) number an <pf>int</pf> can represent.
That way, the first value we parse will replace <pf>max</pf>.
As we find larger values, they will replace <pf>max</pf> as well.
</p>

<p>
If <pf>args</pf> is empty, the result will be <pf>MIN_VALUE</pf>.
We can prevent this situation from happening by checking <pf>args</pf> at the beginning of the program:
</p>

<program>
<xi:include href="../../programs/immutable-objects/commandline-arguments-3.cpp" parse="text"/>
</program>

<p>
    <idx><h>javac</h></idx>
It's customary for programs that require command-line arguments to display a <q>usage</q> message if the arguments are not valid.
For example, if you run <pf>javac</pf> or <pf>java</pf> from the command line without any arguments, you will get a very long message.
</p>
</section>
