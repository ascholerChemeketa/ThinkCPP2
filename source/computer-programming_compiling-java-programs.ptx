<section xml:id="computer-programming_compiling-java-programs"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Compiling C++ Programs</title>
  <p>The programming language you will learn in this book is C++, which is a <term>high-level
    language</term>. A high-level language is one that allows the programmer to write code that is
    abstracted from the physical details of the computer it will run on. When using one of these
    languages, the programmer does not have to worry about what machine instructions the CPU
    supports, or how the CPU specifies particular addresses in memory. Most programming languages
    used by programmers are high-level ones. Some examples you may have heard of include Python,
    Java, or JavaScript. <idx>
      <h>high-level language</h>
    </idx>
    <idx>
      <h>language</h>
      <h>high-level</h>
    </idx>
  </p>

  <p>Computers can't actually run code in high-level languages. Before they can run, programs in
    high-level languages have to be translated into a <term>low-level language</term>, also called <q>machine
    language</q>. This translation takes some time, which is a small disadvantage of high-level
    languages. But high-level languages have two major advantages: <ul>
      <li>
        <p>It is <term>much</term> easier to program in a high-level language. Programs take less
    time to write, they are shorter and easier to read, and they are more likely to be correct.</p>
      </li>
      <li>
        <p>High-level languages are <term>portable</term>, meaning they can run on different kinds
    of computers with few or no modifications. Low-level programs can run on only one kind of
    computer.<idx>
            <h>portable</h>
          </idx></p>
      </li>
    </ul>
    <idx>
      <h>low-level language</h>
    </idx>
    <idx>
      <h>language</h>
      <h>low-level</h>
    </idx>
  </p>

  <p>Two kinds of programs translate high-level languages into low-level languages: interpreters and
    compilers. An <term>interpreter</term> reads a high-level program and executes it, meaning that
    it does what the program says. It processes the program a little at a time, alternately reading
    lines and performing computations. Languages like Python and Javascript are often interpreted.<xref ref="fig_interpreter">
    Figure</xref> shows the structure of an interpreter. </p>
  <figure xml:id="fig_interpreter">
    <caption>How interpreted languages are executed.</caption>
    <image width="73%"
           source="external/images/interpreter.svg"/>
  </figure>
  <p>In contrast, a <term>compiler</term> reads the entire program and translates it completely
    before the program starts running. The high-level program is called the <term>source
      code</term>. The translated program is called the <term>object
      code</term>, or the <term>executable</term>. Once a program is compiled, you can execute it
    repeatedly without further translation of the source code. As a result, compiled programs often
    run faster than interpreted programs. <idx>
      <h>interpret</h>
    </idx> 
    <idx>
      <h>compile</h>
    </idx>
    <idx>
      <h>source code</h>
    </idx>
    <idx>
      <h>object code</h>
    </idx>
    <idx>
      <h>executable</h>
    </idx>
  </p>

  <p>The programmer writes source code in a file. For C++ these typically have the extension <c>.cpp</c>
    - like <em>hello.cpp</em>. Then they use a C++ compiler like <c>g++</c> to compile it. If there are
    no errors, the compiler saves the object code into a file with a name specified by the developer
    - here we will call it <c>hello.exe</c>. When the programmer executes the program, its output is
    displayed on the screen. </p>

  <figure xml:id="fig_compiler">
    <caption>The process of compiling and running a C++ program.</caption>
    <image width="73%"
           source="external/images/compiler.svg"/>
  </figure>
  <!-- TODO fix diagrams -->

  <p>
    Although it might seem complicated, these steps are automated for you in most development
    environments. Usually, you only have to press a button or type a single command to compile and interpret
    your program. On the other hand, it is important to know what steps are happening in the background, so if
    something goes wrong you can figure out what it is.
  </p>
</section>