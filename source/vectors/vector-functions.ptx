<section xml:id="vectors_vector-functions"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Functions and Vectors</title>

  <p>Vectors can be the parameters or the return types for functions. For now, we need to specify what type of vector the function accepts or returns (<pf>vector&lt;int></pf>, <pf>vector&lt;string></pf>, etc...). Later on we will learn how to make a <q>generic</q> function that can work with a vector that stores any type.</p>

  <p>Say we want to write a function that can add up all of the values in a <pf>vector&lt;int.</pf>. It could look like:</p>

  <program line-numbers="yes">
<xi:include href="../../programs/vectors/vector-functions-1.cpp" parse="text"/>
</program>

  <p>However, that version of the function would <term>pass by value</term> and copy the entire vector that was passed. It would be better to <term>pass by const reference</term>. Nothing other than the parameter needs to be changed:</p>

  <program line-numbers="yes" highlight-lines="2">
<xi:include href="../../programs/vectors/vector-functions-2.cpp" parse="text"/>
</program>

  <p>To return a vector, we can declare the return type to be a <pf>vector&lt;T></pf> and then make sure to return an appropriate type of vector. (A returned value is always copied, though the compiler may do some tricks to avoid actually copying the data). This function returns a new vector that is a copy of the one passed in which every element gets doubled:</p>

  <listing>
  <program label="vectors_vector-functions-program-1" interactive="activecode">
<xi:include href="../../programs/vectors/vector-functions-3.cpp" parse="text"/>
</program>
  </listing>

  <p>Note that we could write the function so that instead of making a new vector and returning that we modified the vector that was passed in:</p>

  <listing>
  <program label="vectors_vector-functions-program-2" interactive="activecode">
<xi:include href="../../programs/vectors/vector-functions-4.cpp" parse="text"/>
</program>
  </listing>

  <p>In this version, we must take the vector parameter as a reference that is not <pf>const</pf> so we can modify the vector (line 7). Similarly, as we use a range-based loop to traverse the elements, we need to declare the element type to be an <pf>int&amp;</pf> - a reference to an int - so that we are working with the actual element and not a copy of its value (line 9). Because the parameter is modified, there is nothing new to return from the function. So the return type is declared as <pf>void</pf> (line 7) and when it is called in <pf>main</pf>, there is no result to store (line 17). Because we <term>passed by reference</term>, all of the changes made to <pf>numbers</pf> in <pf>doubleValues</pf> really were made to <pf>myList</pf> that was passed in from <pf>main</pf>.</p>

  <exercise label="vectors_vector-functions-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct the <pf>makeEven</pf> function that makes a new vector by looping through <pf>vec</pf> to copy elements. Any element with an odd value get 1 added to make it even before it is copied.</p>
    </statement>
    <blocks>
      <block>
        <choice correct="yes">
          <cline><![CDATA[vector<int> makeEven(const vector<int>& vec) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[void makeEven(vector<int> vec) {                         ]]></cline>
        </choice>
      </block>
      <block>
          <cline><![CDATA[   vector<int> copiedValues;]]></cline>
      </block>
      <block>
        <choice correct="yes">
          <cline><![CDATA[   for (size_t i = 0; i < vec.size(); ++i) {]]></cline>
          <cline><![CDATA[      int value = vec.at(i);]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   for (int i = 0; i < vec.size(); ++i) {]]></cline>
          <cline><![CDATA[      int value = vec.at(i);]]></cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline>      if (value % 2 == 1) {</cline>
        </choice>
        <choice>
          <cline>      if (i % 2 == 1) {                         </cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline>         value += 1;</cline>
          <cline>      }</cline>
        </choice>
        <choice>
          <cline>         i += 1;                         </cline>
          <cline>      }</cline>
        </choice>
      </block>
      <block>
          <cline><![CDATA[      copiedValues.push_back(value);]]></cline>
      </block>
      <block>
        <cline>   }</cline>
        <cline>   return vec;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>


  <exercise label="vectors_vector-functions-ex-2">
    <statement>
      <p>Suppose the following code is run:</p>
      <program>
vector&lt;string&gt; lauren = {"happy", "to", "you", "September", "birthday", "girl"}
</program>
      <p>How would you save the string <pf>"birthday"</pf> from <pf>lauren</pf> to the variable <pf>nurse</pf>?</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>
            <pf>nurse = lauren.at(4)</pf>
          </p>
        </statement>
        <feedback>
          Vectors are zero-indexed, so the fifth element is the fourth index.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>nurse = lauren.at(5)</pf>
          </p>
        </statement>
        <feedback>
          Remember, vectors are zero-indexed!
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>nurse = lauren.at(6)</pf>
          </p>
        </statement>
        <feedback>
          Remember, vectors are zero-indexed!
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>nurse = lauren(4)</pf>
          </p>
        </statement>
        <feedback>
          This is not proper vector indexing.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>nurse = lauren(5)</pf>
          </p>
        </statement>
        <feedback>
          This is not proper vector indexing. Also, vectors are zero-indexed.
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>