<section xml:id="vectors_motivation"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>A Motivating Example</title>

  <p>We will start with a simple example. Imagine we need to counting the number of times each letter appears in a
    string. How would you tackle that task with what we have covered so far?</p>

  <p>One possible approach would be to use a nested loop. For each letter, we iterate through the string looking
  for matches to that letter:</p>

<program xml:id="vectors-1">
<xi:include href="../../programs/vectors/vectors-1.cpp" parse="text"/>
</program>

<p>This <q>nested loops</q> approach is inefficient, especially when the string is long. For
  example, there are more than 3 million characters in <term>War and Peace</term>; to process
  the whole book, the nested loop would run about 80 million times (26 letters times 3 million characters).</p>

<p>Another algorithm would initialize 26 variables to zero, loop through the string <term>one
  time</term>, and use a giant <c>if</c> statement to update the variable for each letter. But who
  wants to declare 26 variables or write that `if` statement?</p>

<p>That's where vector come in. We can use a single variable to store 26 integers. Rather than
  use an <c>if</c> statement to update each value, we can use arithmetic to update the <m>n</m>th
  value directly. We will present this algorithm at the end of the chapter.</p>

</section>