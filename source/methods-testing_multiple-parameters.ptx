<section xml:id="methods-testing_multiple-parameters">
<title>Multiple Parameters</title>
<p>
<idx><h>parameter</h><h>multiple</h></idx>
<idx><h>method</h><h>parameters</h></idx>
Here is an example of a method that takes two parameters:
</p>

<program>
public static void printTime(int hour, int minute) {
    System.out.print(hour);
    System.out.print(":");
    System.out.println(minute);
}
</program>

<p>
To invoke this method, we have to provide two integers as arguments:
</p>

<program>
int hour = 11;
int minute = 59;
printTime(hour, minute);
</program>

<p>
Beginners sometimes make the mistake of declaring the arguments:
</p>

<program>
int hour = 11;
int minute = 59;
printTime(int hour, int minute);  // syntax error
</program>

<p>
That's a syntax error, because the compiler sees <c>int hour</c> and <c>int minute</c> as variable declarations, not expressions that represent values.
You wouldn't declare the types of the arguments if they were simply integers:
</p>

<program>
printTime(int 11, int 59);  // syntax error
</program>

<p>
Pulling together the code fragments, here is the complete program:
</p>

<p>
<idx><h>PrintTime.java</h></idx>
</p>

<listing filename="PrintTime.java">
<program>
public class PrintTime {

    public static void printTime(int hour, int minute) {
        System.out.print(hour);
        System.out.print(":");
        System.out.println(minute);
    }

    public static void main(String[] args) {
        int hour = 11;
        int minute = 59;
        printTime(hour, minute);
    }
}
</program>
</listing>

<p>
<c>printTime</c> has two parameters, named <c>hour</c> and <c>minute</c>.
And <c>main</c> has two variables, also named <c>hour</c> and <c>minute</c>.
Although they have the same names, these variables are <em>not</em> the same.
The <c>hour</c> in <c>printTime</c> and the <c>hour</c> in <c>main</c> refer to different memory locations, and they can have different values.
</p>

<p>
For example, you could invoke <c>printTime</c> like this:
</p>

<program>
int hour = 11;
int minute = 59;
printTime(hour + 1, 0);
</program>

<p>
Before the method is invoked, Java evaluates the arguments; in this example, the results are <c>12</c> and <c>0</c>.
Then it assigns those values to the parameters.
Inside <c>printTime</c>, the value of <c>hour</c> is <c>12</c>, not <c>11</c>, and the value of <c>minute</c> is <c>0</c>, not <c>59</c>.
Furthermore, if <c>printTime</c> modifies one of its parameters, that change has no effect on the variables in <c>main</c>.
</p>
</section>
