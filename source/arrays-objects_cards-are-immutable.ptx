<section xml:id="arrays-objects_cards-are-immutable" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Cards Are Immutable</title>
<p>
The instance variables of <c>Card</c> are <c>private</c>, so they can't be accessed from other classes.
We can provide getters to allow other classes to read the <c>rank</c> and <c>suit</c> values:
</p>

<program xml:id="arrays-objects_cards-are-immutable-1">
<xi:include href="../programs/arrays-objects_cards-are-immutable-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>immutable</h></idx>
Whether or not to provide setters is a design decision.
If we did, cards would be mutable, so you could transform one card into another.
That is probably not a feature we want, and in general, mutable objects are more error-prone.
So it might be better to make cards immutable.
To do that, all we have to do is <term>not</term> provide any modifier functions (including setters).
</p>

<p>
    <idx><h>final</h></idx>
That's easy enough, but it is not foolproof, because a fool might come along later and add a modifier.
We can prevent that possibility by declaring the instance variables <c>final</c>:
</p>

<program xml:id="arrays-objects_cards-are-immutable-2">
<xi:include href="../programs/arrays-objects_cards-are-immutable-2.cpp" parse="text"/>
</program>

<p>
You can initialize these variables inside a constructor,
but if someone writes a function that tries to modify them, they'll get a compiler error.
This kind of safeguard helps prevent future mistakes and hours of debugging.
</p>
</section>
