<section xml:id="conditionals-logic_switch-statement">
<title>The switch Statement</title>
<p>
If you need to make a series of decisions, chaining <c>else if</c> blocks can get long and redundant.
For example, consider a program that converts integers like <c>1</c>, <c>2</c>, and <c>3</c> into words like <c>"one"</c>, <c>"two"</c>, and <c>"three"</c>:
</p>

<program>
if (number == 1) {
    word = "one";
} else if (number == 2) {
    word = "two";
} else if (number == 3) {
    word = "three";
} else {
    word = "unknown";
}
</program>

<p>
<idx><h>switch statement</h></idx>
<idx><h>statement</h><h>switch</h></idx>
This chain could go on and on, especially for banking programs that write numbers in long form (e.g., <q>one hundred twenty-three and 45/100 dollars</q>).
An alternative way to evaluate many possible values of an expression is to use a <c>switch</c> statement:
</p>

<program>
switch (number) {
    case 1:
        word = "one";
        break;
    case 2:
        word = "two";
        break;
    case 3:
        word = "three";
        break;
    default:
        word = "unknown";
        break;
}
</program>

<p>
The body of a <c>switch</c> statement is organized into one or more <c>case</c> blocks.
Each <c>case</c> ends with a <c>break</c> statement, which exits the <c>switch</c> body.
The <c>default</c> block is optional and executed only if none of the cases apply.
</p>

<p>
Although <c>switch</c> statements appear longer than chained <c>else if</c> blocks, they are particularly useful when multiple cases can be grouped:
</p>

<program>
switch (food) {
    case "apple":
    case "banana":
    case "cherry":
        System.out.println("Fruit!");
        break;
    case "asparagus":
    case "broccoli":
    case "carrot":
        System.out.println("Vegetable!");
        break;
}
</program>

</section>
