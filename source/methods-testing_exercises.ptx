<section xml:id="functions-testing_exercises" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Exercises</title>
<p>
The code for this chapter is in the <term>ch04</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>

<p>
If you have not already read <xref ref="cltesting">Appendix</xref>, now might be a good time.
It describes an efficient way to test programs that take input from the user and display specific output.
</p>
<exercise>
<statement>
<p>
The purpose of this exercise is to take code from a previous exercise and redesign it as a function that takes parameters.
Start with a working solution to <xref ref="ex_date">Exercise</xref>.
<ol>
<li><p>Write a function called <c>printAmerican</c> that takes the day, date, month, and year as parameters and displays them in American format.</p></li>
<li><p>Test your function by invoking it from <c>main</c> and passing appropriate arguments.
The output should look something like this (except the date might be different):


<console>
<output>
Monday, July 22, 2019
</output>
</console>
</p></li>
<li><p>Once you have debugged <c>printAmerican</c>, write another function called <c>printEuropean</c> that displays the date in European format.</p></li>
</ol>

</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
This exercise reviews the flow of execution through a program with multiple functions.
Read the following code and answer the questions:
</p>

<program xml:id="functions-testing_exercises-1" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-1.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-2" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-2.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-3" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-3.cpp" parse="text"/>
</program>

<ol>
<li><p>Write the number 1 next to the first line of code in this program that will execute.</p></li>
<li><p>Write the number 2 next to the second line of code, and so on until the end of the program.
If a line is executed more than once, it might end up with more than one number next to it.</p></li>
<li><p>What is the value of the parameter <c>blimp</c> when <c>baffle</c> gets invoked?</p></li>
<li><p>What is the output of this program?</p></li>
</ol>
</statement>
</exercise>

<exercise>
<statement>
<p>
Answer the following questions without running the program on a computer.
<ol>
<li><p>Draw a stack diagram that shows the state of the program the first time <c>ping</c> is invoked.</p></li>
<li><p>What is output by the following program?
Be precise about the placement of spaces and newlines.</p></li>
</ol>

</p>

<program xml:id="functions-testing_exercises-4" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-4.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-5" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-5.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-6" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-6.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-7" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-7.cpp" parse="text"/>
</program>

</statement>
</exercise>

<exercise>
<statement>
<p>
If you have a question about whether something is legal, and what happens if it is not, a good way to find out is to ask the compiler.
Answer the following questions by trying them out.
<ol>
<li><p>What happens if you invoke a value function and don't do anything with the result; that is, if you don't assign it to a variable or use it as part of a larger expression?</p></li>
<li><p>What happens if you use a void function as part of an expression?
For example, try <c>System.out.println("boo!") + 7;</c>.</p></li>
</ol>

</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Draw a stack diagram that shows the state of the program the <term>second</term> time <c>zoop</c> is invoked.
What is the complete output?
</p>

<program xml:id="functions-testing_exercises-8" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-8.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-9" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-9.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-10" interactive="activecode">
<xi:include href="../programs/functions-testing_exercises-10.cpp" parse="text"/>
</program>
  
<program xml:id="functions-testing_exercises-11">
<xi:include href="../programs/functions-testing_exercises-11.cpp" parse="text"/>
</program>

</statement>
</exercise>

<exercise>
<statement>
<p>
Many computations can be expressed more concisely using the <q>multadd</q> operation, which takes three operands and computes <c>a * b + c</c>.
Some processors even provide a hardware implementation of this operation for floating-point numbers.
<ol>
<li><p>Create a new program called <term>Multadd.java</term>.</p></li>
<li><p>Write a function called <c>multadd</c> that takes three <c>doubles</c> as parameters and returns <c>a * b + c</c>.</p></li>
<li><p>Write a <c>main</c> function that tests <c>multadd</c> by invoking it with a few simple parameters, like <c>1.0, 2.0, 3.0</c>.</p></li>
<li><p>Also in <c>main</c>, use <c>multadd</c> to compute the following values:
<md>
  <mrow>  \amp  \sin \frac{\pi}{4} + \frac{\cos \frac{\pi}{4}}{2} \amp</mrow>
  <mrow>  \amp  \log 10 + \log 20 \amp</mrow>
</md></p></li>
<li><p>Write a function called <c>expSum</c> that takes a double as a parameter and uses <c>multadd</c> to calculate:
<md>
  <mrow>  x e^{-x} + \sqrt{1 - e^{-x}}</mrow>
</md>
<term>Hint:</term> The function for raising <m>e</m> to a power is <c>Math.exp</c>.</p></li>
</ol>
</p>

<p>
In the last part of this exercise, you need to write a function that invokes another function you wrote.
Whenever you do that, it is a good idea to test the first function carefully before working on the second.
Otherwise, you might find yourself debugging two functions at the same time, which can be difficult.
</p>

<p>
One of the purposes of this exercise is to practice pattern-matching: the ability to recognize a specific problem as an instance of a general category of problems.
</p>
</statement>
</exercise>
</section>
