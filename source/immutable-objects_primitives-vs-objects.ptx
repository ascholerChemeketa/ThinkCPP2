<section xml:id="immutable-objects_primitives-vs-objects">
<title>Primitives vs Objects</title>
<p>
<idx><h>primitive</h></idx>
Not everything in Java is an object: <c>int</c>, <c>double</c>, <c>char</c>, and <c>boolean</c> are <em>primitive</em> types.
When you declare a variable with a primitive type, Java reserves a small amount of memory to store its value.
<xref ref="fig_mem1">Figure</xref> shows how the following values are stored in memory:
</p>

<program>
int number = -2;
char symbol = '!';
</program>
  <figure xml:id="fig_mem1" >
<caption>Memory diagram of two primitive variables.</caption>
<image width="73%" source="images/mem1.png" />
</figure>
<p>
<idx><h>memory diagram</h></idx>
<idx><h>diagram</h><h>memory</h></idx>
As you learned in <xref ref="elements">Section</xref>, an array variable stores a <em>reference</em> to an array.
For example, the following line declares a variable named <c>array</c> and creates an array of three characters:
</p>

<program>
char[] array = {'c', 'a', 't'};
</program>

<p>
<xref ref="fig_mem2">Figure</xref> shows them both, with a box to represent the location of the variable and an arrow pointing to the location of the array.
</p>
<figure xml:id="fig_mem2" >
<caption>Memory diagram of an array of characters.</caption>
<image width="73%" source="images/mem2.png" />
</figure>
<p>
Objects work in a similar way.
For example, this line declares a <c>String</c> variable named <c>word</c> and creates a <c>String</c> object, as shown in <xref ref="fig_mem3">Figure</xref>:
</p>

<program>
String word = "dog";
</program>
  <figure xml:id="fig_mem3" >
<caption>Memory diagram of a <c>String</c> object.</caption>
<image width="73%" source="images/mem3.png" />
</figure>
<p>
Objects and arrays are usually created with the <c>new</c> keyword, which allocates memory for them.
For convenience, you don't have to use <c>new</c> to create strings:
</p>

<program>
String word1 = new String("dog");  // creates a string object
String word2 = "dog";   // implicitly creates a string object
</program>

<p>
<idx><h>string</h><h>comparing</h></idx>
Recall from <xref ref="strcmp">Section</xref> that you need to use the <c>equals</c> method to compare strings.
The <c>equals</c> method traverses the <c>String</c> objects and tests whether they contain the same characters.
</p>

<p>
To test whether two integers or other primitive types are equal, you can simply use the <c>==</c> operator.
But two <c>String</c> objects with the same characters would not be considered equal in the <c>==</c> sense.
The <c>==</c> operator, when applied to string variables, tests only whether they refer to the <em>same</em> object.
</p>
</section>
