<section xml:id="vector-references_references"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>References</title>

  <p>
    <idx>
      <h>reference</h>
    </idx> 
    <idx>
      <h>&amp; (reference)</h>
    </idx>References are a powerful and potentially confusing concept. Normally, each variable is a name for its own storage. Given this code:</p>

  <program xml:id="vector-references_references-1">
<xi:include href="../../programs/vector-references/references-1.cpp" parse="text"/>
</program>

    <p>There are two storage locations, each with its own name. The second line of main make a new storage area with the name `b` and copies the value `a` has to it. When reading that code, you should picture a memory diagram that looks like this:</p>

    <figure>
    <caption>Memory diagram of `a` and `b` that each hold 5.</caption>
    <image width="25%"
           source="images/references-1.svg"/>
  </figure>

  <p>Changing the value in the storage named by `b` does not change the value stored in `a`. This is how things usually work in C++. A reference changes this. A reference does not name its own storage, instead a reference always <q>points</q> to some other storage. We declare a variable to be a reference by adding `&amp;` to the data type, like `int&amp; b;`. The `&amp;` change the type of `b <mdash/>it no longer is an <q>int</q>, it is a <q>reference to an int</q>.</p>

  <insight><p>When trying to pronounce complex looking data types in C++ it sometimes helps to read the backwards. `int&amp; b;` can be read as <q>b is a reference to an integer</q>.</p></insight>

  <p>A memory diagram for `int&amp; b = a;` should look like:</p>

    <figure>
    <caption>Memory diagram of `a` that holds 5 and `b` that is a reference to `a`.</caption>
    <image width="25%"
           source="images/references-2.svg"/>
  </figure>

  <p>`b` is an <term>alias</term> for `a` - it is another way to name the exact same storage that `a` names. If we change `b`, we change that value. Run this Codelens sample to see its animation of the situation:</p>

  <program xml:id="vector-references_references-2" interactive="codelens">
<xi:include href="../../programs/vector-references/references-2.cpp" parse="text"/>
</program>

  <p>You can change either `a` or `b` and both variables <q>see</q> the new value.</p>

  <note><p>The formal name in C++ for variables that name their own storage is an <term>l-value</term> (location). A reference is an <term>r-value</term> (reference). It is also possible to have an <term>r-value reference</term> using the symbol `&amp;&amp;`.</p>
  <p>Those terms and the concept of an r-value reference are beyond the scope of this book.</p></note>
</section>