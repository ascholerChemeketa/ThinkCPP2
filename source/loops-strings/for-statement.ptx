<section xml:id="loops-strings_for-statement" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The for Statement</title>
<p>
    <idx><h>for</h></idx>
    <idx><h>loop</h><h>for</h></idx>
    <idx><h>statement</h><h>for</h></idx>
The loops we have written so far have three parts in common.
They start by initializing a variable, they have a condition that depends on that variable, and they do something inside the loop to update that variable.
</p>

<p>
    <idx><h>iteration</h></idx>
Running the same code multiple times is called <term>iteration</term>.
It's so common that there is another statement, the <c>for</c> loop, that expresses it more concisely.
For example, we can rewrite the 2-4-6-8 loop this way:
</p>

<program xml:id="loops-strings_for-statement-1">
<xi:include href="../../programs/loops-strings/for-statement-1.cpp" parse="text"/>
</program>

<p>
<c>for</c> loops have three components in parentheses, separated by semicolons: the initializer, the condition, and the update:
<ol>
<li><p>The <term>initializer</term> runs once at the very beginning of the loop.
It is equivalent to the line before the <c>while</c> statement.</p></li>
<li><p>The <term>condition</term> is checked each time through the loop.
If it is <c>false</c>, the loop ends.
Otherwise, the body of the loop is executed (again).</p></li>
<li><p>At the end of each iteration, the <term>update</term> runs, and we go back to step<nbsp/>2.</p></li>
</ol>
</p>

<p>
The <c>for</c> loop is often easier to read because it puts all the loop-related statements at the top of the loop.
Doing so allows you to focus on the statements inside the loop body.
<xref ref="fig_for">Figure</xref> illustrates <c>for</c> loops with a flowchart.
</p>
<figure xml:id="fig_for" >
<caption>Flow of execution for a <c>for</c> loop.</caption>
<image width="92.5%" source="images/for.png" />
</figure>
<p>
There is another difference between <c>for</c> loops and <c>while</c> loops: if you declare a variable in the initializer, it exists only <term>inside</term> the <c>for</c> loop.
For example:
</p>

<program xml:id="loops-strings_for-statement-2">
<xi:include href="../../programs/loops-strings/for-statement-2.cpp" parse="text"/>
</program>

<p>
The last line tries to display <c>n</c> (for no reason other than demonstration), but it won't work.
If you need to use a loop variable outside the loop, you have to declare it <term>outside</term> the loop, like this:
</p>

<program xml:id="loops-strings_for-statement-3">
<xi:include href="../../programs/loops-strings/for-statement-3.cpp" parse="text"/>
</program>

<p>
Notice that the <c>for</c> statement does not say <c>int n = 3</c>.
Rather, it simply initializes the existing variable <c>n</c>.
</p>
</section>
