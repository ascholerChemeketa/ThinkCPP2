<!-- TODO - move to strings and revise -->
<section xml:id="variables-operators_operators-for-strings"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Operators for Strings</title>
  <p>
    <idx>
      <h>string</h>
      <h>operator</h>
    </idx>
    <idx>
      <h>operator</h>
      <h>string</h>
    </idx> In general, you cannot perform mathematical operations on strings,
    even if the strings look like numbers. The following expressions are illegal: </p>

  <program xml:id="variables-operators_operators-for-strings-1">
<xi:include href="../../programs/variables-operators/operators-for-strings-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>concatenate</h>
    </idx>
    <idx>
      <h>addition</h>
      <h>string</h>
    </idx> The <c>+</c> operator works with strings, but it might not do what you
    expect. For strings, the <c>+</c> operator performs <term>concatenation</term>, which means
    joining end-to-end. So <c>"Hello, " + "World!"</c> yields the string <c>"Hello, World!"</c>. </p>

  <p>Likewise if you have a variable called <c>name</c> that has type <c>String</c>, the expression <c>"Hello, " + name</c>
    appends the value of <c>name</c> to the hello string, which creates a personalized greeting. </p>

  <p>Since addition is defined for both numbers and strings, Java performs automatic conversions
    you may not expect: </p>

  <program xml:id="variables-operators_operators-for-strings-2"
           interactive="activecode">
<xi:include href="../../programs/variables-operators/operators-for-strings-2.cpp" parse="text"/>
</program>

  <p>Java executes these operations from left to right. In the first line, <c>1 + 2</c> is <c>3</c>, and <c>3 + "Hello"</c>
    is <c>"3Hello"</c>. But in the second line, <c>"Hello" + 1</c> is <c>"Hello1"</c>, and <c>"Hello1" + 2</c> is <c>"Hello12"</c>. <idx>
      <h>order of operations</h>
    </idx>
    <idx>
      <h>precedence</h>
    </idx> When more than one operator appears in an expression, they are
    evaluated according to the <term>order of operations</term>. Generally speaking, Java evaluates
    operators from left to right (as you saw in the previous section). But for numeric operators,
    Java follows mathematical conventions: <ul>
      <li>
        <p>Multiplication and division take <q>precedence</q> over addition and subtraction, which
    means they happen first. So <c>1 + 2 * 3</c> yields 7, not 9, and <c>2 + 4 / 2</c> yields 4, not 3.</p>
      </li>
      <li>
        <p>If the operators have the same precedence, they are evaluated from left to right. So in
    the expression <c>minute * 100 / 60</c>, the multiplication happens first; if the value of <c>minute</c> is 59, we get <c>5900 / 60</c>,
    which yields 98. If these same operations had gone from right to left, the result would have
    been <c>59 * 1</c>, which is incorrect. <idx>
            <h>parentheses</h>
          </idx>
    <idx>
            <h>( ) parentheses</h>
          </idx></p>
      </li>
      <li>
        <p>Anytime you want to override the order of operations (or you are not sure what it is) you
    can use parentheses. Expressions in parentheses are evaluated first, so <c>(1 + 2) * 3</c> is 9. You can
    also use parentheses to make an expression easier to read, as in <c>(minute * 100) / 60</c>, even though it doesn't
    change the result.</p>
      </li>
    </ul>
  </p>

  <p>See the official Java tutorials for a complete table of operator precedence
    (<url href="https://thinkjava.org/operators"/>). If the order of operations is not obvious when looking
    at an expression, you can always add parentheses to make it more clear. But over time, you
    should internalize these kinds of details about the Java language. </p>
</section>