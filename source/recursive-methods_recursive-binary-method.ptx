<section xml:id="recursive-methods_recursive-binary-method">
<title>Recursive Binary Method</title>
<p>
Now, to display a number in binary, we can combine the algorithm from the previous section and the <q>count up</q> pattern from <xref ref="countup">Section</xref>.
</p>

<p>
Here is a recursive method that displays any positive integer in binary:
</p>

<program>
public static void displayBinary(int value) {
    if (value > 0) {
        displayBinary(value / 2);
        System.out.print(value % 2);
    }
}
</program>

<p>
If <c>value</c> is <c>0</c>, <c>displayBinary</c> does nothing (that's the base case).
If the argument is positive, the method divides it by 2 and calls <c>displayBinary</c> recursively.
When the recursive call returns, the method displays one digit of the result and returns (again).
<xref ref="fig_stack4">Figure</xref> illustrates this process.
</p>

<p>
<idx><h>stack diagram</h></idx>
<idx><h>diagram</h><h>stack</h></idx>
</p>
<figure xml:id="fig_stack4" >
<caption>Stack diagram for the <c>displayBinary</c> method.</caption>
<image width="92.5%" source="images/stack4.png" />
</figure>
<p>
The leftmost digit is near the bottom of the stack, so it gets displayed first.
The rightmost digit, near the top of the stack, gets displayed last.
After invoking <c>displayBinary</c>, we use <c>println</c> to complete the output:
</p>

<program>
displayBinary(23);      // output is 10111
System.out.println();
</program>

</section>
