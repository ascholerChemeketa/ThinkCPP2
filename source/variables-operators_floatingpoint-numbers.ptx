<section xml:id="variables-operators_floatingpoint-numbers">
<title>Floating-Point Numbers</title>
<p>
<idx><h>floating-point</h></idx>
<idx><h>double</h></idx>
<idx><h>type</h><h>double</h></idx>
A more general solution is to use <em>floating-point</em> numbers, which represent values with decimal places.
In Java, the default floating-point type is called <c>double</c>, which is short for <q>double-precision</q>.
You can create <c>double</c> variables and assign values to them the same way we did for the other types:
</p>

<program>
double pi;
pi = 3.14159;
</program>

<p>
<idx><h>division</h><h>floating-point</h></idx>
Java performs <em>floating-point division</em> when one or more operands are <c>double</c> values.
So we can solve the problem from the previous section:
</p>

<program>
double minute = 59.0;
System.out.print("Fraction of the hour that has passed: ");
System.out.println(minute / 60.0);
</program>

<p>
The output is shown here:
</p>

<console>
<output>
Fraction of the hour that has passed: 0.9833333333333333
</output>
</console>

<p>
Although floating-point numbers are useful, they can be a source of confusion.
For example, Java distinguishes the integer value <c>1</c> from the floating-point value <c>1.0</c>, even though they seem to be the same number.
They belong to different data types, and strictly speaking, you are not allowed to make assignments between types.
</p>

<p>
The following is illegal because the variable on the left is an <c>int</c> and the value on the right is a <c>double</c>:
</p>

<program>
int x = 1.1;  // compiler error
</program>

<p>
<idx><h>automatic conversion</h></idx>
It is easy to forget this rule, because in many cases Java <em>automatically</em> converts from one type to another:
</p>

<program>
double y = 1;  // legal, but bad style
</program>

<p>
The preceding example should be illegal, but Java allows it by converting the <c>int</c> value <c>1</c> to the <c>double</c> value <c>1.0</c> automatically.
This leniency is convenient, but it often causes problems for beginners.
For example:
</p>

<program>
double y = 1 / 3;  // common mistake
</program>

<p>
<idx><h>division</h><h>integer</h></idx>
<idx><h>integer division</h></idx>
You might expect the variable <c>y</c> to get the value <c>0.333333</c>, which is a legal floating-point value.
But instead it gets the value <c>0.0</c>.
The expression on the right divides two integers, so Java does integer division, which yields the <c>int</c> value <c>0</c>.
Converted to <c>double</c>, the value assigned to <c>y</c> is <c>0.0</c>.
</p>

<p>
One way to solve this problem (once you figure out the bug) is to make the right-hand side a floating-point expression.
The following sets <c>y</c> to <c>0.333333</c>, as expected:
</p>

<program>
double y = 1.0 / 3.0;  // correct
</program>

<p>
As a matter of style, you should always assign floating-point values to floating-point variables.
The compiler won't make you do it, but you never know when a simple mistake will come back and haunt you.
</p>
</section>
