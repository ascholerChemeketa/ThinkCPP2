<section xml:id="variables-operators_floatingpoint-numbers"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Floating-Point Numbers</title>
  <p>
    <idx>
      <h>floating-point</h>
    </idx>
    <idx>
      <h>double</h>
    </idx>
    <idx>
      <h>type</h>
      <h>double</h>
    </idx>So what do you do if you want to divide 45 by 60 and get 0.75? In C++, the answer is to use <term>floating-point</term> numbers,
    which represent values with decimal places. In C++, the default floating-point type is called <c>double</c>,
    which is short for <q>double-precision</q>. You can create <c>double</c> variables and assign values
    to them the same way we did for the other types: </p>

  <program xml:id="variables-operators_floatingpoint-numbers-1"
           interactive="activecode">
<xi:include href="../programs/variables-operators_floatingpoint-numbers-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>division</h>
      <h>floating-point</h>
    </idx> C++ performs <term>floating-point division</term> when one or
    more operands are <c>double</c> values. So we can solve the problem from the previous section: </p>

  <program xml:id="variables-operators_floatingpoint-numbers-2"
           interactive="activecode">
<xi:include href="../programs/variables-operators_floatingpoint-numbers-2.cpp" parse="text"/>
</program>

  <p> Although floating-point numbers are useful, they can be a source of confusion. For example,
    C++ distinguishes the integer value <c>60</c> from the floating-point value <c>60.0</c>, even though
    they seem to be the same number. They belong to different data types, and thus doing math with them can produce different results.</p>

  <p>Adding to the confusion is the fact that C++ will automatically <q/>upgrade<q/> an <c>int</c> to a <c>double</c> if you try to store a whole number value into a double variable. This is called <term>implicit conversion</term>. Even worse, if you print a value like 4.0, the unnecessary decimal portion is left off:</p>
    <idx>
      <h>implicit conversion</h>
    </idx></p>

  <program xml:id="variables-operators_floatingpoint-numbers-3"
           interactive="activecode">
<xi:include href="../programs/variables-operators_floatingpoint-numbers-3.cpp" parse="text"/>
  </program>

  <p>C++ can safely do the implicit conversions in that sample because any integer can be safely represent as a decimal value. The opposite is not true. There is no way to represent <c>3.14159</c> as a whole number without losing information. This code sample demonstrates what happens:</p>

  <program xml:id="variables-operators_floatingpoint-numbers-4"
           interactive="activecode">
<xi:include href="../programs/variables-operators_floatingpoint-numbers-4.cpp" parse="text"/>
  </program>

  <p>Turning a decimal number into an integer can be done by dropping the decimal part. But doing so does change the value you are representing. So the compiler warns that there may be an issue but then goes ahead and does the conversion.</p>

  <note><p>The C++ compiler can be told to treat possible errors like this in different ways. It can ignore them, it can issue warnings about them, or it can treat them as errors that prevent the code from being built. In this book you will get warnings. It is wise to treat any warnings as if they were errors even if the compiler is building the code and the program seems to work as you intend.</p></note>

  <p>If you do an operation with an <c>int</c> and a <c>double</c>, the <c>int</c> is automatically converted to a <c>double</c> before the operation is performed. But, this does not happen until there is a calculation that needs to be performed involving the double. So the order of operations can matter. For example, consider the following code:
  </p>

  <program xml:id="variables-operators_floatingpoint-numbers-5"
           interactive="activecode">
<xi:include href="../programs/variables-operators_floatingpoint-numbers-5.cpp" parse="text"/>
</program>

  <p>You might expect value to be 0.33333 times 3.14159. But the first step in evaluating the expression
  <c>1 / 3 * 3.14159</c> is dividing 1 by 3. Those are both integers, so C++ does whole number division and
  gets the result <c>0</c>. It does not matter that later the math involves a double, or that the result is
  stored into a double. At the point of the division, the math involves two integers, so the result is an integer.
  Then the 0 is multiplied by 3.14159. At this point the 0 is promoted to a double - 0.0 - but that is too
  late to help produce the result we would expect.</p>

  <p>One way to solve this problem (once you figure out the bug) is to make sure that if yu want a decimal
  answer, that you do math with decimal values. This code works as expected: </p>

  <program xml:id="variables-operators_floatingpoint-numbers-6"
           interactive="activecode">
<xi:include href="../programs/variables-operators_floatingpoint-numbers-6.cpp" parse="text"/>
  </program>
</section>