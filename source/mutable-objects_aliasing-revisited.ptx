<section xml:id="mutable-objects_aliasing-revisited" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Aliasing Revisited</title>
<p>
    <idx><h>reference</h></idx>
Remember that when you assign an object to a variable, you are assigning a <term>reference</term> to an object.
It is possible to have multiple variables that refer to the same object.
For example, this code creates two variables that refer to the same <c>Rectangle</c>:
</p>

<program xml:id="mutable-objects_aliasing-revisited-1">
<xi:include href="../programs/mutable-objects_aliasing-revisited-1.cpp" parse="text"/>
</program>

<p>
<xref ref="fig_aliasing">Figure</xref> shows the result: <c>box1</c> and <c>box2</c> refer to the same object, so any changes that affect one variable also affect the other.
</p>
<figure xml:id="fig_aliasing" >
<caption>Memory diagram showing two variables that refer to the same <c>Rectangle</c> object.</caption>
<image width="73%" source="external/images/aliasing.png" />
</figure>
<p>
For example, the following code uses <c>grow</c> to make <c>box1</c> bigger by 50 units in all directions.
It decreases <c>x</c> and <c>y</c> by 50, and it increases <c>height</c> and <c>width</c> by 100:
</p>

<program xml:id="mutable-objects_aliasing-revisited-2" interactive="activecode">
<xi:include href="../programs/mutable-objects_aliasing-revisited-2.cpp" parse="text"/>
</program>

<p>
The result is shown in <xref ref="fig_aliasing2">Figure</xref>.
</p>
<figure xml:id="fig_aliasing2" >
<caption>Memory diagram showing the effect of invoking <c>grow</c>.</caption>
<image width="73%" source="external/images/aliasing2.png" />
</figure>
<p>
Now, if we print <c>box1</c>, we are not surprised to see that it has changed:
</p>

<program xml:id="mutable-objects_aliasing-revisited-3" interactive="activecode">
<xi:include href="../programs/mutable-objects_aliasing-revisited-3.cpp" parse="text"/>
</program>

<p>
And if we print <c>box2</c>, we should not be surprised to see that it has changed too, because it refers to the same object:
</p>

<program xml:id="mutable-objects_aliasing-revisited-4" interactive="activecode">
<xi:include href="../programs/mutable-objects_aliasing-revisited-4.cpp" parse="text"/>
</program>

<p>
    <idx><h>aliasing</h></idx>
This scenario is called <q>aliasing</q> because a single object has multiple names, or aliases, that refer to it.
</p>

<p>
As you can tell from this simple example, code that involves aliasing can get confusing fast, and it can be difficult to debug.
</p>
</section>
