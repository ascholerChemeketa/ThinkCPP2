<section xml:id="reusing-classes_exercises" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Exercises</title>
<p>
The code for this chapter is in the <term>ch16</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>
<exercise label="reusing-classes_exercises-ex-1">
<statement>
<p>
The last section of this chapter introduced <pf>Automaton</pf> as an abstract class and rewrote <pf>Conway</pf> as a subclass of <pf>Automaton</pf>.
Now it's your turn: rewrite <pf>Langton</pf> as a subclass of <pf>Automaton</pf>, removing the code that's no longer needed.
</p>
</statement>
</exercise>

<exercise label="reusing-classes_exercises-ex-2">
<statement>
<p>
Mathematically speaking, Game of Life and Langton's Ant are <term>cellular automata</term>.
<q>Cellular</q> means it has cells, and <q>automaton</q> means it runs itself.
See <url href="https://en.wikipedia.org/wiki/Cellular_automaton"/> for more discussion.
</p>

<p>
Implement another cellular automaton of your choice.
You may have to modify <pf>Cell</pf> and/or <pf>GridCanvas</pf>, in addition to extending <pf>Automaton</pf>.
For example, Brian's Brain (<url href="https://en.wikipedia.org/wiki/Brian's_Brain"/>) requires three states: <q>on</q>, <q>dying</q>, and <q>off</q>.
</p>
</statement>
</exercise>
</section>
