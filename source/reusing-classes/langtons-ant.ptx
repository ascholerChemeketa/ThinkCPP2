<section xml:id="reusing-classes_langtons-ant" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Langton's Ant</title>
<p>
We begin by defining a <pf>Langton</pf> class that has a grid and information about the ant.
The constructor takes the grid dimensions as parameters:
</p>

<program xml:id="reusing-classes_langtons-ant-1">
<xi:include href="../../programs/reusing-classes/langtons-ant-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>state</h></idx>
<pf>grid</pf> is a <pf>GridCanvas</pf> object, which represents the state of the cells.
<pf>xpos</pf> and <pf>ypos</pf> are the coordinates of the ant, and <pf>head</pf> is the <q>heading</q> of the ant; that is, which direction it is facing.
<pf>head</pf> is an integer with four possible values, where <pf>0</pf> means the ant is facing <q>north</q> (i.e., toward the top of the screen), <pf>1</pf> means <q>east</q>, etc.
</p>

<p>
Here's an <pf>update</pf> function that implements the rules for Langton's Ant:
</p>

<program xml:id="reusing-classes_langtons-ant-2">
<xi:include href="../../programs/reusing-classes/langtons-ant-2.cpp" parse="text"/>
</program>

<p>
The <pf>flipCell</pf> function gets the <pf>Cell</pf> at the ant's location, figures out which way to turn, and changes the state of the cell:
</p>

<program xml:id="reusing-classes_langtons-ant-3">
<xi:include href="../../programs/reusing-classes/langtons-ant-3.cpp" parse="text"/>
</program>

<p>
We use the remainder operator, <pf>%</pf>, to make <pf>head</pf> wrap around: if <pf>head</pf> is 3 and we turn right, it wraps around to 0; if <pf>head</pf> is 0 and we turn left, it wraps around to 3.
</p>

<p>
Notice that to turn right, we add 1 to <pf>head</pf>.
To turn left, we could subtract 1, but <pf>-1 % 4</pf> is <pf>-1</pf> in Java.
So we add 3 instead, since one left turn is the same as three right turns.
</p>

<p>
The <pf>moveAnt</pf> function moves the ant forward one square, using <pf>head</pf> to determine which way is forward:
</p>

<program xml:id="reusing-classes_langtons-ant-4">
<xi:include href="../../programs/reusing-classes/langtons-ant-4.cpp" parse="text"/>
</program>

<p>
Here is the <pf>main</pf> function we use to create and display the <pf>Langton</pf> object:
</p>

<program xml:id="reusing-classes_langtons-ant-5" interactive="activecode">
<xi:include href="../../programs/reusing-classes/langtons-ant-5.cpp" parse="text"/>
</program>

<p>
Most of this code is the same as the <pf>main</pf> we used to create and run <pf>Conway</pf>, in <xref ref="conwaymain">Section</xref>.
It creates and configures a <pf>JFrame</pf> and runs <pf>mainloop</pf>.
</p>

<p>
And that's everything!
If you run this code with a grid size of \mbox{61 x 61} or larger, you will see the ant eventually settle into a repeating pattern.
</p>

<p>
Because we designed <pf>Cell</pf> and <pf>GridCanvas</pf> to be reusable, we didn't have to modify them at all.
However, we now have two copies of <pf>main</pf> and <pf>mainloop</pf><mdash/>one in <pf>Conway</pf>, and one in <pf>Langton</pf>.
</p>
</section>
