<section xml:id="multidimensional-vectors_references"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Multidimensional Vector Rows and Elements</title>

  <p>You may have noticed that the previous page described `table.at(0)` as returning a reference to the first row of the table. The actual prototype for `.at()` looks something like:</p>

  <program><![CDATA[
  T& vector<T>::at(size_t index);
  ]]></program>

  <p>Recall that `T` is a placeholder for the type of data in the vector. If it is a vector of `int`, the return type would be `int&amp;`. This means the function does not return a new integer, it returns a reference to an integer that already exists. Returning a reference from ordinary functions doesn't usually make sense. All the local variables in a function are destroyed when the function returns. So if we return a reference to one of those local variables, it will be a reference to a variable that no longer exists. This is not the case with member functions for things like a vector or a string. The contents of the vector or string will continue to exist after `at()` has done its work.</p>

  <p>Returning the reference is what allows the caller to use `.at()` to modify data. But we need to be careful to use the reference and not make a copy of the data it refers to. For example, if we do this:</p>

  <program>
  int x = table.at(0).at(1);
  x = 5; // no change to table
  </program>

  <p>We are copying the value found by `table.at(0).at(1)` into `x`. Modifying `x` would have no effect on the table. To store the result of `table.at(0).at(1)` and use it as a reference we would need to store the result into an `int&amp;`. Doing so allows us to use that variable as an alias for the element in the table:</p>

  <program>
  int x = table.at(0).at(1);
  x = 5; // no change to table
  int&amp; row0col1 = table.at(0).at(1);
  row0col1 = 3; // changes table
  </program>

  <figure>
    <caption>Memory diagram for `table`, `x`, and `row0col1`.</caption>
    <image width="45%"
           source="images/vectors-table-reference.svg"/>
  </figure>

  <p>If we wanted to store a reference to an entire row, it would be as a reference to a vector of integers:</p>

  <program>
  vector&lt;int>&amp; row0 = table.at(0);
  cout &lt;&lt; row0.size();  // prints 5
  </program>

  <p>To avoid having to worry about making reference variables, we will favor always specifying the row or element we want to talk about, even if it means saying something like `table.at(0).at(1)` multiple times in a row. But if you choose to try to make a variable that stores <q>the current row</q> or <q>the element at 0, 1</q>, make sure to store it as a reference unless your goal is to copy the data.</p>


  <note><p>There is no way to ask `table` for a column of data. If we wanted a column of data, we would have to build it up ourselves by making a new vector, looping through each row to access the data at the column's index, and add that value to the new vector.</p></note>


</section>