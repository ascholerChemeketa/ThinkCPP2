<section xml:id="multidimensional-vectors_traversals"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Multidimensional Vector Traversals</title>

<introduction>
  <p>When traversing a two dimensional structure, we typically work in <term>row major order</term> or <term>column major order</term>. These terms refer to whether our first loop is processing rows or if it is processing columns.</p>
</introduction>

<subsection>
  <title>A first attempt</title>
  <p>Range-based loops feel like a natural way to traverse a two-dimensional vector. The outer vector is what we consider to be the rows, so we can loop over those and for each one, loop over its elements. Say I want to print a table of numbers in its natural structure. I would want to do something like:</p>

  <program><![CDATA[
  for each row in table {
    for each element in row {
        print element
    }
    end line
  }
  ]]></program>

  <p>In C++, that will look like this:</p>

  <program label="multidimensional-vectors_traversals-program-1" interactive="activecode">
<xi:include href="../../programs/multidimensional-vectors/traversals-1.cpp" parse="text"/>
  </program>

  <p>Notice the type used for the first loop variable: <pf>const vector&lt;int>&amp; row</pf>. <pf>row</pf> is storing each element of <pf>matrix</pf> one at a time. And what matrix stores are <pf>vector&lt;int></pf>s. But we don't want to copy those vectors into the variable row. That would be a waste of time. So we make <pf>row</pf> be a const reference to the current element. If we changed like 15 to read <pf>for (vector&lt;int> row : matrix)</pf>, the code would work, but it would be making copies of each row.</p>

  <p>Although this works, the row reference feels a little clumsy. More importantly, there is no way to modify it to traverse in column major order.</p>
  
</subsection>

<subsection>
<title>A better traversal</title>

  <p>Our preferred way of looping over multidimensional arrays will be to use counting loops. For a row major traversal, our outer loop is based on the size of the top-level array - the number of rows. The inner loop is based on the number of columns, which is the length of one of the rows (assuming they all have the same length).</p>

  <program label="multidimensional-vectors_traversals-program-2" interactive="activecode">
<xi:include href="../../programs/multidimensional-vectors/traversals-2.cpp" parse="text"/>
  </program>

  <p>Because the inner loop (columns) runs completely with each step of the outer loop (rows), line 24 ends accessing the elements of the matrix in this order:</p>

<pre>matrix.at(0).at(0)  (start of first row)
matrix.at(0).at(1)
matrix.at(0).at(2)
matrix.at(0).at(3)  (done with inner loop)
matrix.at(1).at(0)  (start of new row)
matrix.at(1).at(1)
matrix.at(1).at(2)
matrix.at(1).at(3)  (done with inner loop)
matrix.at(2).at(0)  (start of new row)
...
</pre>

  <p>This version is more flexible than the range-based approach. By switching the order of the two loops, we can iterate in column major order. Doing so will print out each column on a separate line of output:</p>

  <program label="multidimensional-vectors_traversals-program-3" interactive="activecode">
<xi:include href="../../programs/multidimensional-vectors/traversals-3.cpp" parse="text"/>
  </program>

  <p>Note that all that is different about this version is that lines 21 and 23 (and the comments above them) have swapped places. We still specify the row first when accessing the matrix using <pf>matrix.at(row).at(col)</pf>. But, since we count through all the possible rows before changing the column, we end up accessing elements in this order:</p>

<pre>matrix.at(0).at(0)  (start of first col)
matrix.at(1).at(0)
matrix.at(2).at(0)  (done with inner loop)
matrix.at(0).at(1)  (start of new col)
matrix.at(1).at(1)
matrix.at(2).at(1)  (done with inner loop)
matrix.at(0).at(2)  (start of new col)
...
</pre>

  <warning>
    <p>The row index always goes in the first <pf>.at()</pf> and the column index always goes in the second <pf>.at()</pf>. Even if you are traversing in column major order.</p>
    <p>These samples intentionally use <pf>row</pf> and <pf>col</pf> as the counters instead of <pf>i</pf> and <pf>j</pf> to make this clear. Although many programmers will use <pf>i</pf> and <pf>j</pf> here, you are encouraged to use meaningful names to help keep track of which counter is for rows and which is for columns.</p>
  </warning>
</subsection>

</section>