<section xml:id="mutable-objects_exercises">
<title>Exercises</title>
<p>
The code for this chapter is in the <em>ch10</em> directory of <em>ThinkJavaCode2</em>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>

<p>
At this point, you know enough to read <xref ref="graphics">Appendix</xref>, which is about simple 2D graphics and animations.
During the next few chapters, you should take a detour to read this appendix and work through the exercises.
</p>
<exercise>
<statement>
<p>
The point of this exercise is to make sure you understand the mechanism for passing objects as parameters.
<ol>
<li><p>For the following program, draw a stack diagram showing the local variables and parameters of <c>main</c> and <c>riddle</c> just before <c>riddle</c> returns.
Use arrows to show which objects each variable references.</p></li>
<li><p>What is the output of the program?</p></li>
<li><p>Is the <c>blank</c> object mutable or immutable?
How can you tell?</p></li>
</ol>

</p>

<program>
public static int riddle(int x, Point p) {
    x = x + 7;
    return x + p.x + p.y;
}
</program>
  
<program>
public static void main(String[] args) {
    int x = 5;
    Point blank = new Point(1, 2);

    System.out.println(riddle(x, blank));
    System.out.println(x);
    System.out.println(blank.x);
    System.out.println(blank.y);
}
</program>

</statement>
</exercise>

<exercise>
<statement>
<p>
The point of this exercise is to make sure you understand the mechanism for returning new objects from methods.
The following code uses <c>findCenter</c> and <c>distance</c> as defined in this chapter.
<ol>
<li><p>Draw a stack diagram showing the state of the program just before <c>findCenter</c> returns.
Include all variables and parameters, and show the objects those variables refer to.</p></li>
<li><p>Draw a stack diagram showing the state of the program just before <c>distance</c> returns.
Show all variables, parameters, and objects.</p></li>
<li><p>What is the output of this program?
(Can you tell without running it?)</p></li>
</ol>

</p>

<program>
public static void main(String[] args) {
    Point blank = new Point(5, 8);

    Rectangle rect = new Rectangle(0, 2, 4, 4);
    Point center = findCenter(rect);

    double dist = distance(center, blank);
    System.out.println(dist);
}
</program>

</statement>
</exercise>

<exercise>
<statement>
<p>
This exercise is about aliasing.
Recall that aliases are two variables that refer to the same object.
The following code uses <c>findCenter</c> and <c>printPoint</c> as defined in this chapter.
<ol>
<li><p>Draw a diagram that shows the state of the program just before the end of <c>main</c>.
Include all local variables and the objects they refer to.</p></li>
<li><p>What is the output of the program?</p></li>
<li><p>At the end of <c>main</c>, are <c>p1</c> and <c>p2</c> aliased?
Why or why not?</p></li>
</ol>

</p>

<program>
public static void main(String[] args) {
    Rectangle box1 = new Rectangle(2, 4, 7, 9);
    Point p1 = findCenter(box1);
    printPoint(p1);

    box1.grow(1, 1);
    Point p2 = findCenter(box1);
    printPoint(p2);
}
</program>

</statement>
</exercise>
</section>
