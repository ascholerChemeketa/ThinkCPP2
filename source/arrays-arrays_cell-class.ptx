<section xml:id="arrays-arrays_cell-class" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The Cell Class</title>
<p>
When drawing a cell, we'll need to know its location on the screen and size in pixels.
To represent the location, we use the <c>x</c> and <c>y</c> coordinates of the upper-left corner.
And to represent the size, we use an integer, <c>size</c>.
</p>

<p>
    <idx><h>state</h></idx>
To represent the state of a cell, we use an integer, <c>state</c>, which is <c>0</c> for dead cells and <c>1</c> for live cells.
We could use a <c>boolean</c> instead, but it's good practice to design classes to be reusable (e.g., for other games that have more states).
</p>

<p>
Here is a <c>Cell</c> class that declares these instance variables:
</p>

<program xml:id="arrays-arrays_cell-class-1">
<xi:include href="../programs/arrays-arrays_cell-class-1.cpp" parse="text"/>
</program>

<p>
Notice that <c>x</c>, <c>y</c>, and <c>size</c> are constants.
Once the cell is created, we don't want it to move or change size.
But <c>state</c> can and should change, so it is not a constant.
</p>

<p>
The next step is to write a constructor.
Here's one that takes <c>x</c>, <c>y</c>, and <c>size</c> as parameters, and sets <c>state</c> to a default value:
</p>

<program xml:id="arrays-arrays_cell-class-2">
<xi:include href="../programs/arrays-arrays_cell-class-2.cpp" parse="text"/>
</program>

<p>
The following function draws a cell.
Like the <c>paint</c> function in <xref ref="graphics">Appendix</xref>, it takes a graphics context as a parameter:
</p>

<program xml:id="arrays-arrays_cell-class-3">
<xi:include href="../programs/arrays-arrays_cell-class-3.cpp" parse="text"/>
</program>

<p>
The <c>draw</c> function uses the state of the cell to select a color from an array of <c>Color</c> objects.
Then it uses to <c>fillRect</c> to draw the center of the cell and <c>drawRect</c> to draw a light-gray border.
</p>

<p>
We also need functions to get and set the cell's state.
We could just provide <c>getState</c> and <c>setState</c>, but the code will be more readable if we provide functions customized for the Game of Life:
</p>

<program xml:id="arrays-arrays_cell-class-4">
<xi:include href="../programs/arrays-arrays_cell-class-4.cpp" parse="text"/>
</program>

</section>
