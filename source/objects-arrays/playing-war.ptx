<section xml:id="objects-arrays_playing-war" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Playing War</title>
<p>
Now we can use <pf>Deck</pf> and <pf>Pile</pf> to implement the game.
We'll start by creating a deck and shuffling:
</p>

<listing>
<program label="objects-arrays_playing-war-program-1" interactive="activecode">
<xi:include href="../../programs/objects-arrays/playing-war-1.cpp" parse="text"/>
</program>
</listing>

<p>
Then we divide the <pf>Deck</pf> into two piles:
</p>

<listing>
<program label="objects-arrays_playing-war-program-2" interactive="activecode">
<xi:include href="../../programs/objects-arrays/playing-war-2.cpp" parse="text"/>
</program>
</listing>

<p>
The game itself is a loop that repeats until one of the piles is empty.
At each iteration, we draw a card from each pile and compare their ranks:
</p>

<listing>
<program label="objects-arrays_playing-war-program-3" interactive="activecode">
<xi:include href="../../programs/objects-arrays/playing-war-3.cpp" parse="text"/>
</program>
</listing>

<p>
If the two cards have the same rank, it's a tie.
In that case, each player draws four more cards.
Whoever has the higher fourth card takes all cards in play.
If there's another tie, they draw another four cards, and so on.
</p>

<p>
One of the exercises at the end of this chapter asks you to implement the <pf>else</pf> block when there's a tie.
</p>

<p>
After the <pf>while</pf> loop ends, we display the winner based on which pile is not empty:
</p>

<listing>
<program label="objects-arrays_playing-war-program-4" interactive="activecode">
<xi:include href="../../programs/objects-arrays/playing-war-4.cpp" parse="text"/>
</program>
</listing>

<p>
<pf>ArrayList</pf> provides many other functions that we didn't use for this example.
Take a minute to read the documentation, which you can find by doing a web search for <q>Java ArrayList</q>.
</p>
</section>
