<section xml:id="objects-arrays_merge-sort" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Merge Sort</title>
<p>
    <idx><h>efficiency</h></idx>
Selection sort is a simple algorithm, but it is not very efficient.
To sort <m>n</m> items, it has to traverse the array <m>n-1</m> times.
Each traversal takes an amount of time proportional to <m>n</m>.
The total time, therefore, is proportional to <m>n^2</m>.
</p>

<p>
    <idx><h>merge sort</h></idx>
    <idx><h>sort</h><h>merge</h></idx>
We will develop a more efficient algorithm called <term>merge sort</term>.
To sort <m>n</m> items, merge sort takes time proportional to <m>n \log_2 n</m>.
That may not seem impressive, but as <m>n</m> gets big, the difference between <m>n^2</m> and <m>n \log_2 n</m> can be enormous.
</p>

<p>
For example, <m>\log_2</m> of one million is around 20.
So if you had to sort a million numbers, merge sort would require 20 million steps.
But selection sort would require one trillion steps!
</p>

<p>
The idea behind merge sort is this: if you have two decks, each of which has already been sorted, you can quickly merge them into a single, sorted deck.
Try this out with a deck of cards:
<ol>
<li><p>Form two decks with about 10 cards each, and sort them so they are face up with the lowest cards on top.
Place the decks in front of you.</p></li>
<li><p>Compare the top card from each deck and choose the lower one.
Flip it over and add it to the merged deck.</p></li>
<li><p>Repeat step 2 until one of the decks is empty.
Then take the remaining cards and add them to the merged deck.</p></li>
</ol>
</p>

<p>
The result should be a single sorted deck.
In the next few sections, we'll explain how to implement this algorithm in Java.
</p>
</section>
