<section xml:id="objects-arrays_merging-decks" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Merging Decks</title>
<p>
    <idx><h>merge</h></idx>
The next helper function we need is <pf>merge</pf>, which takes two sorted subdecks and returns a new deck containing all cards from both decks, in order.
Here's what the algorithm looks like in pseudocode, assuming the subdecks are named <pf>d1</pf> and <pf>d2</pf>:
</p>

<program xml:id="objects-arrays_merging-decks-1" interactive="activecode">
<xi:include href="../../programs/objects-arrays/merging-decks-1.cpp" parse="text"/>
</program>

<p>
An exercise at the end of the chapter asks you to implement <pf>merge</pf>.
It's a little tricky, so be sure to test it with different subdecks.
Once your <pf>merge</pf> function is working, you can use it to write a simplified version of merge sort:
</p>

<program xml:id="objects-arrays_merging-decks-2" interactive="activecode">
<xi:include href="../../programs/objects-arrays/merging-decks-2.cpp" parse="text"/>
</program>

<p>
If you have working versions of <pf>subdeck</pf>, <pf>selectionSort</pf>, and <pf>merge</pf>, you should have no trouble getting this function working.
But it is still not very efficient, because it uses <pf>selectionSort</pf> to sort the subdecks.
We can make it more efficient if we use <pf>mergeSort</pf> instead, but that means we have to make it recursive!
</p>
</section>
