<section xml:id="objects-arrays_exercises" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Exercises</title>
<p>
The code for this chapter is in the <term>ch13</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>
<exercise label="objects-arrays_exercises-ex-1">
<statement>
<p>
Write a <pf>toString</pf> function for the <pf>Deck</pf> class.
It should return a single string that represents the cards in the deck.
When it's printed, this string should display the same results as the <pf>print</pf> function in <xref ref="deck">Section</xref>.
</p>

<p>
    <idx><h>StringBuilder</h></idx>
    <idx><h>efficiency</h></idx>
<term>Hint:</term> You can use the <pf>+</pf> operator to concatenate strings, but that is not very efficient.
Consider using <pf>StringBuilder</pf> instead; see <xref ref="stringbuilder">Section</xref>.
</p>
</statement>
</exercise>

<exercise label="objects-arrays_exercises-ex-2" xml:id="ex_shuffle">
<statement>
<p>
The goal of this exercise is to implement the shuffling algorithm from this chapter.
<ol>
<li><p>In the repository for this book, you should find the file named <term>Deck.java</term>.
Check that you can compile it in your environment.</p></li>
<li><p>Implement the <pf>randomInt</pf> function.
You can use the <pf>nextInt</pf> function provided by <pf>java.util.Random</pf>, which you saw in <xref ref="random">Section</xref>.

<term>Hint:</term> To avoid creating a <pf>Random</pf> object every time <pf>randomInt</pf> is invoked, consider defining a class variable.</p></li>
<li><p>Write a <pf>swapCards</pf> function that takes two indexes and swaps the cards at the given locations.</p></li>
<li><p>Fill in the <pf>shuffle</pf> function by using the algorithm in <xref ref="shuffle">Section</xref>.</p></li>
</ol>

</p>
</statement>
</exercise>

<exercise label="objects-arrays_exercises-ex-3">
<statement>
<p>
The goal of this exercise is to implement the sorting algorithms from this chapter.
Use the <term>Deck.java</term> file from the previous exercise or create a new one from scratch.
<ol>
<li><p>Implement the <pf>indexLowest</pf> function.
Use the <pf>Card.compareTo</pf> function to find the lowest card in a given range of the deck, from <pf>lowIndex</pf> to <pf>highIndex</pf>, including both.</p></li>
<li><p>Fill in <pf>selectionSort</pf> by using the algorithm in <xref ref="sorting">Section</xref>.</p></li>
<li><p>Using the pseudocode in <xref ref="mergesort">Section</xref>, implement the <pf>merge</pf> function.
The best way to test it is to build and shuffle a deck.
Then use <pf>subdeck</pf> to form two small subdecks, and use selection sort to sort them.
Finally, pass the two halves to <pf>merge</pf> and see if it works.
    <idx><h>testing</h></idx></p></li>
<li><p>Fill in <pf>almostMergeSort</pf>, which divides the deck in half, then uses <pf>selectionSort</pf> to sort the two halves, and uses <pf>merge</pf> to create a new, sorted deck.
You should be able to reuse code from the previous step.</p></li>
<li><p>Implement <pf>mergeSort</pf> recursively.
Remember that <pf>selectionSort</pf> is <pf>void</pf> and <pf>mergeSort</pf> returns a new <pf>Deck</pf>, which means that they get invoked differently:


<program xml:id="objects-arrays_exercises-1" interactive="activecode">
<xi:include href="../../programs/objects-arrays/exercises-1.cpp" parse="text"/>
</program>
</p></li>
</ol>

</p>
</statement>
</exercise>

<exercise label="objects-arrays_exercises-ex-4">
<statement>
<p>
You can learn more about the sorting algorithms presented in this chapter at <url href="https://www.toptal.com/developers/sorting-algorithms"/>.
This site provides explanations of the algorithms, along with animations that show how they work.
It also includes an analysis of their efficiency.
</p>

<p>
For example, <q>insertion sort</q> is an algorithm that inserts elements into place, one at a time.
Read about it on the website and play the animations.
Then write a function named <pf>insertionSort</pf> that implements this algorithm.
</p>

<p>
One goal of this exercise is to practice top-down design.
Your solution should use a helper function, named <pf>insert</pf>, that implements the inner loop of the algorithm.
<pf>insertionSort</pf> should invoke this function <m>n-1</m> times.
</p>
</statement>
</exercise>

<exercise label="objects-arrays_exercises-ex-5">
<statement>
<p>
Find and open the file <term>War.java</term> in the repository.
The <pf>main</pf> function contains all the code from the last section of this chapter.
Check that you can compile and run this code before proceeding.
</p>

<p>
The program is incomplete; it does not handle the case when two cards have the same rank.
Finish implementing the <pf>main</pf> function, beginning at the line that says: <pf>// it's a tie</pf>.
</p>

<p>
When there's a tie, draw three cards from each pile and store them in a collection, along with the original two.
Then draw one more card from each pile and compare them.
Whoever wins the tie takes all ten of these cards.
</p>

<p>
If one pile does not have at least four cards, the game ends immediately.
If a tie ends with a tie, draw three more cards, and so on.
</p>

<p>
Notice that this program depends on <pf>Deck.shuffle</pf>, so you might have to do <xref ref="ex_shuffle">Exercise</xref> first.
</p>
</statement>
</exercise>
</section>
