<section xml:id="objects-arrays_selection-sort" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Selection Sort</title>
<p>
    <idx><h>selection sort</h></idx>
    <idx><h>sort</h><h>selection</h></idx>
Now that we have shuffled the deck, we need a way to put it back in order.
There is an algorithm for sorting that is ironically similar to the algorithm for shuffling.
It's called <term>selection sort</term>, because it works by traversing the array repeatedly and selecting the lowest (or highest) remaining card each time.
</p>

<p>
During the first iteration, we find the lowest card and swap it with the card in the zeroth position.
During the <m>i</m>th iteration, we find the lowest card to the right of <m>i</m> and swap it with the <m>i</m>th card.
Here is pseudocode for selection sort:
</p>

<program label="objects-arrays_selection-sort-program-1" interactive="activecode">
<xi:include href="../../programs/objects-arrays/selection-sort-1.cpp" parse="text"/>
</program>

<p>
Again, the pseudocode helps with the design of the helper functions.
For this algorithm, we can reuse <pf>swapCards</pf> from the previous section, so we need only a function to find the lowest card; we'll call it <pf>indexLowest</pf>:
</p>

<program label="objects-arrays_selection-sort-program-2" interactive="activecode">
<xi:include href="../../programs/objects-arrays/selection-sort-2.cpp" parse="text"/>
</program>

<p>
One of the exercises at the end of the chapter asks you to write <pf>indexLowest</pf>, and then use it and <pf>swapCards</pf> to implement <pf>selectionSort</pf>.
</p>
</section>
