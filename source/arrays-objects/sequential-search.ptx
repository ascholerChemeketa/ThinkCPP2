<section xml:id="arrays-objects_sequential-search" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Sequential Search</title>
<p>
    <idx><h>sequential search</h></idx>
The next function we'll write is <pf>search</pf>, which takes an array of cards and a <pf>Card</pf> object as parameters.
It returns the index where the <pf>Card</pf> appears in the array, or <pf>-1</pf> if it doesn't.
This version of <pf>search</pf> uses the algorithm in <xref ref="traversal">Section</xref>, which is called <term>sequential search</term>:
</p>

<p>
    <idx><h>traversal</h></idx>
    <idx><h>loop</h><h>search</h></idx>
</p>

<program>
<xi:include href="../../programs/arrays-objects/sequential-search-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>statement</h><h>return</h></idx>
    <idx><h>return</h><h>inside loop</h></idx>
The function returns as soon as it discovers the card, which means we don't have to traverse the entire array if we find the target.
If we get to the end of the loop, we know the card is not in the array.
</p>

<p>
    <idx><h>efficiency</h></idx>
If the cards in the array are not in order, there is no way to search faster than sequential search.
We have to look at every card, because otherwise we can't be certain the card we want is not there.
But if the cards are in order, we can use better algorithms.
</p>

<p>
Sequential search is relatively inefficient, especially for large arrays.
If you pay the price to keep the array sorted, finding elements becomes much easier.
</p>
</section>
