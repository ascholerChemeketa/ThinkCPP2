<section xml:id="arrays-objects_exercises" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Exercises</title>
<p>
The code for this chapter is in the <term>ch12</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>
<exercise>
<statement>
<p>
Encapsulate the deck-building code from <xref ref="cardarray">Section</xref> in a function called <c>makeDeck</c> that takes no parameters and returns a fully populated array of <c>Card</c>s.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
In some card games, Aces are ranked higher than Kings.
Modify the <c>compareTo</c> function to implement this ordering.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
In Poker a <q>flush</q> is a hand that contains five or more cards of the same suit.
A hand can contain any number of cards.
</p>

<p>
    <idx><h>histogram</h></idx>
<ol>
<li><p>Write a function called <c>suitHist</c> that takes an array of cards as a parameter and returns a histogram of the suits in the hand.
Your solution should traverse the array only once, as in <xref ref="singlepass">Section</xref>.</p></li>
<li><p>Write a function called <c>hasFlush</c> that takes an array of cards as a parameter and returns <c>true</c> if the hand contains a flush (and <c>false</c> otherwise).</p></li>
<li><p>A <q>royal flush</q> includes the Ace, King, Queen, Jack, and 10 (all in the same suit). Write a function called <c>hasRoyal</c> that determines whether an array of cards contains a royal flush.</p></li>
</ol>

</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Working with cards is more fun if you can display them on the screen.
If you have not already read <xref ref="graphics">Appendix</xref> about 2D graphics, you should read it before working on this exercise.
In the code directory for this chapter, <term>ch12</term>, you will find the following:
<ul>
<li><p><term>cardset-oxymoron</term> 
 A directory containing images of playing cards.</p></li>
<li><p><term>CardTable.java</term> 
 A sample program that demonstrates how to read and display images.</p></li>
</ul>
</p>

<p>
    <idx><h>array</h><h>2D</h></idx>
<term>CardTable.java</term> demonstrates the use of a 2D array; specifically, an array of card images.
The declaration looks like this:
</p>

<program xml:id="arrays-objects_exercises-1">
<xi:include href="../programs/arrays-objects_exercises-1.cpp" parse="text"/>
</program>

<p>
The variable <c>images</c> refers to a 2D array of <c>Image</c> objects, which are defined in the <c>java.awt</c> package.
Here's the code that creates the array itself:
</p>

<program xml:id="arrays-objects_exercises-2">
<xi:include href="../programs/arrays-objects_exercises-2.cpp" parse="text"/>
</program>

<p>
The array has 14 rows (one for each rank, plus an unused row for rank 0) and 4 columns (one for each suit).
Here's the loop that populates the array:
</p>

<program xml:id="arrays-objects_exercises-3">
<xi:include href="../programs/arrays-objects_exercises-3.cpp" parse="text"/>
</program>

<p>
The variable <c>cardset</c> is the name of the directory that contains the image files.
<c>suits</c> is a string that contains the single-letter abbreviations for the suits.
These strings are used to assemble <c>s</c>, which contains the filename for each image.
For example, when <c>rank=1</c> and <c>suit=2</c>, the value of <c>s</c> is <c>"cardset-oxymoron/01h.gif"</c>, which is an image of the Ace of Hearts.
</p>

<p>
The last line of the loop reads the image file, extracts an <c>Image</c> object, and assigns it to a location in the array, as specified by the indexes <c>rank</c> and <c>suit</c>.
For example, the image of the Ace of Hearts is stored in row 1, column 2.
</p>

<p>
If you compile and run <term>CardTable.java</term>, you should see images of a deck of cards laid out on a green table.
You can use this class as a starting place to implement your own card games.
</p>

<p>
As a starting place, try placing cards on the table in the starting configuration for the solitaire game Klondike (<url href="https://en.wikipedia.org/wiki/Klondike_(solitaire)"/>).
</p>

<p>
You can get the image for the back of the card by reading the file <term>back192.gif</term>.
</p>
</statement>
</exercise>
</section>
