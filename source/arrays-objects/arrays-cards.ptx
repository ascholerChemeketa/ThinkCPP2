<section xml:id="arrays-objects_arrays-cards" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Arrays of Cards</title>
<p>
    <idx><h>array</h><h>of objects</h></idx>
    <idx><h>object</h><h>array of</h></idx>
Just as you can create an array of <pf>String</pf> objects, you can create an array of <pf>Card</pf> objects.
The following statement creates an array of 52 cards.
<xref ref="fig_cardarray">Figure</xref> shows the memory diagram for this array.
</p>

<program>
<xi:include href="../../programs/arrays-objects/arrays-cards-1.cpp" parse="text"/>
</program>
  <figure xml:id="fig_cardarray" >
<caption>Memory diagram of an unpopulated <pf>Card</pf> array.</caption>
<image width="73%" source="images/cardarray.png" />
</figure>
<p>
    <idx><h>null</h></idx>
Although we call it an <q>array of cards</q>, the array contains <term>references</term> to cards; it does not contain the <pf>Card</pf> objects themselves.
Initially the references are all <pf>null</pf>.
</p>

<p>
Even so, you can access the elements of the array in the usual way:
</p>

<program>
<xi:include href="../../programs/arrays-objects/arrays-cards-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>exception</h><h>NullPointer</h></idx>
    <idx><h>run-time error</h></idx>
But if you try to access the instance variables of non-existent <pf>Card</pf> objects, you will get a <pf>NullPointerException</pf>:
</p>

<program>
<xi:include href="../../programs/arrays-objects/arrays-cards-3.cpp" parse="text"/>
</program>

<p>
    <idx><h>nesting</h></idx>
    <idx><h>loop</h><h>nested</h></idx>
That code won't work until we put cards in the array.
One way to populate the array is to write nested <pf>for</pf> loops:
</p>

<program>
<xi:include href="../../programs/arrays-objects/arrays-cards-4.cpp" parse="text"/>
</program>

<p>
The outer loop iterates suits from 0 to 3.
For each suit, the inner loop iterates ranks from 1 to 13.
Since the outer loop runs 4 times, and the inner loop runs 13 times for each suit, the body is executed 52 times.
</p>

<p>
    <idx><h>index</h></idx>
We use a separate variable <pf>index</pf> to keep track of where in the array the next card should go.
<xref ref="fig_cardarray2">Figure</xref> shows what the array looks like after the first two cards have been created.
</p>
<figure xml:id="fig_cardarray2" >
<caption>Memory diagram of a <pf>Card</pf> array with two cards.</caption>
<image width="73%" source="images/cardarray2.png" />
</figure>
<p>
When you work with arrays, it is convenient to have a function that displays the contents.
You have seen the pattern for traversing an array several times, so the following function should be familiar:
</p>

<p>
    <idx><h>printDeck</h></idx>
</p>

<program>
<xi:include href="../../programs/arrays-objects/arrays-cards-5.cpp" parse="text"/>
</program>

<p>
Since <pf>cards</pf> has type <pf>Card[]</pf>, pronounced <q>card array</q>, an element of <pf>cards</pf> has type <pf>Card</pf>.
So <pf>println</pf> invokes the <pf>toString</pf> function in the <pf>Card</pf> class.
</p>

<p>
Then again, we don't have to write our own <pf>printDeck</pf> function.
The <pf>Arrays</pf> class provides a <pf>toString</pf> function that invokes <pf>toString</pf> on the elements of an array and concatenates the results:
</p>

<program>
<xi:include href="../../programs/arrays-objects/arrays-cards-6.cpp" parse="text"/>
</program>

</section>
