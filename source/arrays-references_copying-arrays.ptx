<section xml:id="arrays-references_copying-arrays" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Copying Arrays</title>
<p>
    <idx><h>array</h><h>copying</h></idx>
As explained in <xref ref="elements">Section</xref>, array variables contain <term>references</term> to arrays.
When you make an assignment to an array variable, it simply copies the reference.
But it doesn't copy the array itself.
For example:
</p>

<program xml:id="arrays-references_copying-arrays-1">
<xi:include href="../programs/arrays-references_copying-arrays-1.cpp" parse="text"/>
</program>

<p>
These statements create an array of three <c>double</c>s and make two different variables refer to it, as shown in <xref ref="fig_array3">Figure</xref>.
</p>

<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
</p>
<figure xml:id="fig_array3" >
<caption>Memory diagram of two variables referring to the same array.</caption>
<image width="73%" source="images/array3.png" />
</figure>
<p>
    <idx><h>alias</h></idx>
Any changes made through either variable will be seen by the other.
For example, if we set <c>a[0] = 17.0</c>, and then display <c>b[0]</c>, the result is <c>17.0</c>.
Because <c>a</c> and <c>b</c> are different names for the same thing, they are sometimes called <term>aliases</term>.
</p>

<p>
If you actually want to copy the array, not just the reference, you have to create a new array and copy the elements from one to the other, like this:
</p>

<program xml:id="arrays-references_copying-arrays-2">
<xi:include href="../programs/arrays-references_copying-arrays-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>Arrays class</h></idx>
<c>java.util.Arrays</c> provides a function named <c>copyOf</c> that performs this task for you.
So you can replace the previous code with one line:
</p>

<program xml:id="arrays-references_copying-arrays-3">
<xi:include href="../programs/arrays-references_copying-arrays-3.cpp" parse="text"/>
</program>

<p>
The second parameter is the number of elements you want to copy, so <c>copyOf</c> can also be used to copy part of an array.
<xref ref="fig_array4">Figure</xref> shows the state of the array variables after invoking <c>Arrays.copyOf</c>.
</p>
<figure xml:id="fig_array4" >
<caption>Memory diagram of two variables referring to different arrays.</caption>
<image width="73%" source="images/array4.png" />
</figure>
<p>
    <idx><h>length</h><h>array</h></idx>
    <idx><h>array</h><h>length</h></idx>
The examples so far work only if the array has three elements.
It is better to generalize the code to work with arrays of any size.
We can do that by replacing the magic number, <c>3</c>, with <c>a.length</c>:
</p>

<program xml:id="arrays-references_copying-arrays-4">
<xi:include href="../programs/arrays-references_copying-arrays-4.cpp" parse="text"/>
</program>

<p>
All arrays have a built-in constant, <c>length</c>, that stores the number of elements.
In contrast to <c>String.length()</c>, which is a function, <c>a.length</c> is a constant.
The expression <c>a.length</c> may look like a function invocation, but there are no parentheses and no arguments.
</p>

<p>
The last time the loop gets executed, <c>i</c> is <c>a.length - 1</c>, which is the index of the last element.
When <c>i</c> is equal to <c>a.length</c>, the condition fails and the body is not executed<mdash/>which is a good thing, because trying to access <c>a[a.length]</c> would throw an exception.
</p>

<p>
Of course, we can replace the loop altogether by using <c>Arrays.copyOf</c> and <c>a.length</c> for the second argument.
The following line produces the same result shown in <xref ref="fig_array4">Figure</xref>:
</p>

<program xml:id="arrays-references_copying-arrays-5">
<xi:include href="../programs/arrays-references_copying-arrays-5.cpp" parse="text"/>
</program>

<p>
The <c>Arrays</c> class provides many other useful functions like <c>Arrays.compare</c>, <c>Arrays.equals</c>, <c>Arrays.fill</c>, and <c>Arrays.sort</c>.
Take a moment to read the documentation by searching the web for <c>java.util.Arrays</c>.
</p>
</section>
