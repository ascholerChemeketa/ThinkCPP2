<section xml:id="objects_using-headers"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Using Headers</title>

  <p>There are reasons both technical and practical to break classes up into separate files.</p>

  <p>Most importantly, the compiler requires access to function declarations everywhere those functions are used.
    But we don't want to compile the definitions of functions multiple times. So we generally
    want to place the class declaration in a .h file with just the function declarations and leave the function
    definitions for a .cpp file.</p>

  <p>This system also works to turn .h files into the <q>interface</q> for a class. Programmers working on client
    code should only care about what functions there are, not how they are implemented. By putting the 
    class with just the function declarations (and comments!) into a .h file and
    keeping the implementations in a .cpp file, it helps enforce the design goal of information hiding.</p>

  <aside>
    <p>If we are providing our code library to some other person or organization, we may not even
      want to give them the implementation. We could provide a .h file that can be included in their
      code along with a precompiled library that has our proprietary code already built.</p>
  </aside>

  <p>The process for splitting
    a class into a .h/.cpp file pair is similar to doing so for a standard function. The .h file
    contains the class with all the function declarations while the .cpp file contains the
    implementation of the member functions. Typically, we put each class in a separate file and name
    the files to match the name of the class they contain. So out Point class should go in `Point.h`
    and `Point.cpp`.</p>

  <listing>
    <caption>Point.h</caption>
    <program>
<xi:include href="../../programs/objects/simple-point.h" parse="text"/>
  </program>
  </listing>

  <note>
    <p>In a perfect world, it might be nice to only list the public members in the .h file. But the
      .h file needs to have the complete class declaration minus the function definitions.</p>
  </note>

  <p>When writing the .cpp file, we need to remember to use the scope resolution operator to specify
    that member functions are a part of the class. We include the .h file so that the compiler knows
    what that class looks like.
  </p>

  <listing>
    <caption>Point.cpp</caption>
    <program>
<xi:include href="../../programs/objects/simple-point.cpp" parse="text"/>
</program>
  </listing>

  <p>Then to use the Point class, other code can simply include the .h file and be compiled along
    with the .cpp file:</p>

  <program interactive="activecode">
    <xi:include href="../../programs/objects/headers-3.cpp" parse="text"/>
  </program>

  <console>
    <input>g++ Point.cpp main.cpp -o program.exe</input>
  </console>

  <exercise label="mce_11_7">
    <statement>
      <p>What statements are true based on the following <c>Stundent.h</c> header file?</p>
      <program line-numbers="yes">
        <code>
class Student {
public:
  Student(int age, int id, string year);
  Student(string year);
  void increment(int age);
  void print();
  bool isJunior();
private:
  // Instance variables
  int m_age, m_id;
  string m_year;
};
</code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>The Student.cpp file will have `void Student::print() {...}`.</p>
        </statement>
        <feedback>
          This is true!
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Student.cpp needs to #include the header file.</p>
        </statement>
        <feedback>
          This is true!
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The Student.cpp file must implement the constructors before the `isJunior` function.</p>
        </statement>
        <feedback>
          This is not necessary. Because they have all been declared, the order of the function
          implementations does not matter.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The .cpp file will need to define `Student::m_age = 0;`</p>
        </statement>
        <feedback>
          The .cpp file will only have function definitions. The instance variables are only listed in the class declaration in the .h;
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>