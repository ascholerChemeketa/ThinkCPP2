<section xml:id="objects_member-access"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Working with Members</title>

  <subsection>

    <title>Accessing Member Variables in the Class</title>
    <p>Look closely at the function `getX()`. What looks odd?</p>

    <program>
class Point {
private:
    double m_x, m_y;

public:
    double getX() {
        return m_x;
    }
}
  </program>

    <p>Notice that there is no declaration of `m_x` in this function! It is not declared as a
      parameter, nor is it declared as a local variable. So what is it?</p>

    <p>It is the member variable of Point named `m_x`. Inside member functions, we always have
      access to the member variables of the object.</p>

    <p>To call a member function, we always need to call it on a particular object:</p>
    <program>
p1.getX();
p2.getX();
</program>

    <p>Trying to use a member function without an object is a syntax error. There is no `getX()`
      function, there is only the `getX()` function that is a member of the `Point` class.
      (`Point::getX()` is the full name of this function - <q>the getX that is a part of Point</q>.)</p>

    <p>So when we say `p1.getX()` we are asking that object to execute the `getX()` code. When that
      code refers to `return m_x;`, it means <q>the `m_x` value of `p1`</q>. Later on, if we say
      `p2.getX()`, the line `return m_x;`, it now means <q>the `m_x` value of `p2`</q>.</p>

    <p> Run this Codelens sample. Pay special attention each time it enters the `getX` function. You
      will see a stack frame for `Point::getX()`, and in that stack frame, you will see a variable
      called `this` that points at the object that is running the code. During the first call to
      `Point::getX()`, it will point to `p1` since we called `p1.getX()` on line 23. Then, on line
      26 when we call `p2.getX()`, `this` will be pointing at `p2`.</p>

    <program xml:id="objects_member-access-1"
             interactive="codelens">
<xi:include href="../../programs/objects/member-access-1.cpp" parse="text"/>
</program>

    <p>A hand drawn memory diagram might look like this:</p>

    <figure align="center">
      <caption>A memory diagram of p1 executing getX</caption>
      <image source="images/objects-this.svg"
            width="50%"
            alt="When getX is called on p1, this refers to p1"/>
    </figure>

    <!-- TODO xref to this -->
    <note>
      <p>We will learn more about exactly what `this` is later. For now, you can think of it as an
        alias for <q>the object running the code</q>. When we say `m_x` in a member function, it is
        understood to mean `this->m_x` or <q>the `m_x` variable of the object running this code</q>.</p>
    </note>


    <exercise label="one_last_example_1">
      <statement>
        <p>Examine this code. Then decide what best describes the meaning of `m_red` on line 6. </p>
        <program line-numbers="yes">
        class Color {
        private:
            int m_red, m_green, m_blue;
        public:
            int getRed() {
                return m_red;
            }
        };

        int main() {
            Color c1;
            Color c2;
            c1.getRed();
        }
      </program>
      </statement>
      <choices randomize="yes">
        <choice correct="yes">
          <statement>
            <p> The `m_red` value of whatever point is currently executing getRed() </p>
          </statement>
        </choice>
        <choice>
          <statement>
            <p> The `m_red` value of `c1`. </p>
          </statement>
          <feedback> Although we only currently use getRed on `c1`, it is possible that we could
            later call it on `c2`. So `m_red` is not guaranteed to be the value of `c1`. </feedback>
        </choice>
        <choice>
          <statement>
            <p> The `m_red` value of `c2`. </p>
          </statement>
        </choice>
        <choice>
          <statement>
            <p> The `m_red` value of the Color class. </p>
          </statement>
          <feedback> The class itself does not have a `m_red` value. The class is just a blueprint
            for creating objects. The `m_red` variable is a member of each instance of the class. </feedback>
        </choice>
      </choices>
    </exercise>


  </subsection>

  <subsection>
    <title>Setters and Mutators</title>
    <p>If we want to provide the ability for outside code to modify a member variable, we can add a <term>
      setter</term> function. These are functions that take a value and use that to set a member
      variable. This version of the Point class adds a setter for `m_x`:</p>

    <program xml:id="objects_member-access-2"
             interactive="codelens">
<xi:include href="../../programs/objects/member-access-2.cpp" parse="text"/>
</program>

    <p>When main calls `p1.setX(5.0)`, it passes in the value 5. The `Point::setX()` function stores
      that value into the `m_x` instance variable of `p1`.</p>

    <p>As with getters, setters provide a limited way for outside code to manipulate the object.
      Outside code can't directly change `m_x`, it has to use the interface to ask a given point to
      please make the change to itself. This means that we have loose coupling and also that the
      class can <q>protect itself</q> from unsafe or unwanted changes.</p>

    <p>Say you are creating a Person class and you want to make sure that the age of a person never
      gets set to a negative value. You could design the class to prevent that from happening:</p>
    <program xml:id="objects_member-access-3"
             interactive="activecode">
<xi:include href="../../programs/objects/member-access-3.cpp" parse="text"/>
</program>

    <p>When other code tries to set a negative age, the `Person` class ignores that request and
      prints an error message. (It would make even more sense in a real program to throw an
      exception there.)</p>

    <insight>
      <p>Remember the <q>two programmers</q> tip for understanding Object Oriented Programming.</p>
      <p>The person programming `Person` is the expert who knows all the important ins and outs of
        the Person class. They know that a negative value is going to cause problems later. The
        person programming main does not realize that issue even exists. If they could set `p1.m_age
        = -5;` directly, they could end up causing the program to do something horrible later on.</p>
      <p>By forcing others to use the public interface and then preventing unwanted modifications in
        that interface, the programmer of the Point class is able to limit the potential for such
        issues.</p>
    </insight>

    <p>Setters are a special kind of <term>mutator</term> function. A mutator is any function that
      changes the state of an object. While a <term>setter</term> sets a member to a particular
      value, another kind of mutator might set more than one value or change a variable in a way
      that doesn't allow outside code to set a particular value.<idx>
        <h>mutator</h>
      </idx></p>

    <p>For instance, a person might have a `void getOlder()` function that looked like:</p>
    <program>
class Person {
private:
    int m_age;
public:
    void getOlder() {
        m_age++;
    }
    ...
    </program>

    <p>`getOlder` mutates (changes) the object. But it doesn't allow other code to change the age to
      an arbitrary value.</p>

  </subsection>

  <exercise label="mucp_d14_3"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>In <c>main</c> we want to create a <c>Circle</c>, set the radius to 2.4 and output the radius. Then change
        the radius to 3.6 and output the new radius. We want to use the public interface of the
        Circle class and not depend on the private details of the class.</p>
      <p>Put the correct blocks of code in the correct order.</p>
    </statement>
    <blocks>
      <block>
        <cline>int main() {</cline>
      </block>
      <block>
        <cline> Circle c;</cline>
      </block>
      <block>
        <cline> c.setRadius(2.4);</cline>
      </block>
      <block correct="no">
        <cline> c.m_radius = 2.4;  </cline>
      </block>
      <block>
        <cline><![CDATA[ cout << "Radius: " << c.getRadius() << endl;]]></cline>
      </block>
      <block correct="no">
        <cline><![CDATA[ cout << "Radius: " << c.m_radius << endl;  ]]></cline>
      </block>
      <block correct="no">
        <cline> c.m_radius = 3.6;  </cline>
      </block>
      <block>
        <cline> s.setRadius(3.6);</cline>
      </block>
      <block>
        <cline><![CDATA[ cout << "New radius: " << c.getRadius() << endl;]]></cline>
      </block>
      <block correct="no">
        <cline><![CDATA[ cout << "New radius: " << c.m_radius << endl;  ]]></cline>
      </block>
      <block>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>