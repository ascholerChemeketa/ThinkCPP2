<section xml:id="objects_constructors"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Constructors</title>

  <subsection>
    <title>What is a Constructor?</title>
    <p>We have yet to clearly describe this member of the <pf>Point</pf> class:</p>
    <program>
Point(double x, double y) {
    m_x = x;
    m_y = y;
}
  </program>

    <p>This is a special type of member function called a <term>constructor</term>. A constructor
      for a class is responsible for initializing the member variables of new objects of that type.
      Any time we make a Point, the constructor will make sure <pf>m_x</pf> and <pf>m_y</pf> are set.</p>

    <p>A constructor always has the same name as the class and it lacks a return type - the return
      type is implied to be the class type. When you use a <pf>Point</pf> constructor, a new Point is
      always created and it is what gets automatically returned: <idx>
        <h>constructor</h>
      </idx></p>

    <program>
// A Point constructor
Point(double x, double y) {
    // A new point is created when we enter the constructor
    m_x = x;
    m_y = y;
    // implicit return of the new point
}
</program>

    <p>Constructors can be called like other functions:</p>

    <program>
Point p1 = Point(3, 4);
</program>

    <p>But usually, we call a constructor using this shorter syntax:</p>
    <program>
Point p1(3, 4);
</program>

    <p>There is a subtle difference between the two. The first says <q>Create a Point with 3 and 4.
      Copy that point into p1.</q> The second says <q>Create Point p1 with 3 and 4.</q> and thus
      skips making an anonymous (nameless) Point that then gets copied into p1 and then throws away
      the anonymous Point. Either syntax will produce the same results, but you should recognize
      that <pf>Point(3, 4)</pf> creates an anonymous point.</p>

    <program xml:id="objects_constructors-1"
             interactive="codelens">
<xi:include href="../../programs/objects/constructors-1.cpp" parse="text"/>
</program>
  </subsection>

  <subsection>
    <title>Multiple Constructors</title>
    <p>We can overload the constructor of a class in the same way we can overload other functions.
      Say we want to be able to easily create points at (0, 0) without saying <pf>Point p1(0, 0);</pf>. We
      could write a no argument constructor <pf>Point()</pf> that automatically set x and y to 0. Or if we
      wanted (for some unknown reason) to be able to easily make points with the same x and y value
      we might write <pf>Point(double sharedCoordinate);</pf>:</p>
    <program>
    // A two-argument constructor
    Point(double x, double y) {
        m_x = x;
        m_y = y;
    }
    // A  no-argument constructor
    Point() {
        m_x = 0;
        m_y = 0;
    }
    // A one-argument constructor
    Point(double sharedCoordinate) {
        m_x = sharedCoordinate;
        m_y = sharedCoordinate;
    }
    </program>
    <p>Now we can create points in a variety of ways:</p>
    <program>
Point p1(3, 4); // Point at (3, 4)
Point p2; // Point at (0, 0)
Point p3(5); // Point at (5, 5)
</program>
    <p>In this case, the compiler will automatically pick the constructor that best matches the
      arguments we give it. If we give it two arguments, it will use the two-argument constructor.
      If we give it one argument, it will use the one-argument constructor.</p>
    <p>The no-argument constructor is a special case. To call it we could say <pf>Point p2 = Point();</pf>.
      But to write the short version, we have to leave off the parentheses: <pf>Point p2;</pf>. This
      somewhat annoying special case is a quirk of the syntax of C++. <pf>Point p2();</pf> looks like it
      defines a function called p2 that returns a Point.</p>
    <note>
      <p>Remember that declaring a variable of a class automatically calls the no argument
        constructor unless we use <pf>(...)</pf> after the variable name to call a different constructor.
        Because it is called automatically when we don't use <pf>(...)</pf>, it is also known as the <term>default
        constructor</term>.</p>
      <p>If you fail to define any constructors, a default one is automatically provided by the
        compiler, but it doesn't actually initialize any data - you should always define
        constructors for every class you write.</p>
    </note>
  </subsection>
  <subsection>
    <title>Default Values</title>
    <p>It is possible to use default values for the parameters of a constructor just like any other
      function:</p>
    <program>
Point(double x = 0, double y = 0) {...
</program>

    <p>But if we know there are default values that should always be applied, we might want to
      specify those directly in the class itself. Try running this Codelens sample and notice that
      the member variables are both set to 0 automatically at the start of each constructor. This is
      because the variables themselves are given default values of 0 on lines 15 and 16:</p>

    <program xml:id="objects_constructors-2"
             interactive="codelens">
<xi:include href="../../programs/objects/constructors-2.cpp" parse="text"/>
  </program>

    <p>Assigning default values at the class level can prevent having to do so in multiple
      constructors. Say we want to provide many different constructors for a <pf>Time</pf> class. We could
      either write this:</p>

    <program xml:id="objects_constructors-3">
<xi:include href="../../programs/objects/constructors-3.cpp" parse="text"/>
  </program>

    <p>Or we would use default values for the members and then simplify the code to this:</p>

    <program xml:id="objects_constructors-4">
<xi:include href="../../programs/objects/constructors-4.cpp" parse="text"/>
  </program>

    <note>
      <p>Every constructor should make sure that every member variable has some reasonable starting
        value. If the constructor does not take a value to use for a given variable, a default value
        should be assigned either in the constructor or where the member variable is declared .</p>
    </note>
  </subsection>
  <subsection>
    <title>Making Copies</title>

    <p>As with structs, we can copy one object into another using the assignment operator <pf>=</pf>. Doing
      so results in two distinct objects that happen to have the same data:</p>

    <program xml:id="objects_constructors-5">
Point p1(3, 4);
Point p2 = p1; // copy p1 into p2
    </program>

    <figure align="center">
      <caption>A memory diagram of p1 and p2</caption>
      <image source="images/objects-copy.svg"
             width="50%"
             alt="p2 is an exact copy of p1"/>
    </figure>

    <p>There are ways to customize what the assignment operator does with objects. Those techniques
      are important for objects that are in charge of managing resources. But for the simple objects
      we are working with for now, the default behavior of the assignment operator works just fine.</p>
  </subsection>


  <exercise label="objects_constructors-ex-1">
    <statement>
      <p>The member function that initializes objects automatically when they are created is called
        a(n) <fillin mode="string"
                case="insensitive"
                answer="CONSTRUCTOR"/>. </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <exercise label="objects_constructors-ex-2">
    <statement>
      <p>Which statment is <term>false</term> about constructors?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>They initialize the instance variables of an object.</p>
        </statement>
        <feedback> Incorrect! This statement is true! </feedback>
      </choice>
      <choice>
        <statement>
          <p>They have the same name as the class.</p>
        </statement>
        <feedback> Incorrect! This statement is true! </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Every class should only have one constructor.</p>
        </statement>
        <feedback> Correct! It is often useful to have multiple constructors. </feedback>
      </choice>
      <choice>
        <statement>
          <p>They have the same name as the class, no return type and unchanged parameters.</p>
        </statement>
        <feedback> Incorrect! This statement is true! </feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="objects_constructors-ex-3">
    <statement>
      <p>The type Dog has these constructors:</p>
      <program>
          Dog(string name);
          Dog(string name, int age);
          Dog();
        </program>
      <p>Which are valid ways to construct a Dog using the no-arg constructor?</p>
    </statement>
    <choices radomize="yes">
      <choice correct="yes">
        <statement>
          <p><pf>Dog d;</pf></p>
        </statement>
      </choice>

      <choice correct="yes">
        <statement>
          <p><pf>Dog d = Dog();</pf></p>
        </statement>
        <feedback> This is not a preferred method, but it does work. This calls the no-argument
          constructor and copies the result into d </feedback>
      </choice>

      <choice>
        <statement>
          <p><pf>Dog d();</pf></p>
        </statement>
        <feedback> Incorrect! You do not use the parentheses after the variable name when using the
          no-arg constructor. </feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="objects_constructors-ex-4">
    <statement>
      <p>The type Dog has these constructors:</p>
      <program>
          Dog(string name);
          Dog(string name, int age);
          Dog();
        </program>
      <p>Which are valid ways to construct a Dog object?</p>
    </statement>
    <choices radomize="yes">
      <choice correct="yes">
        <statement>
          <p><pf>Dog d;</pf></p>
        </statement>
      </choice>

      <choice correct="yes">
        <statement>
          <p><pf>Dog d = Dog("Spot");</pf></p>
        </statement>
        <feedback> This is not a preferred method, but it does work. This calls the no-argument
          constructor and copies the result into d. </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p><pf>Dog d("Spot");</pf></p>
        </statement>
        <feedback> This works, but is not preferred.This calls the no-argument constructor and
          copies the result into d. </feedback>
      </choice>

      <choice>
        <statement>
          <p><pf>Dog d(3, "Rover");</pf></p>
        </statement>
        <feedback> Incorrect! The order of the parameters is wrong. </feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="objects_constructors-ex-5">
    <statement>
      <p>Which is the most accurate statement?</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>Every constructor should make sure every member variable is initialized.</p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>Each constructor should only initialize the member variables it accepts values for.</p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>Only one constructor should be provided for each class - one that has values for every
            member variable.</p>
        </statement>
      </choice>
    </choices>
  </exercise>

  <exercise label="objects_constructors-ex-6"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write two constructors for Student. One with no arguments and one with arguments. Put
        the necessary blocks of code in the correct order with the no-argument constructor first.</p>
    </statement>
    <blocks>
      <block>
        <cline>Student() {</cline>
      </block>
      <block correct="no">
        <cline>void Student() {</cline>
      </block>
      <block>
        <cline> m_id = 0;</cline>
        <cline> m_year = 0;</cline>
        <cline> m_name = "?";</cline>
        <cline>}</cline>
      </block>
      <block correct="no">
        <cline> stu.m_id = 0;</cline>
        <cline> stu.m_year = 0;</cline>
        <cline> stu.m_name = "?";</cline>
        <cline>}                     </cline>
      </block>
      <block>
        <cline>Student(int id,</cline>
        <cline>        int year,</cline>
        <cline>        string name) {</cline>
      </block>
      <block correct="no">
        <cline>Student Student(int id,</cline>
        <cline>                int year,</cline>
        <cline>                string name) {</cline>
      </block>
      <block correct="no">
        <cline> id = m_id;</cline>
        <cline> year = m_year;</cline>
        <cline> name = m_name;</cline>
        <cline>}</cline>
      </block>
      <block>
        <cline> m_id = id;</cline>
        <cline> m_year = year;</cline>
        <cline> m_name = name;</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

</section>