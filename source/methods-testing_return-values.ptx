<section xml:id="functions-testing_return-values" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Return Values</title>
<p>
    <idx><h>void</h></idx>
When you invoke a <c>void</c> function, the invocation is usually on a line all by itself.
For example:
</p>

<program xml:id="functions-testing_return-values-1">
<xi:include href="../programs/functions-testing_return-values-1.cpp" parse="text"/>
</program>

<p>
On the other hand, when you invoke a value-returning function, you have to do something with the return value.
We usually assign it to a variable or use it as part of an expression, like this:
</p>

<program xml:id="functions-testing_return-values-2">
<xi:include href="../programs/functions-testing_return-values-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>value function</h></idx>
    <idx><h>function</h><h>value</h></idx>
Compared to <c>void</c> functions, value-returning functions differ in two ways:
</p>

<p>
    <idx><h>return type</h></idx>
    <idx><h>return value</h></idx>
<ul>
<li><p>They declare the type of the return value (the <term>return type</term>).</p></li>
<li><p>They use at least one <c>return</c> statement to provide a <term>return value</term>.</p></li>
</ul>
</p>

<p>
Here's an example from a program named <term>Circle.java</term>.
The <c>calculateArea</c> function takes a <c>double</c> as a parameter and returns the area of a circle with that radius (i.e., <m>\pi r^2</m>):
</p>

<program xml:id="functions-testing_return-values-3">
<xi:include href="../programs/functions-testing_return-values-3.cpp" parse="text"/>
</program>

<p>
As usual, this function is <c>public</c> and <c>static</c>.
But in the place where we are used to seeing <c>void</c>, we see <c>double</c>, which means that the return value from this function is a <c>double</c>.
</p>

<p>
    <idx><h>return</h></idx>
    <idx><h>statement</h><h>return</h></idx>
The last line is a new form of the <c>return</c> statement that means, <q>Return immediately from this function, and use the following expression as the return value.</q>
The expression you provide can be arbitrarily complex, so we could have written this function more concisely:
</p>

<program xml:id="functions-testing_return-values-4">
<xi:include href="../programs/functions-testing_return-values-4.cpp" parse="text"/>
</program>

<p>
    <idx><h>temporary variable</h></idx>
    <idx><h>variable</h><h>temporary</h></idx>
On the other hand, <term>temporary variables</term> like <c>result</c> often make debugging easier, especially when you are stepping through code by using an interactive debugger (see <xref ref="debugger">Appendix</xref>).
</p>

<p>
<xref ref="fig_param">Figure</xref> illustrates how data values flows through the program.
When the <c>main</c> function invokes <c>calculateArea</c>, the value <c>5.0</c> is assigned to the parameter <c>radius</c>.
<c>calculateArea</c> then returns the value <c>78.54</c>, which is assigned to the variable <c>area</c>.
</p>
<figure xml:id="fig_param" >
<caption>Passing a parameter and saving the return value.</caption>
<image width="73%" source="external/images/param.png" />
</figure>
<p>
The type of the expression in the <c>return</c> statement must match the return type of the function itself.
When you declare that the return type is <c>double</c>, you are making a promise that this function will eventually produce a <c>double</c> value.
If you try to <c>return</c> with no expression, or <c>return</c> an expression with the wrong type, the compiler will give an error.
</p>
</section>
