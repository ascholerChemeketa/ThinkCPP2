<section xml:id="operators_increment"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Overloading ++</title>

  <p>Recall that there are two versions of <pf>++</pf>: the <term>prefix</term> version, which is
    written as <pf>++x</pf>, and the <term>postfix</term> version, which is written as <pf>x++</pf>. We
    will start with the prefix version as it is the simpler of the two to implement. </p>

  <p>What does <pf>++x</pf> do? Well, it increments <pf>x</pf> to the next value. This of course can be
    a numeric value<mdash/>given <pf>int x = 3;</pf> we can use <pf>++x</pf> to increase it to 4. But <q>increment</q>
    can have non-numeric meanings. When used on an iterator, the <pf>++</pf> operator advances the
    iterator to the next item in the collection. In fact, we can write a loop to walk through a
    vector using an iterator and <pf>++</pf>:</p>

  <listing>
  <program>
    vector&lt;int> v = {1, 2, 3, 4, 5};
    // Get an iterator that points to the first item
    vector&lt;int>::iterator it = v.begin();
    while (it != v.end()) {
      ++it; // advance the iterator to the next item
      int current = *it;  // get the value at the current iterator position
      cout &lt;&lt; current &lt;&lt; endl;
    }
  </program>
  </listing>

  <p>For this code to work, there must be a definition for what <pf>++</pf> means for the iterator. This
    definition is provided by an overload for the operator.</p>

  <p>To write a custom <pf>++</pf> operator, we need to figure out what parameters and return type it needs.
    The <pf>++</pf> does not need to operate on any data other than the object it is called on, so we do not need a parameter.
    We do need a return value however. In addition to incrementing the current value,
    <pf>++</pf> needs to return the updated value so that we can use it in a complex expression like <pf>y = ++x</pf>.
    This means the prototype of <pf>++</pf> should look like:</p>

  <program>
    Rational&amp; Rational::operator++();
  </program>

  <p>Note that the return type is a reference to a Rational. If the return type was <pf>void</pf>, we
    would not be able to use <pf>++r1</pf> in a larger expression, such as <pf>r2 = ++r1;</pf>. In that case, <pf>r2 = ++r1;</pf> would turn into <pf>r2 = (nothing);</pf>
    once <pf>++</pf> executed. If the return type was <pf>Rational</pf>, we would return a copy of the
    modified object. That would be inefficient. (And it would prevent code like <pf>++(++r1)</pf> from being
    able to change r1 twice.) So the return type is <pf>Rational&amp;</pf><mdash/> a reference, not copy, to the
    updated object.</p>

  <p>Here is an implementation of <pf>operator++</pf> for <pf>Rational</pf>:</p>

  <listing>
  <program include="RationalStart"
           interactive="activecode"
           label="operators_increment-1">
<xi:include href="../../programs/operators/increment-1.cpp" parse="text"/>
  </program>
  </listing>

  <p>Note how the object returns itself: <pf>return *this;</pf>. Recall that <pf>this</pf> is the memory address of
    the current object. <pf>*this</pf> dereferences that pointer to get the actual <pf>Rational</pf> object which
    we then return as a copy. Again, the math is not of critical importance, but you should take a
    minute to confirm that the right way to add one to a fraction is to increase the numerator by
    the value of the denominator.</p>

  <p>The <pf>--</pf> prefix operator can be implemented in the same fashion, only with logic to <q>decrease
    the value by 1</q>.</p>

  <exercise label="operators_increment-ex-1">
    <statement>
      <p>Define the <pf>operator--</pf> for <pf>Rational</pf>. It's logic should be the same as <pf>++</pf> but it
        should decrease the value by 1 instead of increasing it. (Decrease the numerator by the
        value of the denominator.)</p>
    </statement>
    <program interactive="activecode"
             include="RationalStart">
        <code>
          
             Your code here

        </code>
        <tests visible="yes">
<xi:include href="../../programs/operators/increment-ex-test.cpp" parse="text"/>
        </tests>
    </program>
  </exercise>

</section>