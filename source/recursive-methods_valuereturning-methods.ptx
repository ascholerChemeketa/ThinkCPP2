<section xml:id="recursive-methods_valuereturning-methods" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Value-Returning Methods</title>
<p>
To give you an idea of what you can do with the tools you have learned, let's look at methods that evaluate recursively defined mathematical functions.
</p>

<p>
A recursive definition is similar to a <q>circular</q> definition, in the sense that the definition refers to the thing being defined.
Of course, a truly circular definition is not very useful:
</p>
<blockquote>
<em>recursive:</em> 

An adjective used to describe a method that is recursive.
</blockquote>
<p>
<idx><h>recursion</h></idx>
If you saw that definition in the dictionary, you might be annoyed.
Then again, if you search for <q>recursion</q> on Google, it displays <q>Did you mean: recursion</q> as an inside joke.
People fall for that link all the time.
</p>

<p>
<idx><h>factorial</h></idx>
Many mathematical functions are defined recursively, because that is often the simplest way.
For example, the <em>factorial</em> of an integer <m>n</m>, which is written <m>n!</m>, is defined like this:
<md>
  <mrow>  \amp \amp   0! = 1</mrow>
  <mrow>  \amp \amp   n! = n \cdot(n-1)!</mrow>
</md>
</p>

<p>
Don't confuse the mathematical symbol <m>!</m>, which means <em>factorial</em>, with the Java operator <c>!</c>, which means <em>not</em>.
This definition says that <c>factorial(0)</c> is <c>1</c>, and <c>factorial(n)</c> is <c>n * factorial(n - 1)</c>.
</p>

<p>
So <c>factorial(3)</c> is <c>3 * factorial(2)</c>; <c>factorial(2)</c> is <c>2 * factorial(1)</c>; <c>factorial(1)</c> is <c>1 * factorial(0)</c>; and <c>factorial(0)</c> is <c>1</c>.
Putting it all together, we get <c>3 * 2 * 1 * 1</c>, which is 6.
</p>

<p>
If you can formulate a recursive definition of something, you can easily write a Java method to evaluate it.
The first step is to decide what the parameters and return type are.
Since <c>factorial</c> is defined for integers, the method takes an <c>int</c> as a parameter and returns an <c>int</c>:
</p>

<program xml:id="recursive-methods_valuereturning-methods-1">
<xi:include href="../programs/recursive-methods_valuereturning-methods-1.cpp" parse="text"/>
</program>

<p>
Next, we think about the base case.
If the argument happens to be 0, we return 1:
</p>

<program xml:id="recursive-methods_valuereturning-methods-2">
<xi:include href="../programs/recursive-methods_valuereturning-methods-2.cpp" parse="text"/>
</program>

<p>
Otherwise, and this is the interesting part, we have to make a recursive call to find the factorial of <m>n-1</m>, and then multiply it by <m>n</m>:
</p>

<program xml:id="recursive-methods_valuereturning-methods-3">
<xi:include href="../programs/recursive-methods_valuereturning-methods-3.cpp" parse="text"/>
</program>

<p>
To illustrate what is happening, we'll use the temporary variables <c>recurse</c> and <c>result</c>.
In each method call, <c>recurse</c> stores the factorial of <m>n - 1</m>, and <c>result</c> stores the factorial of <m>n</m>.
</p>

<p>
The flow of execution for this program is similar to <c>countdown</c> from <xref ref="recursion">Section</xref>.
If we invoke <c>factorial</c> with the value <c>3</c>:
</p>
<blockquote>
Since 3 is not 0, we skip the first branch and calculate the factorial of <m>n-1</m>...
<blockquote>
Since 2 is not 0, we skip the first branch and calculate the factorial of <m>n-1</m>...
<blockquote>
Since 1 is not 0, we skip the first branch and calculate the factorial of <m>n-1</m>...
<blockquote>
Since 0 <em>is</em> 0, we take the first branch and return the value 1 immediately.
</blockquote>
The return value (1) gets multiplied by <c>n</c>, which is 1, and the result is returned.
</blockquote>
The return value (1) gets multiplied by <c>n</c>, which is 2, and the result is returned.
</blockquote>
The return value (2) gets multiplied by <c>n</c>, which is 3, and the result, 6, is returned to whatever invoked <c>factorial(3)</c>.
</blockquote>
<p>
<idx><h>stack diagram</h></idx>
<idx><h>diagram</h><h>stack</h></idx>
<xref ref="fig_stack3">Figure</xref> shows what the stack diagram looks like for this sequence of method invocations.
The return values are shown being passed up the stack.
Notice that <c>recurse</c> and <c>result</c> do not exist in the last frame, because when <c>n == 0</c>, the code that declares them does not execute.
</p>
<figure xml:id="fig_stack3" >
<caption>Stack diagram for the <c>factorial</c> method.</caption>
<image width="73%" source="external/images/stack3.png" />
</figure>
</section>
