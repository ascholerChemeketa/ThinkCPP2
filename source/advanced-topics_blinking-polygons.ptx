<section xml:id="advanced-topics_blinking-polygons">
<title>Blinking Polygons</title>
<p>
At this point, we have a simple program that draws polygons; we can make it more fun by adding animation.
<xref ref="conway">Chapter</xref> introduced the idea of simulating time steps.
Here's a loop that runs the animation:
</p>

<program>
while (true) {
    drawing.step();
    try {
        Thread.sleep(1000 / 30);
    } catch (InterruptedException e) {
        // do nothing
    }
}
</program>

<p>
Each time through the loop, we call <c>step</c> to update the <c>Drawing</c>.
Then we sleep with a delay calculated to update about 30 times per second.
</p>

<p>
Here's what the <c>step</c> method of <c>Drawing</c> looks like:
</p>

<program>
public void step() {
    for (DrawablePolygon dp : list) {
        dp.step();
    }
    repaint();
}
</program>

<p>
It invokes <c>step</c> on each <c>DrawablePolygon</c> in the list and then repaints (clears and redraws) the canvas.
</p>

<p>
In order for this code to compile, we need <c>DrawablePolygon</c> to provide a <c>step</c> method.
Here's a version that doesn't do anything; we'll override it in subclasses:
</p>

<program>
public void step() {
    // do nothing
}
</program>

<p>
Now let's design a new type of polygon that blinks.
We'll define a class named <c>BlinkingPolygon</c> that extends <c>RegularPolygon</c> and adds two more attributes: <c>visible</c>, which indicates whether the polygon is visible, and <c>count</c>, which counts the number of time steps since the last blink:
</p>

<program>
public class BlinkingPolygon extends RegularPolygon {
    protected boolean visible;
    protected int count;

    public BlinkingPolygon(int nsides, int radius, Color c) {
        super(nsides, radius, c);
        visible = true;
        count = 0;
    }

    public void draw(Graphics g) {
        if (visible) {
            super.draw(g);
        }
    }

    public void step() {
        count++;
        if (count == 10) {
            visible = !visible;
            count = 0;
        }
    }
}
</program>

<p>
The constructor uses <c>super</c> to call the <c>RegularPolygon</c> constructor.
Then it initializes <c>visible</c> and <c>count</c>.
Initially, the <c>BlinkingPolygon</c> is visible.
</p>

<p>
The <c>draw</c> method draws the polygon only if it is visible.
It uses <c>super</c> to call <c>draw</c> in the parent class.
But the parent class is <c>RegularPolygon</c>, which does not provide a <c>draw</c> method.
In this case, <c>super</c> invokes <c>draw</c> from the <c>DrawablePolygon</c> class.
</p>

<p>
The <c>step</c> method increments <c>count</c>.
Every 10 time steps, it toggles <c>visible</c> and resets <c>count</c> to 0.
</p>
</section>
