<!-- TODO move to earlier in book -->
<section xml:id="variables-operators_compiler-error-messages"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Compiler Error Messages</title>
  <p>
    <idx>
      <h>error</h>
      <h>message</h>
    </idx> Three kinds of errors can occur in a program: compile-time errors,
    run-time errors, and logic errors. It is useful to distinguish among them in order to track them
    down more quickly. </p>

  <p>
    <idx>
      <h>compile-time error</h>
    </idx>
    <idx>
      <h>syntax error</h>
    </idx>
    <idx>
      <h>error</h>
      <h>compile-time</h>
    </idx>
<term>Compile-time</term> errors occur when you violate the rules
    of the language. For example, parentheses and braces have to come in matching pairs. So <c>(1 + 2)</c>
    is legal, but <c>8)</c> is not. In the latter case, the program cannot be compiled, and the
    compiler displays a <term>syntax error</term>.</p>

  <p>
    <idx>
      <h>error</h>
      <h>message</h>
    </idx>Error messages from the compiler usually indicate where in the program
    the error occurred. Sometimes they can tell you exactly what the error is. As an example, let's
    get back to the Hello World program from <xref ref="hello">Section</xref>. Only in this version,
    there is a missing quotation mark:</p>

  <listing filename="Hello.java">
    <program xml:id="variables-operators_compiler-error-messages-1"
             interactive="activecode">
<xi:include href="../programs/variables-operators_compiler-error-messages-1.cpp" parse="text"/>
</program>
  </listing>

  <p>If you run it, you should see a message like the one shown below: </p>

  <console>
    <output>
  test.cpp:6:11: error: missing terminating " character [-Werror]
    6 |   cout &lt;&lt; "Hello, World!;
      |   
  test.cpp: In function ‘int main()’:
  test.cpp:7:1: error: expected primary-expression before ‘}’ token
    7 | }
      | ^
  </output>
  </console>
  <p> There are a few things to note about the error messages: <ul>
      <li>Each error message starts with something like <c>test.cpp:6:11</c>. That identifies the file (<c>test.cpp</c>),
    the line number (<c>6</c>), and the character number in that line (<c>11</c>) where the error was
    encountered.</li>
      <li>Error messages tell you about a symptom. Sometimes the cause of an error is hard to figure
    out from that symptom. For example, the second error message below is actually another symptom
    of the first (and only syntax error). </li>
    </ul>
  </p>

  <insight>
    <p>When fixing errors, focus on fixing the first one identified by the compiler. That early
      error often causes a series of problems that result in multiple error messages. If you skip
      ahead, you likely will try to <q>fix</q> something that is not really an error!</p>
  </insight>

  <p>Error messages are not always easy to understand. Sometimes the compiler reports the place in
    the program where the error was <term>detected</term>, not where it actually occurred. And
    sometimes the description of the problem is more confusing than helpful.</p>

  <p>For example, if you forget the <c>{</c> brace at the end of line 5), you might get a message
    like this: </p>

  <console>
    <output>
test.cpp:6:3: error: expected initializer before ‘cout’
    6 |   cout &lt;&lt; "Hello, World!";
      |   ^~~~
</output>
  </console>

  <p>There are two problems here. First, the error message identifies the wrong line. The compiler
    does not realize there is an issue until it sees the <c>cout</c> on line 6. Second, the compiler
    does not correctly identify why <c>cout</c> did not make sense to it. The real issue has nothing to
    do with an <q>initializer</q> - it is just the missing <c>{</c> on the previous line.</p>

  <insight>
    <p>If an error message does not make sense, look at the line above it and see if something is
      missing there.</p>
  </insight>

  <p>Despite the difficulties sometimes involved in understanding them, error messages contain
    useful information. During the first few weeks of your programming career, you will probably
    spend a lot of time learning how to interpret the messages that will help you track down syntax
    and other compile-time errors. As you gain experience, you will make fewer mistakes and find
    them more quickly. Becoming a proficient programmer is as much about learning how to debug code
    as it is about writing code.</p>
</section>