<section xml:id="recursive-functions_codingbat-problems" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>CodingBat Problems</title>
<p>
In the past several chapters, you've seen functions, conditions, loops, strings, arrays, and recursion.
A great resource for practicing all of these concepts is <url href="https://codingbat.com/"/>.
</p>

<p>
    <idx><h>CodingBat</h></idx>
<term>CodingBat</term> is a free website of programming problems developed by Nick Parlante, a computer science lecturer at Stanford University.
As you work on these problems, CodingBat saves your progress (if you create an account).
</p>

<p>
To conclude this chapter, we consider two problems in the <term>Recursion-1</term> section of CodingBat.
One of them deals with strings, and the other deals with arrays.
Both of them have the same recursive idea: check the base case, look at the current index, and recursively handle the rest.
</p>

<p>
The first problem is available at <url href="https://codingbat.com/prob/p118230"/>:
</p>
<blockquote>
<term>Recursion-1 <nbsp/>noX</term>

Given a string, compute recursively a new string where all the <pf>'x'</pf> chars have been removed.

\ttfamily
noX("xaxb") <m>\rightarrow</m> "ab" 

noX("abc") <m>\rightarrow</m> "abc" 

noX("xx") <m>\rightarrow</m> ""
</blockquote>
<p>
When solving recursive problems, it helps to think about the base case first.
The base case is the easiest version of the problem; for <pf>noX</pf>, it's the empty string.
If the argument is an empty string, there are no <pf>x</pf>'s to be removed:
</p>

<program>
<xi:include href="../../programs/recursive-functions/codingbat-problems-1.cpp" parse="text"/>
</program>

<p>
Next comes the more difficult part.
To solve a problem recursively, you need to think of a simpler instance of the same problem.
For <pf>noX</pf>, it's removing all the <pf>x</pf>'s from a shorter string.
</p>

<p>
So let's split the string into two parts, the first letter and the rest:
</p>

<program>
<xi:include href="../../programs/recursive-functions/codingbat-problems-2.cpp" parse="text"/>
</program>

<p>
Now we can make a recursive call to remove the <pf>x</pf>'s from <pf>rest</pf>:
</p>

<program>
<xi:include href="../../programs/recursive-functions/codingbat-problems-3.cpp" parse="text"/>
</program>

<p>
If <pf>first</pf> happens to be an <pf>x</pf>, we're done; we just have to return <pf>recurse</pf>.
Otherwise, we have to concatenate <pf>first</pf> and <pf>recurse</pf>.
Here's the <pf>if</pf> statement we need:
</p>

<program>
<xi:include href="../../programs/recursive-functions/codingbat-problems-4.cpp" parse="text"/>
</program>

<p>
You can run this solution on CodingBat by pasting these snippets into the provided function definition.
</p>

<p>
The second problem is available at <url href="https://codingbat.com/prob/p135988"/>:
</p>
<blockquote>
<term>Recursion-1 <nbsp/>array11</term>

Given an array of ints, compute recursively the number of times that the value 11 appears in the array.

\ttfamily
array11([1, 2, 11], 0) <m>\rightarrow</m> 1 

array11([11, 11], 0) <m>\rightarrow</m> 2 

array11([1, 2, 3, 4], 0) <m>\rightarrow</m> 0
</blockquote>
<p>
This problem uses the convention of passing the index as an argument.
So the base case is when we've reached the end of the array.
At that point, we know there are no more <pf>11</pf>s:
</p>

<program>
<xi:include href="../../programs/recursive-functions/codingbat-problems-5.cpp" parse="text"/>
</program>

<p>
Next we look at the current number (based on the given index), and check if it's an <pf>11</pf>.
After that, we can recursively check the rest of the array.
Similar to the <pf>noX</pf> problem, we look at only one integer per function call:
</p>

<program>
<xi:include href="../../programs/recursive-functions/codingbat-problems-6.cpp" parse="text"/>
</program>

<p>
Again, you can run this solutions on CodingBat by pasting the snippets into the function definition.
</p>

<p>
    <idx><h>Java Tutor</h></idx>
To see how these solutions actually work, you might find it helpful to step through them with a debugger (see <xref ref="debugger">Appendix</xref>) or Java Tutor (<url href="https://thinkjava.org/javatutor"/>).
Then try solving other CodingBat problems on your own.
</p>

<p>
Learning to think recursively is an important part of learning to think like a computer scientist.
Many algorithms can be written concisely with recursive functions that perform computations on the way down, on the way up, or both.
</p>
</section>
