<section xml:id="recursive-functions_leap-faith" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The Leap of Faith</title>
<p>
    <idx><h>leap of faith</h></idx>
Following the flow of execution is one way to read programs, but it can quickly become overwhelming.
Another way to understand recursion is the <term>leap of faith</term>:
when you come to a function invocation, instead of following the flow of execution, you <term>assume</term> that the function works correctly and returns the appropriate value.
</p>

<p>
In fact, you are already practicing this leap of faith when you use functions in the Java library.
When you invoke <c>Math.cos</c> or <c>System.out.println</c>, you don't think about the implementations of those functions.
You just assume that they work properly.
</p>

<p>
The same is true of other functions.
For example, consider the function from <xref ref="boolmeth">Section</xref> that determines whether an integer has only one digit:
</p>

<program xml:id="recursive-functions_leap-faith-1">
<xi:include href="../../programs/recursive-functions/leap-faith-1.cpp" parse="text"/>
</program>

<p>
Once you convince yourself that this function is correct<mdash/>by examining and testing the code<mdash/>you can just use the function without ever looking at the implementation again.
</p>

<p>
Recursive functions are no different.
When you get to a recursive call, don't think about the flow of execution.
Instead, <term>assume</term> that the recursive call produces the desired result.
</p>

<p>
For example, <q>Assuming that I can find the factorial of <m>n-1</m>, can I compute the factorial of <m>n</m>?</q>
Yes you can, by multiplying by <m>n</m>.
Here's an implementation of <c>factorial</c> with the temporary variables removed:
</p>

<program xml:id="recursive-functions_leap-faith-2">
<xi:include href="../../programs/recursive-functions/leap-faith-2.cpp" parse="text"/>
</program>

<p>
Notice how similar this version is to the original mathematical definition:
<md>
  <mrow>  \amp \amp   0! = 1</mrow>
  <mrow>  \amp \amp   n! = n \cdot(n-1)!</mrow>
</md>
</p>

<p>
Of course, it is strange to assume that the function works correctly when you have not finished writing it.
But that's why it's called a leap of faith! <idx><h>fibonacci</h></idx>
Another common recursively defined mathematical function is the Fibonacci sequence, which has the following definition:
<md>
  <mrow>  \amp \amp  fibonacci(1) = 1</mrow>
  <mrow>  \amp \amp  fibonacci(2) = 1</mrow>
  <mrow>  \amp \amp  fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)</mrow>
</md>
</p>

<p>
Notice that each Fibonacci number is the sum of the two preceding Fibonacci numbers.
Translated into Java, this function is as follows:
</p>

<program xml:id="recursive-functions_leap-faith-3">
<xi:include href="../../programs/recursive-functions/leap-faith-3.cpp" parse="text"/>
</program>

<p>
If you try to follow the flow of execution here, even for small values of <c>n</c>, your head will explode.
But if we take a leap of faith and assume that the two recursive invocations work correctly, then it is clear, looking at the definition, that our implementation is correct.
</p>
</section>
