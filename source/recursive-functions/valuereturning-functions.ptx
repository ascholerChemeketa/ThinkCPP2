<section xml:id="recursive-functions_valuereturning-functions" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Value-Returning functions</title>
<p>
To give you an idea of what you can do with the tools you have learned, let's look at functions that evaluate recursively defined mathematical functions.
</p>

<p>
A recursive definition is similar to a <q>circular</q> definition, in the sense that the definition refers to the thing being defined.
Of course, a truly circular definition is not very useful:
</p>
<blockquote>
<term>recursive:</term> 

An adjective used to describe a function that is recursive.
</blockquote>
<p>
    <idx><h>recursion</h></idx>
If you saw that definition in the dictionary, you might be annoyed.
Then again, if you search for <q>recursion</q> on Google, it displays <q>Did you mean: recursion</q> as an inside joke.
People fall for that link all the time.
</p>

<p>
    <idx><h>factorial</h></idx>
Many mathematical functions are defined recursively, because that is often the simplest way.
For example, the <term>factorial</term> of an integer <m>n</m>, which is written <m>n!</m>, is defined like this:
<md>
  <mrow>  \amp \amp   0! = 1</mrow>
  <mrow>  \amp \amp   n! = n \cdot(n-1)!</mrow>
</md>
</p>

<p>
Don't confuse the mathematical symbol <m>!</m>, which means <term>factorial</term>, with the Java operator <pf>!</pf>, which means <term>not</term>.
This definition says that <pf>factorial(0)</pf> is <pf>1</pf>, and <pf>factorial(n)</pf> is <pf>n * factorial(n - 1)</pf>.
</p>

<p>
So <pf>factorial(3)</pf> is <pf>3 * factorial(2)</pf>; <pf>factorial(2)</pf> is <pf>2 * factorial(1)</pf>; <pf>factorial(1)</pf> is <pf>1 * factorial(0)</pf>; and <pf>factorial(0)</pf> is <pf>1</pf>.
Putting it all together, we get <pf>3 * 2 * 1 * 1</pf>, which is 6.
</p>

<p>
If you can formulate a recursive definition of something, you can easily write a Java function to evaluate it.
The first step is to decide what the parameters and return type are.
Since <pf>factorial</pf> is defined for integers, the function takes an <pf>int</pf> as a parameter and returns an <pf>int</pf>:
</p>

<program xml:id="recursive-functions_valuereturning-functions-1">
<xi:include href="../../programs/recursive-functions/valuereturning-functions-1.cpp" parse="text"/>
</program>

<p>
Next, we think about the base case.
If the argument happens to be 0, we return 1:
</p>

<program xml:id="recursive-functions_valuereturning-functions-2">
<xi:include href="../../programs/recursive-functions/valuereturning-functions-2.cpp" parse="text"/>
</program>

<p>
Otherwise, and this is the interesting part, we have to make a recursive call to find the factorial of <m>n-1</m>, and then multiply it by <m>n</m>:
</p>

<program xml:id="recursive-functions_valuereturning-functions-3">
<xi:include href="../../programs/recursive-functions/valuereturning-functions-3.cpp" parse="text"/>
</program>

<p>
To illustrate what is happening, we'll use the temporary variables <pf>recurse</pf> and <pf>result</pf>.
In each function call, <pf>recurse</pf> stores the factorial of <m>n - 1</m>, and <pf>result</pf> stores the factorial of <m>n</m>.
</p>

<p>
The flow of execution for this program is similar to <pf>countdown</pf> from <xref ref="recursion">Section</xref>.
If we invoke <pf>factorial</pf> with the value <pf>3</pf>:
</p>
<blockquote>
Since 3 is not 0, we skip the first branch and calculate the factorial of <m>n-1</m>...
<blockquote>
Since 2 is not 0, we skip the first branch and calculate the factorial of <m>n-1</m>...
<blockquote>
Since 1 is not 0, we skip the first branch and calculate the factorial of <m>n-1</m>...
<blockquote>
Since 0 <term>is</term> 0, we take the first branch and return the value 1 immediately.
</blockquote>
The return value (1) gets multiplied by <pf>n</pf>, which is 1, and the result is returned.
</blockquote>
The return value (1) gets multiplied by <pf>n</pf>, which is 2, and the result is returned.
</blockquote>
The return value (2) gets multiplied by <pf>n</pf>, which is 3, and the result, 6, is returned to whatever invoked <pf>factorial(3)</pf>.
</blockquote>
<p>
    <idx><h>stack diagram</h></idx>
    <idx><h>diagram</h><h>stack</h></idx>
<xref ref="fig_stack3">Figure</xref> shows what the stack diagram looks like for this sequence of function invocations.
The return values are shown being passed up the stack.
Notice that <pf>recurse</pf> and <pf>result</pf> do not exist in the last frame, because when <pf>n == 0</pf>, the code that declares them does not execute.
</p>
<figure xml:id="fig_stack3" >
<caption>Stack diagram for the <pf>factorial</pf> function.</caption>
<image width="73%" source="images/stack3.png" />
</figure>
</section>
