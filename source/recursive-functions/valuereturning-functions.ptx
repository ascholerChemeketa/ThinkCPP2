<section xml:id="recursive-functions_valuereturning-functions"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Value-Returning functions</title>

  <p>Now let's consider a more complicated situation<mdash/>a recursive function that returns a value.</p>

  <p>
    <idx>
      <h>factorial</h>
    </idx> Many mathematical functions are defined recursively, because that
    is often the simplest way. For example, the <term>factorial</term> of an integer <m>n</m>, which
    is written <m>n!</m>, is defined like this: <md>
      <mrow> 0! = \amp 1</mrow>
      <mrow> n! = \amp n \cdot(n-1)!</mrow>
    </md>
  </p>

  <p>Don't confuse the mathematical symbol <m>!</m>, which means <term>factorial</term>, with the
    C++ operator <pf>!</pf>, which means <term>not</term>. This definition says that <pf>factorial(0)</pf> is <pf>1</pf>,
    and <pf>factorial(n)</pf> is <pf>n * factorial(n - 1)</pf>. </p>

  <p>It is trivial to turn that into a recursive function. The two parts of the definition are the base case and the recursive case:</p>

  <program label="recursive-functions_valuereturning-functions-program-1"
           interactive="activecode">
<xi:include href="../../programs/recursive-functions/valuereturning-functions-1.cpp" parse="text"/>
</program>
    
  <p>Why is the answer 120? Well...
    <ul>
      <li><pf>factorial(5)</pf> is <pf>5 * factorial(4)</pf></li>
      <li><pf>factorial(4)</pf> is <pf>4 * factorial(3)</pf></li>
      <li><pf>factorial(3)</pf> is <pf>3 * factorial(2)</pf></li>
      <li><pf>factorial(2)</pf> is <pf>2 * factorial(1)</pf></li>
      <li><pf>factorial(1)</pf> is <pf>1 * factorial(0)</pf></li>
      <li><pf>factorial(0)</pf> is <pf>1</pf></li>
    </ul>
  </p>

  <p>If we use those rules to keep expanding `factorial(5) it looks like:
<ul>
  <li><pf>factorial(5)</pf></li>
  <li><pf>(5 * factorial(4))</pf></li>
  <li><pf>(5 * (4 * factorial(3)))</pf></li>
  <li><pf>(5 * (4 * (3 * factorial(2))))</pf></li>
  <li><pf>(5 * (4 * (3 * (2 * factorial(1)))))</pf></li>
  <li><pf>(5 * (4 * (3 * (2 * (1 * factorial(0))))))</pf></li>
  <li><pf>(5 * (4 * (3 * (2 * (1 * (1))))))</pf></li>
</ul>
Once we there are no more <pf>factorial</pf> calls, we can evaluate the expression and get 120.
  </p>

  <p>To actually see this play out in the code, it can help to break up the steps of the recursive case. This version of <pf>factorial</pf> does the same math, but prints more information along the way. </p>

  <program label="recursive-functions_valuereturning-functions-program-2"
  interactive="codelens">
<xi:include href="../../programs/recursive-functions/valuereturning-functions-2.cpp" parse="text"/>
</program>

 <p>Notice that as you run the code, you get a chance to see the values being returned at each step of the recursion.</p>

  <insight><p>It is easier to debug recursion if we store the value that is returned from the recursive call, calculate and store the answer for the current call, and then return the result.  That way we can use a debugger or print statements to view how the result is being built up level by level.</p>
  <p>The original version of <pf>factorial</pf>, which did <pf>return n * factorial(n - 1);</pf>, gave us no chance to see what came back from the call <pf>factorial(n - 1)</pf> or what value would be returned.</p></insight>

  <p>Below is a stack diagram that shows how the value is built up over the recursive calls. This stack diagram cheats a little. Instead of showing the stack at a particular point in time, it shows the final state of each stack frame all at the same time. It also shows what is being returned from one level to the next.</p>

  <figure>
    <caption>Stack diagram for the <pf>factorial</pf> program.</caption>
    <image width="40%"
           source="images/recursion-stack-returns.png"
           alt="There are 4 stack frame boxes for the countdown function. They have different values of n, from 3 to 0."/>
  </figure>


<exercise label="recursive-functions_valuereturning-functions-ex-1"
  numbered="yes"
  adaptive="yes"
  indentation="hide">
  <statement>
  <p>Construct the function <pf>sumFrom(int start, int end)</pf>. It should return the sum of all integers from <pf>start</pf> to <pf>end</pf> (inclusive). If <pf>start</pf> is greater than <pf>end</pf>, it should return 0.</p>
  <p>Each call will be responsible for the current <pf>start</pf> value. Recursion will change the <pf>start</pf>.</p>
  </statement>
  <blocks>
    <block order="2">
        <choice correct="yes">
          <cline><![CDATA[int sumFrom(int start, int end) {]]></cline>
        </choice>
        <choice>
          <cline></cline>
        </choice>
    </block>
    <block order="9">
        <choice correct="yes">
          <cline><![CDATA[    if (start > end) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[    if (start == end) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[    if (start == 0) {]]></cline>
        </choice>
    </block>
    <block order="3">
        <choice correct="yes">
          <cline><![CDATA[        return 0;]]></cline>
          <cline><![CDATA[    } else {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[        return end;]]></cline>
          <cline><![CDATA[    } else {]]></cline>
        </choice>
    </block>
    <block order="7">
        <choice correct="yes">
          <cline><![CDATA[        int rest = sumFrom(start + 1, end - 1);]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[        int rest = sumFrom(start, end);]]></cline>
        </choice>
    </block>
    <block order="6">
        <choice correct="yes">
          <cline><![CDATA[        int result = start + rest;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[        int result = end + rest;]]></cline>
        </choice>
    </block>
    <block order="8">
        <choice correct="yes">
          <cline><![CDATA[        return result;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[        return rest;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
    </block>
    <block order="5">
        <choice correct="yes">
          <cline><![CDATA[}]]></cline>
        </choice>
    </block>
  </blocks>
</exercise>



<exercise label="recursive-functions_valuereturning-functions-ex-2"
  numbered="yes"
  adaptive="yes"
  indentation="hide">
  <statement>
  <p>Build another version of the function <pf>sumFrom(int start, int end)</pf>. It should return the sum of all integers from <pf>start</pf> to <pf>end</pf> (inclusive). If <pf>start</pf> is greater than <pf>end</pf>, it should return 0.</p>
  <p>This version will have two base cases. One for when <pf>start</pf> is equal to <pf>end</pf>, and another for when <pf>start</pf> is greater than <pf>end</pf>.</p>
  <p>Each call should be responsible for the current <pf>end</pf> value. Recursion will change the <pf>end</pf>.</p>
  </statement>
  <blocks>
    <block order="2">
        <choice correct="yes">
          <cline><![CDATA[int sumFrom(int start, int end) {]]></cline>
        </choice>
        <choice>
          <cline></cline>
        </choice>
    </block>
    <block order="3">
        <choice correct="yes">
          <cline><![CDATA[    if (start == end) {]]></cline>
          <cline><![CDATA[        return end;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[    if (start == end) {]]></cline>
          <cline><![CDATA[        return 0;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
    </block>
    <block order="4">
        <choice correct="yes">
          <cline><![CDATA[    else if (start > end) {]]></cline>
          <cline><![CDATA[        return 0;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[    else if (start > end) {]]></cline>
          <cline><![CDATA[        return end;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
    </block>
    <block order="7">
        <choice correct="yes">
          <cline><![CDATA[    else {]]></cline>
          <cline><![CDATA[        int rest = sumFrom(start, end - 1);]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[    else {]]></cline>
          <cline><![CDATA[        int rest = sumFrom(start + 1, end);]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[    else {]]></cline>
          <cline><![CDATA[        int rest = sumFrom(start + 1, end - 1);]]></cline>
        </choice>
    </block>
    <block order="6">
        <choice correct="yes">
          <cline><![CDATA[        int result = end + rest;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[        int result = start + rest;]]></cline>
        </choice>
    </block>
    <block order="8">
        <choice correct="yes">
          <cline><![CDATA[        return result;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[        return rest;]]></cline>
          <cline><![CDATA[    }]]></cline>
        </choice>
    </block>
    <block order="5">
        <choice correct="yes">
          <cline><![CDATA[}]]></cline>
        </choice>
    </block>
  </blocks>
</exercise>

</section>