<section xml:id="recursive-functions_recursive-binary-function" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Recursive Binary function</title>
<p>
Now, to display a number in binary, we can combine the algorithm from the previous section and the <q>count up</q> pattern from <xref ref="countup">Section</xref>.
</p>

<p>
Here is a recursive function that displays any positive integer in binary:
</p>

<program xml:id="recursive-functions_recursive-binary-function-1">
<xi:include href="../../programs/recursive-functions/recursive-binary-function-1.cpp" parse="text"/>
</program>

<p>
If <pf>value</pf> is <pf>0</pf>, <pf>displayBinary</pf> does nothing (that's the base case).
If the argument is positive, the function divides it by 2 and calls <pf>displayBinary</pf> recursively.
When the recursive call returns, the function displays one digit of the result and returns (again).
<xref ref="fig_stack4">Figure</xref> illustrates this process.
</p>

<p>
    <idx><h>stack diagram</h></idx>
    <idx><h>diagram</h><h>stack</h></idx>
</p>
<figure xml:id="fig_stack4" >
<caption>Stack diagram for the <pf>displayBinary</pf> function.</caption>
<image width="92.5%" source="images/stack4.png" />
</figure>
<p>
The leftmost digit is near the bottom of the stack, so it gets displayed first.
The rightmost digit, near the top of the stack, gets displayed last.
After invoking <pf>displayBinary</pf>, we use <pf>println</pf> to complete the output:
</p>

<program xml:id="recursive-functions_recursive-binary-function-2" interactive="activecode">
<xi:include href="../../programs/recursive-functions/recursive-binary-function-2.cpp" parse="text"/>
</program>

</section>
