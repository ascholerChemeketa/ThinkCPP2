<section xml:id="recursive-functions_recursive-stack-diagrams"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Recursive Stack Diagrams</title>
  <p>
    <idx>
      <h>stack diagram</h>
      <h>recursion</h>
    </idx> Because recursive functions call themselves, stack diagrams that involve recursive functions will show the same function multiple times. Here is the stack diagram Codelens produces for the <pf>countdown</pf> function:</p>

  <figure>
    <caption>Stack diagram for the <pf>countdown</pf> program.</caption>
    <image width="25%"
           source="images/recursion-stack-1.png"
           >
      <shortdescription>There are 4 stack frame boxes for the countdown function. They have different values of n, from 3 to 0.</shortdescription>
    </image>
  </figure>

  <p>The frame for <pf>main</pf> is empty because <pf>main</pf> does not have any variables. The next frame down is the original call to <pf>countdown</pf> and in it, <pf>n</pf> has the value 3. Each additional call to <pf>countdown</pf> creates a new stack frame with a new value of <pf>n</pf>. As we return from those function calls, the stack frames will be removed one by one.</p>

  <p>It can sometimes help to think of each instance of the recursive function as a separate worker (even though it is more accurate to think of one worker managing multiple tasks). Someone is given the task of doing <pf>countdown(3)</pf>. They say <q>hold on a second, let me ask someone to help out</q> and ask another worker to take care of <pf>countdown(2)</pf> and then wait for that worker to report that they are done. Once the worker in charge of 2 tells the 3 worker <q>all done with 2</q>, the 3 worker can then proceed to finish their task. The stack diagram shows a series of workers all waiting to hear from the next worker that it is safe to continue.</p>

  <exercise label="recursive-functions_recursive-stack-diagrams-ex-1">
    <statement><p>Run the codelens and answer the questions it asks you.</p></statement>
  <program interactive="codelens">
    <code>
<xi:include href="../../programs/recursive-functions/recursive-stack-diagrams-1.cpp" parse="text"/>
</code>
    <checkpoint line="15" answer="1">
      <prompt>What will be the value of n in the first stack frame for <pf>countdown</pf>?</prompt>
    </checkpoint>
    <checkpoint line="7" answer="5">
      <prompt>How many stack frames are there for <pf>countdown</pf>?</prompt>
    </checkpoint>
</program>
</exercise>

</section>