<section xml:id="recursive-functions_recursive-void-functions" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Recursive Void functions</title>
<p>
    <idx><h>countdown</h></idx>
Consider the following example:
</p>

<program xml:id="recursive-functions_recursive-void-functions-1">
<xi:include href="../../programs/recursive-functions/recursive-void-functions-1.cpp" parse="text"/>
</program>

<p>
The name of the function is <pf>countdown</pf>; it takes a single integer as a parameter.
If the parameter is 0, it displays the word <pf>Blastoff!</pf>.
Otherwise, it displays the number and then invokes itself, passing <pf>n - 1</pf> as the argument.
</p>

<p>
What happens if we invoke <pf>countdown(3)</pf> from <pf>main</pf>?
</p>
<blockquote>
The execution of <pf>countdown</pf> begins with <pf>n == 3</pf>, and since <pf>n</pf> is not 0, it displays the value 3, and then invokes itself...
<blockquote>
The execution of <pf>countdown</pf> begins with <pf>n == 2</pf>, and since <pf>n</pf> is not 0, it displays the value 2, and then invokes itself...
<blockquote>
The execution of <pf>countdown</pf> begins with <pf>n == 1</pf>, and since <pf>n</pf> is not 0, it displays the value 1, and then invokes itself...
<blockquote>
The execution of <pf>countdown</pf> begins with <pf>n == 0</pf>, and since <pf>n</pf> is 0, it displays the word <pf>Blastoff!</pf><nbsp/>and then returns.
</blockquote>
The <pf>countdown</pf> that got <pf>n == 1</pf> returns.
</blockquote>
The <pf>countdown</pf> that got <pf>n == 2</pf> returns.
</blockquote>
The <pf>countdown</pf> that got <pf>n == 3</pf> returns.
</blockquote>
<p>
And then you're back in <pf>main</pf>.
So the total output looks like this:
</p>

<console>
<output>
3
2
1
Blastoff!
</output>
</console>

<p>
As a second example, we'll rewrite the functions <pf>newLine</pf> and <pf>threeLine</pf> from <xref ref="adding_functions">Section</xref>.
Here they are again:
</p>

<program xml:id="recursive-functions_recursive-void-functions-2">
<xi:include href="../../programs/recursive-functions/recursive-void-functions-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>newline</h></idx>
Although these functions work, they would not help if we wanted to display two newlines, or maybe 100.
A more general alternative would be the following:
</p>

<program xml:id="recursive-functions_recursive-void-functions-3">
<xi:include href="../../programs/recursive-functions/recursive-void-functions-3.cpp" parse="text"/>
</program>

<p>
This function takes an integer, <pf>n</pf>, as a parameter and displays <pf>n</pf> newlines.
The structure is similar to <pf>countdown</pf>.
As long as <m>n</m> is greater than 0, it displays a newline and then invokes itself to display <m>(n-1)</m> additional newlines.
The total number of newlines is <m>1 + (n - 1)</m>, which is just what we wanted: <m>n</m>.
</p>
</section>
