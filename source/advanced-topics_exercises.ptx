<section xml:id="advanced-topics_exercises">
<title>Exercises</title>
<p>
The code for this chapter is in the <em>ch17</em> directory of <em>ThinkJavaCode2</em>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>

<p>
The following exercises give you a chance to practice using the features in this chapter by extending the example code.
</p>
<exercise>
<statement>
<p>
The <c>Polygon</c> class does not provide a <c>toString</c> method; it inherits the default <c>toString</c> from <c>java.lang.Object</c>, which includes only the class's name and memory location.
Write a more useful <c>toString</c> method for <c>DrawablePolygon</c> that includes its <m>(x, y)</m> points.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Write a class <c>MovingPolygon</c> that extends <c>RegularPolygon</c> and implements <c>Actor</c>.
It should have instance variables <c>posx</c> and <c>posy</c> that specify its position, and <c>dx</c> and <c>dy</c> that specify its velocity (and direction).
During each time step, it should update its position.
If it gets to the edge of the <c>Drawing</c>, it should reverse direction by changing the sign of <c>dx</c> or <c>dy</c>.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Modify the <c>VideoGame</c> class so it displays a <c>Sprite</c> and a <c>MovingPolygon</c> (from the previous exercise).
Add code that detects collisions between <c>Actor</c> objects in the same <c>Drawing</c>, and invoke a method on both objects when they collide.
</p>

<p>
<em>Hint:</em> You might want to add a method to the <c>Actor</c> interface, guaranteeing that all <c>Actor</c> objects know how to handle collisions.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Java provides other event listeners that you can implement to make your programs interactive.
For example, the interfaces <c>MouseListener</c>, <c>MouseMotionListener</c>, and <c>MouseWheelListener</c> allow you to respond to mouse input.
Use the <c>MouseListener</c> interface to implement an <c>Actor</c> that can respond to mouse clicks.
</p>
</statement>
</exercise>
<p>
\appendix
</p>
</section>
