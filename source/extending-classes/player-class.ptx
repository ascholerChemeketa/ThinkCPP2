<section xml:id="extending-classes_player-class" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The Player Class</title>
<p>
The <pf>Deck</pf> and <pf>Hand</pf> classes we have defined so far could be used for any card game; we have not yet implemented any of the rules specific to Crazy Eights.
And that's probably a good thing, since it makes it easy to reuse these classes if we want to make another game in the future.
</p>

<p>
    <idx><h>state</h></idx>
But now it's time to implement the rules.
We'll use two classes: <pf>Player</pf>, which encapsulates player strategy, and <pf>Eights</pf>, which creates and maintains the state of the game.
Here is the beginning of the <pf>Player</pf> definition:
</p>

<p>
    <idx><h>Player</h></idx>
</p>

<program xml:id="extending-classes_player-class-1">
<xi:include href="../../programs/extending-classes/player-class-1.cpp" parse="text"/>
</program>

<p>
A <pf>Player</pf> has two <pf>private</pf> attributes: a name and a hand.
The constructor takes the player's name as a string and saves it in an instance variable.
In this example, we have to use <pf>this</pf> to distinguish between the instance variable and the parameter with the same name.
</p>

<p>
The primary function that <pf>Player</pf> provides is <pf>play</pf>, which decides which card to discard during each turn:
</p>

<program xml:id="extending-classes_player-class-2">
<xi:include href="../../programs/extending-classes/player-class-2.cpp" parse="text"/>
</program>

<p>
The first parameter is a reference to the <pf>Eights</pf> object that encapsulates the state of the game (coming up in the next section).
The second parameter, <pf>prev</pf>, is the card on top of the discard pile.
</p>

<p>
<pf>play</pf> invokes two helper functions: <pf>searchForMatch</pf> and <pf>drawForMatch</pf>.
Since we have not written them yet, this is an example of top-down design.
</p>

<p>
Here's <pf>searchForMatch</pf>, which looks in the player's hand for a card that matches the previously played card:
</p>

<program xml:id="extending-classes_player-class-3">
<xi:include href="../../programs/extending-classes/player-class-3.cpp" parse="text"/>
</program>

<p>
The strategy is pretty simple: the <pf>for</pf> loop searches for the first card that's legal to play and returns it.
If there are no cards that match, it returns <pf>null</pf>.
In that case, we have to draw cards until we get a match, which is what <pf>drawForMatch</pf> does:
</p>

<program xml:id="extending-classes_player-class-4">
<xi:include href="../../programs/extending-classes/player-class-4.cpp" parse="text"/>
</program>

<p>
The <pf>while</pf> loop runs until it finds a match (we'll assume for now that it always finds one).
The loop uses the <pf>Eights</pf> object to draw a card.
If it matches, <pf>drawForMatch</pf> returns the card.
Otherwise it adds the card to the player's hand and repeats.
</p>

<p>
Both <pf>searchForMatch</pf> and <pf>drawForMatch</pf> use <pf>cardMatches</pf>, which is a static function, also defined in <pf>Player</pf>.
This function is a straightforward translation of the rules of the game:
</p>

<program xml:id="extending-classes_player-class-5">
<xi:include href="../../programs/extending-classes/player-class-5.cpp" parse="text"/>
</program>

<p>
Finally, <pf>Player</pf> provides a <pf>score</pf> function, which computes penalty points for cards left in a player's hand at the end of the game.
</p>
</section>
