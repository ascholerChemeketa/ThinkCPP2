<section xml:id="extending-classes_eights-class" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The Eights Class</title>
<p>
    <idx><h>top-down design</h></idx>
In <xref ref="shuffle">Section</xref>, we introduced top-down design. In this way of developing programs, we identify high-level goals, like shuffling a deck, and break them into smaller problems, like choosing a random element or swapping two elements.
</p>

<p>
    <idx><h>bottom-up design</h></idx>
    <idx><h>design process</h></idx>
In this section, we present <term>bottom-up design</term>, which goes the other way around: first we identify simple pieces we need and then we assemble them into more-complex algorithms.
</p>

<p>
Looking at the rules of Crazy Eights, we can identify some of the functions we'll need:
<ul>
<li><p>Create the deck, the players, and the discard and draw piles. Deal the cards and set up the game. (<pf>Eights</pf> constructor)</p></li>
<li><p>Check whether the game is over. (<pf>isDone</pf>)</p></li>
<li><p>If the draw pile is empty, shuffle the discard pile and move the cards into the draw pile. (<pf>reshuffle</pf>)</p></li>
<li><p>Draw a card, reshuffling the discard pile if necessary. (<pf>drawCard</pf>)</p></li>
<li><p>Keep track of whose turn it is, and switch from one player to the next. (<pf>nextPlayer</pf>)</p></li>
<li><p>Display the state of the game, and wait for the user before running the next turn. (<pf>displayState</pf>)</p></li>
</ul>
</p>

<p>
Now we can start implementing the pieces.
Here is the beginning of the class definition for <pf>Eights</pf>, which encapsulates the state of the game:
</p>

<p>
    <idx><h>Eights</h></idx>
</p>

<program xml:id="extending-classes_eights-class-1">
<xi:include href="../../programs/extending-classes/eights-class-1.cpp" parse="text"/>
</program>

<p>
In this version, there are always two players.
One of the exercises at the end of the chapter asks you to modify this code to handle more players.
The <pf>Eights</pf> class also includes a draw pile, a discard pile, and a <pf>Scanner</pf>, which we will use to prompt the user after each turn.
</p>

<p>
The constructor for <pf>Eights</pf> initializes the instance variables and deals the cards, similar to <xref ref="dealing">Section</xref>.
The next piece we'll need is a function that checks whether the game is over.
If either hand is empty, we're done:
</p>

<program xml:id="extending-classes_eights-class-2">
<xi:include href="../../programs/extending-classes/eights-class-2.cpp" parse="text"/>
</program>

<p>
When the draw pile is empty, we have to shuffle the discard pile.
Here is a function for that:
</p>

<program xml:id="extending-classes_eights-class-3">
<xi:include href="../../programs/extending-classes/eights-class-3.cpp" parse="text"/>
</program>

<p>
The first line saves the top card from <pf>discardPile</pf>.
The next line transfers the rest of the cards to <pf>drawPile</pf>.
Then we put the saved card back into <pf>discardPile</pf> and shuffle <pf>drawPile</pf>.
We can use <pf>reshuffle</pf> as part of the <pf>draw</pf> function:
</p>

<program xml:id="extending-classes_eights-class-4">
<xi:include href="../../programs/extending-classes/eights-class-4.cpp" parse="text"/>
</program>

<p>
The <pf>nextPlayer</pf> function takes the current player as a parameter and returns the player who should go next:
</p>

<program xml:id="extending-classes_eights-class-5">
<xi:include href="../../programs/extending-classes/eights-class-5.cpp" parse="text"/>
</program>

<p>
The last function from our bottom-up design is <pf>displayState</pf>.
It displays the hand of each player, the contents of the discard pile, and the number of cards in the draw pile.
Finally, it waits for the user to press the <term>Enter</term> key:
</p>

<program xml:id="extending-classes_eights-class-6">
<xi:include href="../../programs/extending-classes/eights-class-6.cpp" parse="text"/>
</program>

<p>
Using these pieces, we can write <pf>takeTurn</pf>, which executes one player's turn.
It reads the top card off the discard pile and passes it to <pf>player.play</pf>, which you saw in the previous section.
The result is the card the player chose, which is added to the discard pile:
</p>

<program xml:id="extending-classes_eights-class-7">
<xi:include href="../../programs/extending-classes/eights-class-7.cpp" parse="text"/>
</program>

<p>
Finally, we use <pf>takeTurn</pf> and the other functions to write <pf>playGame</pf>:
</p>

<program xml:id="extending-classes_eights-class-8">
<xi:include href="../../programs/extending-classes/eights-class-8.cpp" parse="text"/>
</program>

<p>
Done!
The result of bottom-up design is similar to top-down: we have a high-level function that calls helper functions.
The difference is the development process we used to arrive at this solution.
</p>
</section>
