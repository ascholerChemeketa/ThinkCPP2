<section xml:id="extending-classes_exercises" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Exercises</title>
<p>
The code for this chapter is in the <term>ch14</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
Before you start the exercises, we recommend that you compile and run the examples.
</p>
<exercise>
<statement>
<p>
Design a better strategy for the <c>Player.play</c> function.
For example, if there are multiple cards you can play, and one of them is an 8, you might want to play the 8.
</p>

<p>
    <idx><h>override</h></idx>
Think of other ways you can minimize penalty points, such as playing the highest-ranking cards first.
Write a new class that extends <c>Player</c> and overrides <c>play</c> to implement your strategy.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
Write a loop that plays the game 100 times and keeps track of how many times each player wins.
If you implemented multiple strategies in the previous exercise, you can play them against each other to evaluate which one works best.
</p>

<p>
<term>Hint:</term> Design a <c>Genius</c> class that extends <c>Player</c> and overrides the <c>play</c> function, and then replace one of the players with a <c>Genius</c> object.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
One limitation of the program we wrote in this chapter is that it handles only two players.
Modify the <c>Eights</c> class to create an <c>ArrayList</c> of players, and modify <c>nextPlayer</c> to select the next player.
</p>
</statement>
</exercise>

<exercise>
<statement>
<p>
When we designed the program for this chapter, we tried to minimize the number of classes.
As a result, we ended up with a few awkward functions.
For example, <c>cardMatches</c> is a static function in <c>Player</c>, but it would be more natural if it were an instance function in <c>Card</c>.
</p>

<p>
The problem is that <c>Card</c> is supposed to be useful for any card game, not just Crazy Eights.
You can solve this problem by adding a new class, <c>EightsCard</c>, that extends <c>Card</c> and provides a function, <c>match</c>, that checks whether two cards match according to the rules of Crazy Eights.
</p>

<p>
At the same time, you could create a new class, <c>EightsHand</c>, that extends <c>Hand</c> and provides a function, <c>scoreHand</c>, that adds up the scores of the cards in the hand.
And while you're at it, you could add a function named <c>scoreCard</c> to <c>EightsCard</c>.
</p>

<p>
Whether or not you actually make these changes, draw a UML class diagram that shows this alternative object hierarchy.
</p>
</statement>
</exercise>
</section>
