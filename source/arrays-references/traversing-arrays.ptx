<section xml:id="arrays-references_traversing-arrays" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Traversing Arrays</title>
<p>
    <idx><h>traversal</h></idx>
Many computations can be implemented by looping through the elements of an array and performing an operation on each element.
Looping through the elements of an array is called a <term>traversal</term>:
</p>

<program xml:id="arrays-references_traversing-arrays-1">
<xi:include href="../../programs/arrays-references/traversing-arrays-1.cpp" parse="text"/>
</program>

<p>
This example traverses an array and squares each element.
At the end of the loop, the array has the values <c>{1, 4, 9, 16, 25}</c>.
</p>

<p>
    <idx><h>search</h></idx>
Another common pattern is a <term>search</term>, which involves traversing an array and <q>searching</q> for a particular element.
For example, the following function takes an array and a value, and it returns the index where the value appears:
</p>

<program xml:id="arrays-references_traversing-arrays-2">
<xi:include href="../../programs/arrays-references/traversing-arrays-2.cpp" parse="text"/>
</program>

<p>
If we find the target value in the array, we return its index immediately.
If the loop exits without finding the target, it returns <c>-1</c>, a special value chosen to indicate a failed search.
(This code is essentially what the <c>String.indexOf</c> function does.)
</p>

<p>
The following code searches an array for the value <c>1.23</c>, which is the third element.
Because array indexes start at 0, the output is <c>2</c>:
</p>

<program xml:id="arrays-references_traversing-arrays-3" interactive="activecode">
<xi:include href="../../programs/arrays-references/traversing-arrays-3.cpp" parse="text"/>
</program>

<p>
    <idx><h>reduce</h></idx>
Another common traversal is a <term>reduce</term> operation, which <q>reduces</q> an array of values down to a single value.
Examples include the sum or product of the elements, the minimum, and the maximum.
The following function takes an array and returns the sum of its elements:
</p>

<program xml:id="arrays-references_traversing-arrays-4">
<xi:include href="../../programs/arrays-references/traversing-arrays-4.cpp" parse="text"/>
</program>

<p>
    <idx><h>accumulator</h></idx>
Before the loop, we initialize <c>total</c> to <c>0</c>.
Each time through the loop, we update <c>total</c> by adding one element from the array.
At the end of the loop, <c>total</c> contains the sum of the elements.
A variable used this way is sometimes called an <term>accumulator</term>, because it <q>accumulates</q> the running total.
</p>
</section>
