<section xml:id="loops-strings_while-statement" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The while Statement</title>
<p>
<idx><h>while</h></idx>
<idx><h>loop</h><h>while</h></idx>
<idx><h>statement</h><h>while</h></idx>
Using a <c>while</c> statement, we can repeat the same code multiple times:
</p>

<program xml:id="loops-strings_while-statement-1">
<xi:include href="../programs/loops-strings_while-statement-1.cpp" parse="text"/>
</program>

<p>
Reading the code in English sounds like this: <q>Start with <c>n</c> set to 3.
While <c>n</c> is greater than 0, print the value of <c>n</c>, and reduce the value of <c>n</c> by 1.
When you get to 0, print Blastoff!</q>
</p>

<p>
The output is shown here:
</p>

<console>
<output>
3
2
1
Blastoff!
</output>
</console>

<p>
The flow of execution for a <c>while</c> statement is as follows:
<ol>
<li><p>Evaluate the condition in parentheses, yielding <c>true</c> or <c>false</c>.</p></li>
<li><p>If the condition is <c>false</c>, skip the following statements in braces.</p></li>
<li><p>If the condition is <c>true</c>, execute the statements and go back to step 1.</p></li>
</ol>
</p>

<p>
<idx><h>loop</h></idx>
This type of flow is called a <term>loop</term>, because the last step <q>loops back around</q> to the first.
<xref ref="fig_while">Figure</xref> shows this idea using a flowchart.
</p>
<figure xml:id="fig_while" >
<caption>Flow of execution for a <c>while</c> loop.</caption>
<image width="92.5%" source="external/images/while.png" />
</figure>
<p>
<idx><h>loop body</h></idx>
<idx><h>infinite loop</h></idx>
<idx><h>loop</h><h>infinite</h></idx>
The <term>body</term> of the loop should change the value of one or more variables so that, eventually, the condition becomes <c>false</c> and the loop terminates.
Otherwise, the loop will repeat forever, which is called an <term>infinite loop</term>:
</p>

<program xml:id="loops-strings_while-statement-2">
<xi:include href="../programs/loops-strings_while-statement-2.cpp" parse="text"/>
</program>

<p>
This example will print the number <c>3</c> forever, or at least until you terminate the program.
An endless source of amusement for computer scientists is the observation that the directions on shampoo, <q>Lather, rinse, repeat,</q> are an infinite loop.
</p>

<p>
In the first example, we can prove that the loop terminates when <c>n</c> is positive.
But in general, it is not so easy to tell whether a loop terminates.
For example, this loop continues until <c>n</c> is 1 (which makes the condition <c>false</c>):
</p>

<program xml:id="loops-strings_while-statement-3">
<xi:include href="../programs/loops-strings_while-statement-3.cpp" parse="text"/>
</program>

<p>
Each time through the loop, the program displays the value of <c>n</c> and then checks whether it is even or odd.
If it is even, the value of <c>n</c> is divided by 2.
If it is odd, the value is replaced by <m>3n+1</m>.
For example, if the starting value is 3, the resulting sequence is 3, 10, 5, 16, 8, 4, 2, 1.
</p>

<p>
Since <c>n</c> sometimes increases and sometimes decreases, there is no obvious proof that <c>n</c> will ever reach 1 and that the program will ever terminate.
For some values of <c>n</c>, such as the powers of two, we can prove that it terminates.
The previous example ends with such a sequence, starting when <c>n</c> is 16 (or <m>2^4</m>).
</p>

<p>
The hard question is whether this program terminates for <term>all</term> values of <c>n</c>.
So far, no one has been able to prove it <term>or</term> disprove it!
For more information, see \url{https://en.wikipedia.org/wiki/Collatz_conjecture}.
</p>
</section>
