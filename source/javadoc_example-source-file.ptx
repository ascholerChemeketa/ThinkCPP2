<section xml:id="javadoc_example-source-file" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Example Source File</title>
<p>
Now let's take a look at a more complete example.
The code for this section is in the <term>appb</term> directory of <term>ThinkJavaCode2</term>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
</p>

<p>
Professional-grade source files often begin with a copyright statement.
This text spans multiple lines, but it is not part of the documentation.
So we use a multiline comment (<c>/*</c>) rather than a documentation comment (<c>/**</c>).
Our example source file, <term>Convert.java</term>, includes the MIT License (\url{https://opensource.org/licenses/MIT}):
</p>

<p>
<idx><h>Convert.java</h></idx>
\begin{scriptsize}
</p>

<program xml:id="javadoc_example-source-file-1">
<xi:include href="../programs/javadoc_example-source-file-1.cpp" parse="text"/>
</program>

<p>
\end{scriptsize}
</p>

<p>
Import statements generally follow the copyright text.
After that, we can define the class itself and begin writing the documentation (<c>/**</c>):
</p>

<program xml:id="javadoc_example-source-file-2" interactive="activecode">
<xi:include href="../programs/javadoc_example-source-file-2.cpp" parse="text"/>
</program>

<p>
A common mistake that beginners make is to put <c>import</c> statements between the documentation and the <c>public class</c> line.
Doing so separates the documentation from the class itself.
To avoid this issue, always make the end of the comment (the \relax<c>*/</c>) <q>touch</q> the word <c>public</c>.
</p>

<p>
This class has two constants and three functions.
The constants are self-explanatory, so there is no need to write documentation for them:
</p>

<program xml:id="javadoc_example-source-file-3">
<xi:include href="../programs/javadoc_example-source-file-3.cpp" parse="text"/>
</program>

<p>
The functions, on the other hand, could use some explanation.
Each documentation comment includes a description, followed by a blank line, followed by a <c>@param</c> tag for each parameter, followed by a <c>@return</c> tag:
</p>

<program xml:id="javadoc_example-source-file-4">
<xi:include href="../programs/javadoc_example-source-file-4.cpp" parse="text"/>
</program>
  
<program xml:id="javadoc_example-source-file-5">
<xi:include href="../programs/javadoc_example-source-file-5.cpp" parse="text"/>
</program>

<p>
The <c>main</c> function has a similar documentation comment, except there is no <c>@return</c> tag since the function is <c>void</c>:
</p>

<program xml:id="javadoc_example-source-file-6" interactive="activecode">
<xi:include href="../programs/javadoc_example-source-file-6.cpp" parse="text"/>
</program>

<p>
Here are two ways you can run the Javadoc tool on this example program:
<ul>
<idx><h>command-line interface</h></idx>
<li><p>From the command line, go to the location for <term>Convert.java</term>.
The <c>-d</c> option of <c>javadoc</c> indicates where to generate the HTML files:


<console>
<output>
javadoc -d doc Convert.java
</output>
</console>
</p></li>
<li><p>From DrJava, click the <term>Javadoc</term> button on the toolbar.
The IDE will then prompt you for a location to generate the HTML files.</p></li>
</ul>
</p>

<p>
For more examples of what you can do with Javadoc comments, see the source code of any Java library class (e.g., <term>Scanner.java</term>).
<xref ref="src_zip">Section</xref> explains how to find the source files for the Java library on your computer.
</p>
</section>
