<section xml:id="javadoc_example-source-file">
<title>Example Source File</title>
<p>
Now let's take a look at a more complete example.
The code for this section is in the <em>appb</em> directory of <em>ThinkJavaCode2</em>.
See <xref ref="code">page</xref> for instructions on how to download the repository.
</p>

<p>
Professional-grade source files often begin with a copyright statement.
This text spans multiple lines, but it is not part of the documentation.
So we use a multiline comment (<c>/*</c>) rather than a documentation comment (<c>/**</c>).
Our example source file, <em>Convert.java</em>, includes the MIT License (\url{https://opensource.org/licenses/MIT}):
</p>

<p>
<idx><h>Convert.java</h></idx>
\begin{scriptsize}
</p>

<program>
/*
 * Copyright (c) 2019 Allen Downey and Chris Mayfield
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
</program>

<p>
\end{scriptsize}
</p>

<p>
Import statements generally follow the copyright text.
After that, we can define the class itself and begin writing the documentation (<c>/**</c>):
</p>

<program>
import java.util.Scanner;

/**
 * Methods for converting to/from the metric system.
 *
 * @author Allen Downey
 * @author Chris Mayfield
 * @version 6.1.5
 */
public class Convert {
</program>

<p>
A common mistake that beginners make is to put <c>import</c> statements between the documentation and the <c>public class</c> line.
Doing so separates the documentation from the class itself.
To avoid this issue, always make the end of the comment (the \relax<c>*/</c>) <q>touch</q> the word <c>public</c>.
</p>

<p>
This class has two constants and three methods.
The constants are self-explanatory, so there is no need to write documentation for them:
</p>

<program>
public static final double CM_PER_INCH = 2.54;

public static final int IN_PER_FOOT = 12;
</program>

<p>
The methods, on the other hand, could use some explanation.
Each documentation comment includes a description, followed by a blank line, followed by a <c>@param</c> tag for each parameter, followed by a <c>@return</c> tag:
</p>

<program>
/**
 * Converts a measurement in centimeters to inches.
 *
 * @param cm length in centimeters
 * @return length in inches
 */
public static double toImperial(double cm) {
    return cm / CM_PER_INCH;
}
</program>
  
<program>
/**
 * Converts a length in feet and inches to centimeters.
 *
 * @param feet how many feet
 * @param inches how many inches
 * @return length in centimeters
 */
public static double toMetric(int feet, int inches) {
    int total = feet * IN_PER_FOOT + inches;
    return total * CM_PER_INCH;
}
</program>

<p>
The <c>main</c> method has a similar documentation comment, except there is no <c>@return</c> tag since the method is <c>void</c>:
</p>

<program>
/**
 * Tests the conversion methods.
 *
 * @param args command-line arguments
 */
public static void main(String[] args) {
    double cm, result;
    int feet, inches;
    Scanner in = new Scanner(System.in);

    // test the Imperial conversion
    System.out.print("Exactly how many cm? ");
    cm = in.nextDouble();
    result = toImperial(cm);
    System.out.printf("That's %.2f inches\n", result);
    System.out.println();

    // test the Metric conversion
    System.out.print("Now how many feet? ");
    feet = in.nextInt();
    System.out.print("And how many inches? ");
    inches = in.nextInt();
    result = toMetric(feet, inches);
    System.out.printf("That's %.2f cm\n", result);
}
</program>

<p>
Here are two ways you can run the Javadoc tool on this example program:
<ul>
<idx><h>command-line interface</h></idx>
<li><p>From the command line, go to the location for <em>Convert.java</em>.
The <c>-d</c> option of <c>javadoc</c> indicates where to generate the HTML files:


<console>
<output>
javadoc -d doc Convert.java
</output>
</console>
</p></li>
<li><p>From DrJava, click the <em>Javadoc</em> button on the toolbar.
The IDE will then prompt you for a location to generate the HTML files.</p></li>
</ul>
</p>

<p>
For more examples of what you can do with Javadoc comments, see the source code of any Java library class (e.g., <em>Scanner.java</em>).
<xref ref="src_zip">Section</xref> explains how to find the source files for the Java library on your computer.
</p>
</section>
