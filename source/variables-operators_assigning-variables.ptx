<section xml:id="variables-operators_assigning-variables" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Assigning Variables</title>
<p>
<idx><h>assignment</h></idx>
<idx><h>= assignment operator</h></idx>
<idx><h>statement</h><h>assignment</h></idx>
Now that we have declared some variables, we can use them to store values.
We do that with an <em>assignment</em> statement:
</p>

<program xml:id="variables-operators_assigning-variables-1" interactive="activecode">
<xi:include href="../programs/variables-operators_assigning-variables-1.cpp" parse="text"/>
</program>

<p>
This example shows three assignments, and the comments illustrate different ways people sometimes talk about assignment statements.
The vocabulary can be confusing here, but the idea is straightforward:
<ul>
<li><p>When you declare a variable, you create a named storage location.</p></li>
<li><p>When you make an assignment to a variable, you update its value.</p></li>
</ul>
</p>

<p>
As a general rule, a variable has to have the same type as the value you assign to it.
For example, you cannot store a string in <c>minute</c> or an integer in <c>message</c>.
We will show some examples that seem to break this rule, but we'll get to that later.
</p>

<p>
A common source of confusion is that some strings <em>look</em> like integers, but they are not.
For example, <c>message</c> can contain the string <c>"123"</c>, which is made up of the characters <c>'1'</c>, <c>'2'</c>, and <c>'3'</c>.
But that is not the same thing as the integer <c>123</c>:
</p>

<program xml:id="variables-operators_assigning-variables-2" interactive="activecode">
<xi:include href="../programs/variables-operators_assigning-variables-2.cpp" parse="text"/>
</program>

<p>
<idx><h>initialize</h></idx>
Variables must be <em>initialized</em> (assigned for the first time) before they can be used.
You can declare a variable and then assign a value later, as in the previous example.
You can also declare and initialize on the same line:
</p>

<program xml:id="variables-operators_assigning-variables-3" interactive="activecode">
<xi:include href="../programs/variables-operators_assigning-variables-3.cpp" parse="text"/>
</program>

</section>
