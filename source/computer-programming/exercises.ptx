<exercises xml:id="computer-programming_exercises"
           xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Exercises</title>

  <introduction><p>At the end of each chapter, we include exercises you can do with the things you've learned. You
    can't learn to program only by reading about it; you have to practice.</p></introduction>

  <exercise label="VARS_mc1">
    <statement>
      <p>Take a look at the following program. How many lines of output will be produced?</p>
      <program>int main() {
  cout &lt;&lt; "The current time is: " &lt;&lt; endl;
  cout &lt;&lt; 7;
  cout &lt;&lt; ":" &lt;&lt; 50;
  cout &lt;&lt; endl;
  cout &lt;&lt; "I'm going to be late for my 8am!";
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>There <em>are</em> 5 <c>cout</c> statements, but that doesn't mean there are 5 lines of
            output!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Remember that <c>endl</c> is what makes a new line!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Even though there are 5 <c>cout</c>, there are only 3 lines of
            output in the terminal.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>There <em>are</em> 2 <c>endl</c> statements. But what happens when you have more output
            after the <c>endl</c>?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>0 (There is an error!)</p>
        </statement>
        <feedback>
          <p>No errors here.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="VARS_p1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a block of code that prints: <q>Lions &amp;</q> one the first line, <q>Tigers
        &amp; Bears!</q> on the second line, and <q>Oh my!</q> on the FOURTH line.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline><![CDATA[ cout << "Lions &" << endl;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "Lions &"; ]]></cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline><![CDATA[ cout << "Tigers &";]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "Tigers &" << endl; ]]></cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline><![CDATA[ cout << " Bears!" << endl;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[ cout << "Bears!" << endl; ]]></cline>
        </choice>
      </block>
      <block order="10">
        <cline> cout &lt;&lt; endl;</cline>
      </block>
      <block order="9">
        <cline> cout &lt;&lt; "Oh my!";</cline>
      </block>
      <block order="4">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  
  <exercise label="programming_11">
    <statement>
      <p>Fill in the missing pieces:</p>
      <p>
        <c>#include &lt;</c>
        <fillin answer="iostream"
                mode="string"/>
        <c>&gt;</c>
      </p>
      <p>
        <c>using namespace</c>
        <fillin answer="std"
                mode="string"/>
        <c>;</c>
      </p>
      <p>
        <c>int</c>
        <fillin answer="main"
                mode="string"/>
        <c>() {</c>
      </p>
      <p>
        <c><![CDATA[ cout << "Hello world " << endl]]></c>
        <fillin answer=";"
                mode="string"/>
      </p>
      <p>
        <c>return</c>
        <fillin answer="0"
                mode="string"/>
        <c>;</c>
      </p>
      <p>
        <c>}</c>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp string="[1-9]+"
                  strip="no"/>
          <feedback>
            Try again! It is possible to return any integer, but only one value means "ran
            successfully".
          </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <exercise label="VARS_2">
    <statement>
      <p>Complete the code so that it prints <c>Hello!</c> on one line and then <c>I love programming!</c> on the next.</p>
      <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/ex-parts-basic-main.cpp" parse="text"/>
        </preamble>
        <code>
    //Your code here
        </code>
        <postamble><![CDATA[ 
    cout << "programming!";
}
        ]]>
        </postamble>
        <tests>
          <iotest>
              <input></input>
              <output>
                  Hello!
                  I love programming!
              </output>
          </iotest>
        </tests>
    </program>
    </statement>
  </exercise>
</exercises>