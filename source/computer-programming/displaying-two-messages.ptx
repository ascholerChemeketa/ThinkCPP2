<section xml:id="computer-programming_displaying-two-messages"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Displaying Two Messages</title>

  <p>You can put as many statements as you like in the <pf>main</pf> function. For example, to display
    more than one line of output we could use two <pf>cout</pf> statements:</p>

  <listing filename="hello2.cpp">
    <program xml:id="computer-programming_displaying-two-messages-1"
             interactive="activecode">
<xi:include href="../../programs/computer-programming/displaying-two-messages-1.cpp" parse="text"/>
  </program>
  </listing>

  <p>Notice that the first print statement has another <pf>&lt;&lt;</pf> after the string it is printing to
    separate the string from the next piece of data to be output. That data is <pf>endl</pf> which means
    "end of line" - it will ensure that anything that whatever comes next in the output will appear
    on the next line (like hitting Enter while typing). Thus we get two lines of output. </p>
    
  <p>Also notice that the program omits the <pf>return 0;</pf> at the end of <pf>main</pf>. In C++, it is optional to include that line - if the programmer does not include it, it is silently added at the end of main. It is also possible to return a value other than 0. When a program returns 0, that indicates to the operating system that the program completed successfully. To indicate an error occurred, the programmer can return any non-zero value. This is a C++ feature we will not be exploring in this book.</p>

  <p>Lastly, it also demonstrates that you can put comments at the end of a line
    as well as on lines all by themselves. The code before the <pf>//</pf> is not part of the comment.</p>

  <p>Now let us look at a similar program that lacks an <pf>endl</pf> in its print statement:</p>

  <listing filename="goodbye.cpp">
    <program xml:id="computer-programming_displaying-two-messages-2"
             interactive="activecode">
<xi:include href="../../programs/computer-programming/displaying-two-messages-2.cpp" parse="text"/>
    </program>
    <idx>
      <h>goodbye.cpp</h>
    </idx>
  </listing>

  <p>Without the <pf>endl</pf> the second print statement will output to the
    same line as the first one. The output has a space after the comma because there is an extra space inside the quotation marks of the first string. Without that space, the output would say <q>Goodbye,cruel world</q>.</p>


  <exercise label="more_output_2">
    <statement>
      <p>On how many separate lines will the 7's be printed?</p>
      <program
               line-numbers="yes">
#include &lt;iostream&gt;
using namespace std;

int main() {
  cout &lt;&lt; 7 &lt;&lt; endl;
  cout &lt;&lt; 7;
  cout &lt;&lt; 7;
  cout &lt;&lt; 7;
}
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>There is an "endl" statement, implying that a new line is created.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>"endl" creates one new line. The first line will say 7, while the second will print
            777.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>In C++, you must make sure to say "endl" every time you'd like to create a new line.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>In C++, you must make sure to say "endl" every time you'd like to create a new line.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="more_output_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a main function that prints <q>Snap!</q> on the first line, <q>Crackle!</q> on
        the third line, and <q>Pop!</q> on the sixth line. You might not use all of endl blocks
        provided.</p>
    </statement>
    <program-preamble>
      #include &lt;iostream&gt;
      using namespace std;
    </program-preamble>
    <program
             codelens="no"></program>
    <blocks>
      <block order="3">
        <cline>int main() {</cline>
      </block>
      <block order="4">
        <cline> cout &lt;&lt; "Snap!";</cline>
      </block>
      <block order="8">
        <cline><![CDATA[ cout << endl; // first endl]]></cline>
      </block>
      <block order="7">
        <cline><![CDATA[ cout << endl; // second endl]]></cline>
      </block>
      <block order="2">
        <cline><![CDATA[ cout << "Crackle!" << endl;]]></cline>
      </block>
      <block order="11">
        <cline><![CDATA[ cout << endl; // third endl]]></cline>
      </block>
      <block order="6">
        <cline><![CDATA[ cout << endl; // fourth endl]]></cline>
      </block>
      <block order="9">
        <cline> cout &lt;&lt; "Pop!";</cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[ cout << endl; // fifth endl ]]></cline>
      </block>
      <block order="10"
             correct="no">
        <cline><![CDATA[ cout << endl; // sixth endl ]]></cline>
      </block>
      <block order="1">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="more_output_4"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a main function that prints <q>Hello, world!</q> so that <q>Hello,</q> and <q>
        world!</q> are printed on two separate lines.</p>
    </statement>
    <program-preamble>
      #include &lt;iostream&gt;
      using namespace std;
    </program-preamble>
    <program
             codelens="no"></program>
    <blocks>
      <block order="6">
        <cline>int main() {</cline>
      </block>
      <block order="4">
        <cline><![CDATA[ cout << "Hello," << endl; cout << "world!";]]></cline>
      </block>
      <block order="5"
             correct="no">
        <cline><![CDATA[ cout << "Hello," << "world!" << endl; ]]></cline>
      </block>
      <block order="1"
             correct="no">
        <cline> cout &gt;&gt; "Hello," &gt;&gt; endl; cout &gt;&gt; "world!"; </cline>
      </block>
      <block order="2"
             correct="no">
        <cline> cout &gt;&gt; "Hello," &gt;&gt; "world!" &gt;&gt; endl; </cline>
      </block>
      <block order="3">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>