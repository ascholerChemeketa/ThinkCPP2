<section xml:id="methods-testing_composition" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Composition</title>
<p>
<idx><h>expression</h></idx>
<idx><h>argument</h></idx>
You have probably learned how to evaluate simple expressions like <m>\sin(\pi/2)</m> and <m>\log(1/x)</m>.
First, you evaluate the expression in parentheses, which is the argument of the function.
Then you can evaluate the function itself, either by hand or by punching it into a calculator.
</p>

<p>
This process can be applied repeatedly to evaluate more-complex expressions like <m>\log(1/\sin(\pi/2))</m>.
First we evaluate the argument of the innermost function (<m>\pi/2 = 1.57</m>), then evaluate the function itself (<m>\sin(1.57) = 1.0</m>), and so on.
</p>

<p>
<idx><h>composition</h></idx>
<idx><h>expression</h></idx>
Just as with mathematical functions, Java functions can be <term>composed</term> to solve complex problems.
That means you can use one function as part of another.
In fact, you can use any expression as an argument to a function, as long as the resulting value has the correct type:
</p>

<program xml:id="methods-testing_composition-1">
<xi:include href="../programs/methods-testing_composition-1.cpp" parse="text"/>
</program>

<p>
This statement divides <c>Math.PI</c> by <c>2.0</c>, adds the result to <c>angle</c>, and computes the cosine of the sum.
You can also take the result of one function and pass it as an argument to another:
</p>

<program xml:id="methods-testing_composition-2">
<xi:include href="../programs/methods-testing_composition-2.cpp" parse="text"/>
</program>

<p>
In Java, the <c>log</c> function always uses base <m>e</m>.
So this statement finds the log base <m>e</m> of 10, and then raises <m>e</m> to that power.
The result gets assigned to <c>x</c>.
</p>

<p>
Some math functions take more than one argument.
For example, <c>Math.pow</c> takes two arguments and raises the first to the power of the second.
This line computes <m>2^{10}</m> and assigns the value <c>1024.0</c> to the variable <c>x</c>:
</p>

<program xml:id="methods-testing_composition-3">
<xi:include href="../programs/methods-testing_composition-3.cpp" parse="text"/>
</program>

<p>
When using <c>Math</c> functions, beginners often forget the word <c>Math</c>.
For example, if you just write <c>x = pow(2.0, 10.0)</c>, you will get a compiler error:
</p>

<console>
<output>
File: Test.java  [line: 5]
Error: cannot find symbol
  symbol:   function pow(double,double)
  location: class Test
</output>
</console>

<p>
The message <q>cannot find symbol</q> is confusing, but the last two lines provide a useful hint.
The compiler is looking for a function named <c>pow</c> in the file <c>Test.java</c> (the file for this example).
If you don't specify a class name when referring to a function, the compiler looks in the current class by default.
</p>
</section>
