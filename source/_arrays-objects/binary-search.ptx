<section xml:id="arrays-objects_binary-search" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Binary Search</title>
<p>
    <idx><h>binary search</h></idx>
When you look for a word in a dictionary, you don't search page by page from front to back.
Since the words are in alphabetical order, you probably use a <term>binary search</term> algorithm:
<ol>
<li><p>Start on a page near the middle of the dictionary.</p></li>
<li><p>Compare a word on the page to the word you are looking for.
If you find it, stop.</p></li>
<li><p>If the word on the page comes before the word you are looking for, flip to somewhere later in the dictionary and go to step 2.</p></li>
<li><p>If the word on the page comes after the word you are looking for, flip to somewhere earlier in the dictionary and go to step 2.</p></li>
</ol>
</p>

<p>
This algorithm is much faster than sequential search, because it rules out half of the remaining words each time you make a comparison.
If at any point you find two adjacent words on the page, and your word comes between them, you can conclude that your word is not in the dictionary.
</p>

<p>
Getting back to the array of cards, we can write a faster version of <pf>search</pf> if we know the cards are in order:
</p>

<program>
<xi:include href="../../programs/arrays-objects/binary-search-1.cpp" parse="text"/>
</program>

<p>
First, we declare <pf>low</pf> and <pf>high</pf> variables to represent the range we are searching.
Initially, we search the entire array, from <pf>0</pf> to <pf>cards.length - 1</pf>.
</p>

<p>
Inside the <pf>while</pf> loop, we repeat the four steps of binary search:
<ol>
<li><p>Choose an index between <pf>low</pf> and <pf>high</pf><mdash/>call it <pf>mid</pf><mdash/>and compare the card at <pf>mid</pf> to the target.</p></li>
<li><p>If you found the target, return its index (which is <pf>mid</pf>).</p></li>
<li><p>If the card at <pf>mid</pf> is lower than the target, search the range from <pf>mid + 1</pf> to <pf>high</pf>.</p></li>
<li><p>If the card at <pf>mid</pf> is higher than the target, search the range from <pf>low</pf> to <pf>mid - 1</pf>.</p></li>
</ol>
</p>

<p>
If <pf>low</pf> exceeds <pf>high</pf>, there are no cards in the range, so we terminate the loop and return <pf>-1</pf>.
</p>

<p>
This algorithm depends on only the <pf>compareTo</pf> function of the object, so we can use this code with any object type that provides <pf>compareTo</pf>.
</p>
</section>
