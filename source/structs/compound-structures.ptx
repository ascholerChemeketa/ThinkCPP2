<section xml:id="structs_compound-structures"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Compound Structures</title>

  <p>Once we have defined a structures, we can use it to define other structures. For example, given this `date` structure:</p>
  <program>struct Date {
  int month;
  int day;
  int year;
};</program>
  <p>We can define a new structure representing a student that includes a date:</p>
  <program>struct Student {
  string name;
  string email;
  Date enrollmentDate;
};</program>

  <p>This says that <q>a `Student` as a `name` and `email` that are `string`s and an `enrollmentDate` which is a `Date`.</q> To diagram what a `Student` variable named `s1` might look like, we would draw something like this:</p>

  <figure align="center">
    <image source="images/structs-compound-1.svg"
           width="50%"
           alt="A student struct that contains a date struct"/>
  </figure>

  <p>In this diagram, the `Student` struct is shown as a box with three parts. Two parts are the `name` and `email` strings. The third part is a `Date` struct, which is itself a box with three parts. When we say `s1.enrollmentDate` we are talking about the entire date struct that is a part of that student. To talk about the members of that struct, we need to use the dot operator again. For example, to access the month of a `student`'s enrollment date, we would write `s1.enrollmentDate.month`.</p>

  <p>This program demonstrates creating and using our compound data type:</p>

  <program xml:id="structs_compound-structures-1" interactive="activecode">
<xi:include href="../../programs/structs/structs_compound-structures-1.cpp" parse="text"/>
  </program>

  <p>Some things to note:
    <ul>
      <li>Student `s1`'s `enrollmentDate` is initialized using Date `d1`. It gets a copy of that date - 9/14/2023.</li>
      <li>Lines 41-45 print student s1's members one by one. Note that printing the date requires accessing each part individually. We can't just say `cout &lt;&lt; s1.enrollmentDate` as the compiler doesn't know how to print a Date. We need use `s1.enrollmentDate.month` which specifies a single int. That the compiler knows what to do with.</li>
      <li>Student `s2`'s `enrollmentDate` is initialized using an initializer list (lines 48-52). So we have a list for the date inside the list for the student.</li>
      <li>We print `s2` using the `printStudent` function. It uses `s.enrollmentDate` to access the entire `Date` struct for that student and pass it to `printDate`.</li>
    </ul>
  </p>

  <p>The memory diagram for the state at the end of `main` would look something like this:</p>


  <figure align="center">
    <image source="images/structs-compound-2.svg"
           width="50%"
           alt="A Date d1 and Students s1 and s2"/>
  </figure>
  
  <exercise label="compound_1">
    <statement>
      <p>How would you reference the year student `s2` was enrolled in? <fillin mode="string" answer="s2.enrollmentDate.year"/> </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp>.*</strcmp>
          <feedback>
            Your answer should have three parts separated by dots. Refer to the sample and diagram above to figure out the names of the parts.
          </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <exercise label="compound_2">
    <statement>
      <p>Write a single statement that sets `s1`'s enrollment date to be 10/3/2020.</p>
      <p><fillin mode="string" answer="s1.enrollmentDate\\s*=\\s*{\\s*10\\s*,\\s*3\\s*,\\s*2020\\s*};?"/> </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp>.*s2.*</strcmp>
          <feedback>
            Wrong student
          </feedback>
        </test>
        <test>
          <strcmp>.*enrollmentDate\..*</strcmp>
          <feedback>
            You should not have a dot operator after `enrollmentDate`.
          </feedback>
        </test>
        <test>
          <strcmp>^[^,]*$</strcmp>
          <feedback>
            You need commas between the parts of the date.
          </feedback>
        </test>
        <test>
          <strcmp>^[^=]*$</strcmp>
          <feedback>
            You need to do an assignment.
          </feedback>
        </test>
      </evaluate>
    </evaluation>
    <hint><p>You should use the list syntax - `{ }` - to specify the date.</p></hint>
  </exercise>



</section>