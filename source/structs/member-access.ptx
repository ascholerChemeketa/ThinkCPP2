<section xml:id="structs_member-access"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Accessing instance variables</title>
  <p>You can read the values of an instance variable using the same syntax we
    used to write them:</p>
  <program>
int x = blank.x;
</program>
  <p>The expression <pf>blank.x</pf> means <q>go to the memory named <pf>blank</pf> and get the value stored in the part named <pf>x</pf>.</q>
    In this case we assign that value to a local variable named <pf>x</pf>. Notice that there is no
    conflict between the local variable named <pf>x</pf> and the instance variable named <pf>x</pf>. The
    purpose of dot notation is to identify <em>which</em> variable you are referring to
    unambiguously.</p>
  <p>You can use dot notation as part of any C++ expression, so the following
    are legal.</p>
  <program>cout &lt;&lt; blank.x &lt;&lt; ", " &lt;&lt; blank.y &lt;&lt; endl;
double distance = sqrt(blank.x * blank.x + blank.y * blank.y);</program>
  <listing label="accessing_instance_variables_AC_1">
    <caption>
      In this active code, we access the instance variables of <pf>Point</pf> object <pf>black</pf> using
        dot notation and output their values. Next, we output the distance from the origin.
    </caption>
    <program xml:id="accessing_instance_variables_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

struct Point {
    double x, y;
};

int main() {
    Point blank;
    blank.x = 3.0;
    blank.y = 4.0;
    cout << blank.x << ", " << blank.y << endl;
    double distance = sqrt(blank.x * blank.x + blank.y * blank.y);
    cout << distance << endl;
}
        ]]></code>
    </program>
  </listing>
  <exercise label="structs_member-access-ex-1">
    <statement>
      <p>In <pf>string x = thing.cube;</pf>, what is the object and what is the instance variable we are reading the value
        of?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement id="accessing_instance_variables_1_opt_a">
          <p><pf>string</pf> is the instance variable, <pf>cube</pf> is the object</p>
        </statement>
        <feedback>
          <pf>string</pf> is a data type.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_1_opt_b">
          <p><pf>x</pf> is the instance variable, <pf>thing</pf> is the object</p>
        </statement>
        <feedback>
          <pf>x</pf> is the local variable.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_1_opt_c">
          <p><pf>thing</pf> is the instance variable, <pf>cube</pf> is the object</p>
        </statement>
        <feedback>
          Consider the placement of <pf>thing</pf> &#x2013; it is before the <pf>.</pf>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="accessing_instance_variables_1_opt_d">
          <p><pf>cube</pf> is the instance variable, <pf>thing</pf> is the object</p>
        </statement>
        <feedback>
          Yes, we access the instance variable <pf>cube</pf> of the object <pf>thing</pf> using the dot
            operator.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_1_opt_e">
          <p><pf>cube</pf> is the instance variable, <pf>string</pf> is the object</p>
        </statement>
        <feedback>
          <pf>string</pf> is a data type.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="structs_member-access-ex-2">
    <statement>
      <p>What will print?</p>
      <program line-numbers="yes">
        <code><![CDATA[
struct Blue {
  double x, y;
};

int main() {
  Blue blank;
  blank.x = 7.0;
  blank.y = 2.0;
  cout << blank.y << blank.x;
  double distance = blank.x * blank.x + blank.y * blank.y;
  cout << distance << endl;
}
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement id="accessing_instance_variables_2_opt_a">
          <p>
            <pf>2 7 53</pf>
          </p>
        </statement>
        <feedback>
          Spaces need to be printed out like any other output.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_2_opt_a">
          <p>
            <pf>7 2 53</pf>
          </p>
        </statement>
        <feedback>
          Spaces need to be printed out like any other output.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="accessing_instance_variables_2_opt_b">
          <p>
            <pf>2753</pf>
          </p>
        </statement>
        <feedback>
          There are no spaces in the correct output.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_2_opt_c">
          <p>
            <pf>7253</pf>
          </p>
        </statement>
        <feedback>
          The order in which the variables are printed out do not need to match the order in
            which they are declared.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="structs_member-access-ex-3">
    <statement>
      <p>You want to go to the object named <pf>circle</pf> and get the integer value of <pf>y</pf>, then
        assign it to the local variable <pf>x</pf>. How would you do that?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement id="accessing_instance_variables_3_opt_a">
          <p>
            <pf>int y = circle.x();</pf>
          </p>
        </statement>
        <feedback>
          No parentheses are needed.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_3_opt_b">
          <p>
            <pf>int circle = x.y;</pf>
          </p>
        </statement>
        <feedback>
          You should be assigning to the local variable <pf>x</pf>.
        </feedback>
      </choice>
      <choice>
        <statement id="accessing_instance_variables_3_opt_c">
          <p>
            <pf>int y = circle.x;</pf>
          </p>
        </statement>
        <feedback>
          You should be assigning to the local variable <pf>x</pf>.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="accessing_instance_variables_3_opt_d">
          <p>
            <pf>int x = circle.y;</pf>
          </p>
        </statement>
        <feedback>
          This is the correct way to assign the value of <pf>y</pf> to <pf>x</pf>.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>