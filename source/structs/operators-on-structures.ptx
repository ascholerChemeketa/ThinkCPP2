<section xml:id="structs_operators-on-structures"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Operations on structures</title>
  <p>Most of the operators we have been using on other types, like mathematical operators ( <pf>+</pf>, <pf>%</pf>,
    etc.) and comparison operators (<pf>==</pf>, <pf>&gt;</pf>, etc.), do not work on structures. (It is possible to define custom operators, but we won't worry about that yet.)</p>
  <p>On the other hand, the assignment operator <em>does</em> work for structures. It can be used in
    two ways: to initialize the instance variables of a structure from a list of values or to copy the instance variables
    from one structure to another. An initialization looks like this:</p>
  <program>
Point blank = { 3.0, 4.0 };
</program>
  <p>The values in squiggly braces get assigned to the instance variables of the structure one by
    one, in order. So in this case, <pf>x</pf> gets the first value and <pf>y</pf> gets the second.</p>
  <p>This syntax can also be used in an assignment statement. So the following is legal.</p>
  <program>Point blank;
blank = { 3.0, 4.0 };</program>
  <p>The second use of assignment is to copy one struct into another:</p>
  <program>Point p1 = { 3.0, 4.0 };
Point p2 = p1;
</program>
  <p>It is important to note that an assignment makes a copy of a struct. Once the assignment has been made, changing one struct has no effect on the other. This Codelens demonstrates by coping a struct and then changing one of the copies.</p>

  <program xml:id="structs_operators-on-structures-1" interactive="codelens">
<xi:include href="../../programs/structs/structs-operators-on-structures-1.cpp" parse="text"/>
  </program>


  <exercise label="operations_structures_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that correctly initializes the instance variables of a structure.</p>
    </statement>
    <blocks>
      <block>
        <cline>struct Point {</cline>
      </block>
      <block>
        <cline>    double x, y;</cline>
      </block>
      <block>
        <cline>};</cline>
      </block>
      <block>
        <cline>int main() {</cline>
      </block>
      <block>
        <cline>    Point blank;</cline>
      </block>
      <block correct="no">
        <cline>    int blank; </cline>
      </block>
      <block>
        <cline>    blank = { 12.0, 3.2 };</cline>
      </block>
      <block correct="no">
        <cline>    blank = { 12.0, 3.2 }               </cline>
      </block>
      <block correct="no">
        <cline>    blank = 12.0, 3.2;                  </cline>
      </block>
      <block>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="operations_structures_3">
    <statement>
      <p>Which operators do NOT work on structures. Select all that apply.</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>%</p>
        </statement>
        <feedback>
          The modulo operator does not work on structures.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>=</p>
        </statement>
        <feedback>
          The assignment operator does work on structures.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>&gt;</p>
        </statement>
        <feedback>
          The greater than operator does not work on structures.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>==</p>
        </statement>
        <feedback>
          The equality operator does not work on structures.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>+</p>
        </statement>
        <feedback>
          The addition operator does not work on structures.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>