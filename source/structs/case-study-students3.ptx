<section xml:id="structs_case-study-students3"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Case Study: Students - Part 3</title>

  <introduction>
    <p>All that is left is to read in the data from the file. Time to tackle that.</p>
  </introduction>

  <subsection>
    <title>Reading the File</title>

    <p>The previous exercise had a function <pf>getTestStudents()</pf> that created a few students from hard coded data. We can design a function to replace that which gets real data from the file and returns a vector with the students. It might be useful for the function to take the filename to read from as its parameter. That would make it possible to have a smaller test file that gets used by test code and a larger real file that gets used by the final program.</p>

    <p>We already have functions that will take an entire line of text and create a <pf>Name</pf> or a <pf>Status</pf> or a vector of doubles. So all this function has to do is to use getline 3 times for each student. We will assume that we don't know how many students there are in the file, so we will read until <pf>eof</pf>.</p>

    
  <exercise label="structs_case-study-students3-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct the algorithm for <pf>getStudentData</pf>. Make sure to check for failure after trying to read in the next three lines before using them to make a student.</p>
    </statement>
    <blocks>
  <block name="start" depends="">
    <cline><![CDATA[vector<Student> getStudentData() {]]></cline>
  </block>
  <block name="if" depends="start">
    <cline><![CDATA[    ifstream file("Students.txt");]]></cline>
  </block>
  <block name="ifcheck" depends="if">
    <cline><![CDATA[    if (!file.is_open()) {]]></cline>
    <cline><![CDATA[        throw runtime_error("Could not open file");]]></cline>
    <cline><![CDATA[    }]]></cline>
  </block>
  <block name="vec" depends="start">
    <cline><![CDATA[    vector<Student> students;]]></cline>
  </block>
  <block name="while" depends="vec ifcheck">
    <cline><![CDATA[    while (!file.eof()) {]]></cline>
  </block>
  <block name="l1" depends="while">
    <cline><![CDATA[        string nameLine, statusLine, scoresLine;]]></cline>
    <cline><![CDATA[        getline(file, nameLine);]]></cline>
  </block>
  <block name="l2" depends="l1">
    <cline><![CDATA[        getline(file, statusLine);]]></cline>
  </block>
  <block name="l3" depends="l2">
    <cline><![CDATA[        getline(file, scoresLine);]]></cline>
  </block>
  <block name="failcheck" depends="l3">
    <cline><![CDATA[        if(file.fail()) {]]></cline>
    <cline><![CDATA[            break; // Exit loop if reading fails]]></cline>
    <cline><![CDATA[        }]]></cline>
  </block>
  <block name="st" depends="failcheck">
    <cline><![CDATA[        Student student = createStudent(nameLine,]]></cline>
    <cline><![CDATA[                                        statusLine,]]></cline>
    <cline><![CDATA[                                        scoresLine);]]></cline>
  </block>
  <block name="push" depends="st">
    <cline><![CDATA[        students.push_back(student);]]></cline>
    <cline><![CDATA[    }]]></cline>
  </block>
  <block name="end" depends="push">
    <cline><![CDATA[    return students;]]></cline>
    <cline><![CDATA[}]]></cline>
  </block>
    </blocks>
    <program-preamble><![CDATA[#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <stdexcept>
#include <fstream>
using namespace std;

struct Name {
    string first;
    string middle;
    string last;
};

enum class Status {
    INACTIVE,
    ACTIVE
};

struct Student {
    Name name;
    Status currentStatus;
    vector<double> scores;
};

Name createName(const string& line) {
    Name name;
    stringstream ss(line);
    ss >> name.first;
    ss >> name.middle;
    ss >> name.last;
    return name;
}

Status createStatus(const string& line) {
    if (line == "Active") {
        return Status::ACTIVE;
    }
    else if (line == "Inactive") {
        return Status::INACTIVE;
    }
    else {
        throw logic_error("Invalid status value");
    }
}

vector<double> createScores(string line) {
    vector<double> scores;
    size_t nextComma = line.find(',');
    while (nextComma != string::npos) {
        string scoreStr = line.substr(0, nextComma);
        double score = stod(scoreStr);
        scores.push_back(score);
        line = line.substr(nextComma + 1);
        nextComma = line.find(',');
    }
    // Handle the last score after the last comma
    double score = stod(line);
    scores.push_back(score);
    return scores;
}

Student createStudent(const string& nameLine,
                      const string& statusLine,
                      const string& scoresLine) {
    Student student;
    student.name = createName(nameLine);
    student.currentStatus = createStatus(statusLine);
    student.scores = createScores(scoresLine);
    return student;
}

double calculateAverage(const vector<double>& scores) {
    double total = 0.0;
    for (double score : scores) {
        total += score;
    }
    return total / scores.size();
}
    ]]></program-preamble>
    <program add-files="datafile-students">
    </program>
    <program-postamble><![CDATA[

int main() {
    vector<Student> studentList = getStudentData();
    cout << "Averages for active students:" << endl;
    for (const Student& s : studentList) {
        // print out just active students
        if (s.currentStatus == Status::ACTIVE) {
            cout << "Name: " << s.name.first << " ";
            cout << calculateAverage(s.scores) << endl;
        }
    }
}
]]>
    </program-postamble>
  </exercise>
  </subsection>


</section>