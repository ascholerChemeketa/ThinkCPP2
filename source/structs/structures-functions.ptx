<section xml:id="structs_functions"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Structures with Functions</title>
  <p>You can pass structures as parameters just like any built in data type. For example, <pf>printPoint</pf> below takes a point as an argument and outputs it in the standard format. If you call <pf>printPoint (blank)</pf>,
    it will output <pf>(3, 4)</pf>.</p>
  <program>void printPoint(Point p) {
  cout &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")" &lt;&lt; endl;
}</program>
  <p>That version of the function uses <term>pass by value</term> to make a copy of the point that is passed in. For a very simple struct, we may be willing to pay the price of an unneeded copy. But in general, it is better to use <term>pass by reference</term> to pass structs to avoid that work. And, if the function will not modify the object, we should use <term>pass by const reference</term>. So we will prefer to write functions like this:</p>
  <program>void printPoint(const Point&amp; p) {
  cout &lt;&lt; "(" &lt;&lt; p.x &lt;&lt; ", " &lt;&lt; p.y &lt;&lt; ")" &lt;&lt; endl;
}</program>
  <p>As a second example, here is a <pf>distance</pf> that takes
    two <pf>Point</pf>s as parameters:</p>

  <program xml:id="structs_functions-1" interactive="activecode">
<xi:include href="../../programs/structs/structs_functions-1.cpp" parse="text"/>
  </program>

  <p>Similarly, we can return a struct from a function. To do so, we use the struct's type as the return type. Here is a function that takes a point and returns it's mirror image over the y-axis:</p>

  <program xml:id="structs_functions-2" interactive="activecode">
<xi:include href="../../programs/structs/structs_functions-2.cpp" parse="text"/>
  </program>

  <exercise label="structures_parameters_1">
    <statement>
      <p>What will print?</p>
      <program line-numbers="yes">
        <code><![CDATA[
struct Coordinate {
  int x, y;
};

void printOppositeCoordinate(const Coordinate& p) {
  cout << "(" << -p.y << ", " << -p.x << ")" << endl;
}

int main() {
  Coordinate coord = { 2, 7 };
  printOppositeCoordinate (coord);
}
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement id="structures_parameters_1_opt_a">
          <p>
            <pf>(-2, -7)</pf>
          </p>
        </statement>
        <feedback>
          Take a close look at the printOppositeCoordinate function.
        </feedback>
      </choice>
      <choice>
        <statement id="structures_parameters_1_opt_b">
          <p>
            <pf>(2.0, 7.0)</pf>
          </p>
        </statement>
        <feedback>
          Take a close look at the printOppositeCoordinate function.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement id="structures_parameters_1_opt_c">
          <p>
            <pf>(-7, -2)</pf>
          </p>
        </statement>
        <feedback>
          Yes, this is the correct output.
        </feedback>
      </choice>
      <choice>
        <statement id="structures_parameters_1_opt_d">
          <p>
            <pf>(-7.0, -2.0)</pf>
          </p>
        </statement>
        <feedback>
          Take a close look at the Coordinate struct.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="structures_parameters_2"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a function that takes in three Point structures and returns a new point where the x value is the  the average of the three points' x coordinates and the y value is the average of the three points' y coordinates. Calculate the x average before the y average.</p>
    </statement>
    <blocks>
      <block>
        <cline>Point average(const Point&amp; p1,</cline>
        <cline>               const Point&amp; p2,</cline>
        <cline>               const Point&amp; p3) {</cline>
      </block>
      <block>
        <cline> double avgX = (p1.x + p2.x + p3.x)/3;</cline>
      </block>
      <block>
        <choice correct="yes">
          <cline> double avgY = (p1.y + p2.y + p3.y)/3;</cline>
        </choice>
        <choice>
        <cline> double avgY = (y.p1 + y.p2 + y.p3)/3; </cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
        <cline><![CDATA[ Point avg = {avgX, avgY};]]></cline>
        </choice>
        <choice>
        <cline><![CDATA[ Point avg = (avgX, avgY);]]></cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
        <cline><![CDATA[ return avg;]]></cline>
        </choice>
        <choice>
        <cline><![CDATA[ return Point;]]></cline>
        </choice>
      </block>
      <block>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>