<section xml:id="multiple-files_vocabulary"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Vocabulary</title>
  <p>
    <dl>
      <li>
        <title>header files:</title>
        <p>
          <idx>
            <h>header files</h>
          </idx> Files that contain declarations of functions and data types, which can be shared between multiple source files.</p>
      </li>
      <li>
        <title>c++ modules:</title>
        <p>
          <idx>
            <h>c++ modules</h>
          </idx> A newer way to bundle related code and access it from other files.</p>
      </li>
      <li>
        <title>object files:</title>
        <p>
          <idx>
            <h>object files</h>
          </idx> Compiled code that is not yet linked into a complete program.</p>
      </li>
      <li>
        <title>function declaration:</title>
        <p>
          <idx>
            <h>function declaration</h>
          </idx> A statement that specifies the name, return type, and parameters of a function, but does not provide the function's implementation.</p>
      </li>
      <li>
        <title>function definition:</title>
        <p>
          <idx>
            <h>function definition</h>
          </idx> A statement that provides the implementation of a function, including the body of the function and the code that defines its behavior. (It also serves as a declaration.)</p>
      </li>
      <li>
        <title>separate compilation:</title>
        <p>
          <idx>
            <h>separate compilation</h>
          </idx> The way C++ code is built. Each C++ source file is compiled independently, and the resulting object files are linked together to create the final executable.</p>
      </li>
      <li>
        <title>linking:</title>
        <p>
          <idx>
            <h>linking</h>
          </idx> The build step where compiled code (object files) are combined into an executable program.</p>
      </li>
    </dl>
  </p>
</section>