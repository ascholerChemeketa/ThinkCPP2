<section xml:id="conditionals-logic_boolevariables">
<title>Boolean Variables</title>
<p>
<idx><h>expression</h></idx>
<idx><h>type</h><h>boolean</h></idx>
To store a <c>true</c> or <c>false</c> value, you need a <c>boolean</c> variable.
You can declare and assign them like other variables.
In this example, the first line is a variable declaration, the second is an assignment, and the third is both:
</p>

<program>
boolean flag;
flag = true;
boolean testResult = false;
</program>

<p>
<idx><h>initialize</h></idx>
<idx><h>statement</h><h>initialization</h></idx>
Since relational and logical operators evaluate to a <c>boolean</c> value, you can store the result of a comparison in a variable:
</p>

<program>
boolean evenFlag = (x % 2 == 0);    // true if x is even
boolean positiveFlag = (x > 0);     // true if x is positive
</program>

<p>
<idx><h>flag</h></idx>
The parentheses are unnecessary, but they make the code easier to understand.
A variable defined in this way is called a <em>flag</em>, because it signals, or <q>flags</q>, the presence or absence of a condition.
</p>

<p>
You can use flag variables as part of a conditional statement:
</p>

<program>
if (evenFlag) {
    System.out.println("n was even when I checked it");
}
</program>

<p>
Flags may not seem that useful at this point, but they will help simplify complex conditions later.
Each part of a condition can be stored in a separate flag, and these flags can be combined with logical operators.
</p>

<p>
Notice that we didn't have to write <nbsp/><c>if (evenFlag == true)</c>.
Since <c>evenFlag</c> is a <c>boolean</c>, it's already a condition.
To check if a flag is <c>false</c>, we simply negate the flag:
</p>

<program>
if (!evenFlag) {
    System.out.println("n was odd when I checked it");
}
</program>

<p>
In general, you should never compare anything to <c>true</c> or <c>false</c>.
Doing so makes the code more verbose and awkward to read out loud.
</p>
</section>
