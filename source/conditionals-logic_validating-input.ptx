<section xml:id="conditionals-logic_validating-input" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Validating Input</title>
<p>
<idx><h>validate</h></idx>
<idx><h>hacker</h></idx>
One of the most important tasks in any computer program is to <term>validate</term> input from the user.
People often make mistakes while typing, especially on smartphones, and incorrect inputs may cause your program to fail.
</p>

<p>
Even worse, someone (i.e., a <term>hacker</term>) may intentionally try to break into your system by entering unexpected inputs.
You should never assume that users will input the right kind of data.
</p>

<p>
Consider this simple program that prompts the user for a number and computes its logarithm:
</p>

<program xml:id="conditionals-logic_validating-input-1" interactive="activecode">
<xi:include href="../programs/conditionals-logic_validating-input-1.cpp" parse="text"/>
</program>

<p>
In mathematics, the natural logarithm (base <m>e</m>) is undefined when <m>x \le 0</m>.
In Java, if you ask for <c>Math.log(-1)</c>, it returns <term>NaN</term>, which stands for <q>not a number</q>.
We can check for this condition and print an appropriate message:
</p>

<program xml:id="conditionals-logic_validating-input-2">
<xi:include href="../programs/conditionals-logic_validating-input-2.cpp" parse="text"/>
</program>

<p>
The output is better now, but there is another problem.
What if the user doesn't enter a number at all?
What would happen if they typed the word <q>hello</q>, either by accident or on purpose?
</p>

<p>
<idx><h>InputMismatchException</h></idx>
<idx><h>exception</h><h>InputMismatch</h></idx>
</p>

<console>
<output>
Exception in thread "main" java.util.InputMismatchException
    at java.util.Scanner.throwFor(Scanner.java:864)
    at java.util.Scanner.next(Scanner.java:1485)
    at java.util.Scanner.nextDouble(Scanner.java:2413)
    at Logarithm.main(Logarithm.java:8)
</output>
</console>

<p>
<idx><h>run-time error</h></idx>
<idx><h>testing</h></idx>
If the user inputs a <c>String</c> when we expect a <c>double</c>, Java reports an <q>input mismatch</q> exception.
We can prevent this run-time error from happening by testing the input first.
</p>

<p>
The <c>Scanner</c> class provides <c>hasNextDouble</c>, which checks whether the next input can be interpreted as a <c>double</c>.
If not, we can display an error message:
</p>

<program xml:id="conditionals-logic_validating-input-3">
<xi:include href="../programs/conditionals-logic_validating-input-3.cpp" parse="text"/>
</program>

<p>
<idx><h>next</h><h>Scanner</h></idx>
In contrast to <c>in.nextLine</c>, which returns an entire line of input, the <c>in.next</c> function returns only the next token of input.
We can use <c>in.next</c> to show the user exactly which word they typed was not a number.
</p>

<p>
<idx><h>System.err</h></idx>
This example also uses <c>System.err</c>, which is an <c>OutputStream</c> for error messages and warnings.
Some development environments display output to <c>System.err</c> with a different color or in a separate window.
</p>
</section>
