<section xml:id="mutable-objects_point-objects" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Point Objects</title>
<p>
    <idx><h>coordinate</h></idx>
In math, 2D points are often written in parentheses with a comma separating the coordinates.
For example, <m>(0,0)</m> indicates the origin, and <m>(x,y)</m> indicates the point <m>x</m> units to the right and <m>y</m> units up from the origin.
</p>

<p>
    <idx><h>AWT</h></idx>
    <idx><h>java.awt</h></idx>
    <idx><h>Point</h></idx>
The <c>java.awt</c> package provides a class named <c>Point</c> that represents a location in a Cartesian plane.
In order to use the <c>Point</c> class, you have to import it:
</p>

<program xml:id="mutable-objects_point-objects-1" interactive="activecode">
<xi:include href="../../programs/mutable-objects/point-objects-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>new</h></idx>
    <idx><h>operator</h><h>new</h></idx>
Then, to create a new point, you use the <c>new</c> operator:
</p>

<program xml:id="mutable-objects_point-objects-2" interactive="activecode">
<xi:include href="../../programs/mutable-objects/point-objects-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>declaration</h></idx>
    <idx><h>statement</h><h>declaration</h></idx>
    <idx><h>reference</h></idx>
The first line declares that <c>blank</c> has type <c>Point</c>.
The second line creates the new <c>Point</c> with the coordinates <m>x=3</m> and <m>y=4</m>.
The result of the <c>new</c> operator is a <term>reference</term> to the object.
<xref ref="fig_reference">Figure</xref> shows the result.
</p>

<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
</p>
<figure xml:id="fig_reference" >
<caption>Memory diagram showing a variable that refers to a <c>Point</c> object.</caption>
<image width="73%" source="images/reference.png" />
</figure>
<p>
As usual, the name of the variable <c>blank</c> appears outside the box, and its value appears inside the box.
In this case, the value is a reference, which is represented with an arrow.
The arrow points to the <c>Point</c> object, which contains two variables, <c>x</c> and <c>y</c>. <idx><h>attribute</h></idx>
    <idx><h>dot notation</h></idx>
Variables that belong to an object are called <term>attributes</term>.
In some documentation, you also see them called <q>fields</q>.
To access an attribute of an object, Java uses <term>dot notation</term>.
For example:
</p>

<program xml:id="mutable-objects_point-objects-3" interactive="activecode">
<xi:include href="../../programs/mutable-objects/point-objects-3.cpp" parse="text"/>
</program>

<p>
The expression <c>blank.x</c> means <q>go to the object <c>blank</c> refers to, and get the value of the attribute <c>x</c>.</q>
In this case, we assign that value to a local variable named <c>x</c>.
</p>

<p>
There is no conflict between the local variable <c>x</c> and the attribute <c>x</c>.
The purpose of dot notation is to identify <term>which</term> variable you are referring to unambiguously.
</p>

<p>
You can use dot notation as part of an expression.
For example:
</p>

<program xml:id="mutable-objects_point-objects-4" interactive="activecode">
<xi:include href="../../programs/mutable-objects/point-objects-4.cpp" parse="text"/>
</program>

<p>
The first line displays <c>3, 4</c>.
The second line calculates the value <c>25</c>.
</p>
</section>
