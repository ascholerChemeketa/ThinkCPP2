<section xml:id="mutable-objects_stringbuilder-objects" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>StringBuilder Objects</title>
<p>
Here's an example in which mutable objects are efficient and arguably more natural: building a long string by concatenating lots of small pieces.
</p>

<p>
Strings are particularly inefficient for this operation.
For example, consider the following program, which reads 10 lines from <pf>System.in</pf> and concatenates them into a single <pf>String</pf>:
</p>

<program label="mutable-objects_stringbuilder-objects-program-1" interactive="activecode">
<xi:include href="../../programs/mutable-objects/stringbuilder-objects-1.cpp" parse="text"/>
</program>

<p>
Inside the <pf>for</pf> loop, <pf>in.nextLine()</pf> returns a new string each time it is invoked.
The next line of code concatenates <pf>text</pf> and <pf>line</pf>, which creates another string, and then appends the newline character, which creates yet another string.
</p>

<p>
As a result, this loop creates 30 <pf>String</pf> objects!
At the end, <pf>text</pf> refers to the most recent <pf>String</pf>.
Garbage collection deletes the rest, but that's a lot of garbage for a seemingly simple program.
</p>

<p>
    <idx><h>StringBuilder</h></idx>
The Java library provides the <pf>StringBuilder</pf> class for just this reason.
It's part of the <pf>java.lang</pf> package, so you don't need to import it.
Because <pf>StringBuilder</pf> objects are mutable, they can implement concatenation more efficiently.
</p>

<p>
Here's a version of the program that uses <pf>StringBuilder</pf>:
</p>

<program label="mutable-objects_stringbuilder-objects-program-2" interactive="activecode">
<xi:include href="../../programs/mutable-objects/stringbuilder-objects-2.cpp" parse="text"/>
</program>

<p>
The <pf>append</pf> function takes a <pf>String</pf> as a parameter and appends it to the end of the <pf>StringBuilder</pf>.
Each time it is invoked, it modifies the <pf>StringBuilder</pf>; it doesn't create any new objects.
</p>

<p>
If needed, you can return the <pf>StringBuilder</pf>'s contents as a string by calling the <pf>toString</pf> function:
</p>

<program label="mutable-objects_stringbuilder-objects-program-3" interactive="activecode">
<xi:include href="../../programs/mutable-objects/stringbuilder-objects-3.cpp" parse="text"/>
</program>

<p>
The <pf>StringBuilder</pf> class also provides functions for inserting and deleting parts of strings efficiently.
Programs that manipulate large amounts of text run much faster if you use <pf>StringBuilder</pf> instead of <pf>String</pf>.
</p>
</section>
