<section xml:id="mutable-objects_objects-as-parameters" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Objects as Parameters</title>
<p>
    <idx><h>parameter</h></idx>
    <idx><h>object</h><h>as parameter</h></idx>
You can pass objects as parameters in the usual way.
For example:
</p>

<p>
    <idx><h>printPoint</h></idx>
</p>

<program>
<xi:include href="../../programs/mutable-objects/objects-as-parameters-1.cpp" parse="text"/>
</program>

<p>
This function takes a point as an argument and displays its attributes in parentheses.
If you invoke <pf>printPoint(blank)</pf>, it displays <pf>(3, 4)</pf>.
</p>

<p>
As another example, we can rewrite the <pf>distance</pf> function from <xref ref="distance">Section</xref> so that it takes two <pf>Point</pf>s as parameters instead of four <pf>double</pf>s:
</p>

<program>
<xi:include href="../../programs/mutable-objects/objects-as-parameters-2.cpp" parse="text"/>
</program>

<p>
Passing objects as parameters makes the source code more readable and less error-prone because related values are bundled together.
</p>

<p>
You actually don't need to write a <pf>distance</pf> function, because <pf>Point</pf> objects already have one.
To compute the distance between two points, we invoke <pf>distance</pf> on one and pass the other as an argument:
</p>

<listing>
<program label="mutable-objects_objects-as-parameters-program-1" interactive="activecode">
<xi:include href="../../programs/mutable-objects/objects-as-parameters-3.cpp" parse="text"/>
</program>
</listing>

<p>
It turns out you don't need the <pf>printPoint</pf> function either.
If you invoke <pf>System.out.println(blank)</pf>, it prints the type of the object and the values of the attributes:
</p>

<console>
<output>
java.awt.Point[x=3,y=4]
</output>
</console>

<p>
    <idx><h>toString</h></idx>
<pf>Point</pf> objects provide a function called <pf>toString</pf> that returns a string representation of a point.
When you call <pf>println</pf> with objects, it <term>automatically</term> calls <pf>toString</pf> and displays the result.
</p>
</section>
