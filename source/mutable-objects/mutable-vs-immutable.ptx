<section xml:id="mutable-objects_mutable-vs-immutable" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Mutable vs Immutable</title>
<p>
    <idx><h>mutable</h></idx>
    <idx><h>immutable</h></idx>
<pf>Point</pf>s and <pf>Rectangle</pf>s are <term>mutable</term> objects, because their attributes can be modified.
You can modify their attributes directly, like <pf>box.x = 15</pf>, or you can invoke functions that modify their attributes, like <pf>box.translate(15, 0)</pf>.
</p>

<p>
In contrast, immutable objects like <pf>String</pf>s and <pf>Integer</pf>s cannot be modified.
They don't allow direct access to their attributes or provide functions that change them.
</p>

<p>
Immutable objects have advantages that help improve the reliability and performance of programs.
You can pass strings (and other immutable objects) to functions without worrying about their contents changing as a side-effect of the function.
That makes programs easier to debug and more reliable.
</p>

<p>
Also, two strings that contain the same characters can be stored in memory only once.
That can reduce the amount of memory the program uses and can speed it up.
</p>

<p>
In the following example, <pf>s1</pf> and <pf>s2</pf> are created differently, but they refer to equivalent strings; that is, the two strings contain the same characters:
</p>

<p>
    <idx><h>Surprise.java</h></idx>
</p>

<listing filename="Surprise.java">
<program xml:id="mutable-objects_mutable-vs-immutable-1" interactive="activecode">
<xi:include href="../../programs/mutable-objects/mutable-vs-immutable-1.cpp" parse="text"/>
</program>
</listing>

<p>
Because both strings are specified at compile time, the compiler can tell that they are equivalent.
And because strings are immutable, there is no need to make two copies; the compiler can create one <pf>String</pf> and make both variables refer to it.
</p>

<p>
As a result, the test <pf>s1 == s2</pf> turns out to be true, which means that <pf>s1</pf> and <pf>s2</pf> refer to the same object.
In other words, they are not just equivalent; they are identical.
</p>

<p>
Although immutable objects have some advantages, mutable objects have other advantages.
Sometimes it is more efficient to modify an existing object, rather than create a new one.
And some computations can be expressed more naturally using mutation.
</p>

<p>
Neither design is always better, which is why you will see both.
</p>
</section>
