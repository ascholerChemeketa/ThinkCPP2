<section xml:id="arrays-references_traversing-arrays">
<title>Traversing Arrays</title>
<p>
<idx><h>traversal</h></idx>
Many computations can be implemented by looping through the elements of an array and performing an operation on each element.
Looping through the elements of an array is called a <em>traversal</em>:
</p>

<program>
int[] a = {1, 2, 3, 4, 5};
for (int i = 0; i &lt; a.length; i++) {
    a[i] *= a[i];
}
</program>

<p>
This example traverses an array and squares each element.
At the end of the loop, the array has the values <c>{1, 4, 9, 16, 25}</c>.
</p>

<p>
<idx><h>search</h></idx>
Another common pattern is a <em>search</em>, which involves traversing an array and <q>searching</q> for a particular element.
For example, the following method takes an array and a value, and it returns the index where the value appears:
</p>

<program>
public static int search(double[] array, double target) {
    for (int i = 0; i &lt; array.length; i++) {
        if (array[i] == target) {
            return i;
        }
    }
    return -1;  // not found
}
</program>

<p>
If we find the target value in the array, we return its index immediately.
If the loop exits without finding the target, it returns <c>-1</c>, a special value chosen to indicate a failed search.
(This code is essentially what the <c>String.indexOf</c> method does.)
</p>

<p>
The following code searches an array for the value <c>1.23</c>, which is the third element.
Because array indexes start at 0, the output is <c>2</c>:
</p>

<program>
double[] array = {3.14, -55.0, 1.23, -0.8};
int index = search(array, 1.23);
System.out.println(index);
</program>

<p>
<idx><h>reduce</h></idx>
Another common traversal is a <em>reduce</em> operation, which <q>reduces</q> an array of values down to a single value.
Examples include the sum or product of the elements, the minimum, and the maximum.
The following method takes an array and returns the sum of its elements:
</p>

<program>
public static double sum(double[] array) {
    double total = 0.0;
    for (int i = 0; i &lt; array.length; i++) {
        total += array[i];
    }
    return total;
}
</program>

<p>
<idx><h>accumulator</h></idx>
Before the loop, we initialize <c>total</c> to <c>0</c>.
Each time through the loop, we update <c>total</c> by adding one element from the array.
At the end of the loop, <c>total</c> contains the sum of the elements.
A variable used this way is sometimes called an <em>accumulator</em>, because it <q>accumulates</q> the running total.
</p>
</section>
