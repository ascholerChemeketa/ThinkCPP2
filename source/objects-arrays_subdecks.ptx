<section xml:id="objects-arrays_subdecks" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Subdecks</title>
<p>
    <idx><h>subdeck</h></idx> The first step of merge sort is to split the deck into two <q>subdecks</q>, each with about half of the cards.
So we need a function that takes a deck, and a range of indexes, and returns a new deck that contains the specified subset of cards:
</p>

<program xml:id="objects-arrays_subdecks-1" interactive="activecode">
<xi:include href="../programs/objects-arrays_subdecks-1.cpp" parse="text"/>
</program>

<p>
The first line creates an unpopulated <c>Deck</c> object that contains an array of <c>null</c> references.
Inside the <c>for</c> loop, the subdeck gets populated with references to <c>Card</c> objects.
</p>

<p>
    <idx><h>off-by-one</h></idx>
The length of the subdeck is <c>high - low + 1</c>, because both the low card and the high card are included.
This sort of computation can be confusing, and forgetting the <q><c>+ 1</c></q> often leads to <term>off-by-one</term> errors.
Drawing a picture is usually the best way to avoid them.
</p>

<p>
    <idx><h>constructor</h></idx>
    <idx><h>overload</h></idx>
<xref ref="fig_subdeck">Figure</xref> is a memory diagram of a subdeck with <c>low = 0</c> and <c>high = 4</c>.
The result is a hand with five cards that are <term>shared</term> with the original deck; that is, they are aliased.
</p>
<figure xml:id="fig_subdeck" >
<caption>Memory diagram showing the effect of <c>subdeck</c>.</caption>
<image width="73%" source="external/images/subdeck.png" />
</figure>
<p>
    <idx><h>aliasing</h></idx>
    <idx><h>reference</h></idx>
Aliasing might not be a good idea, because changes to shared cards would be reflected in multiple decks.
But since <c>Card</c> objects are immutable, this kind of aliasing is not a problem.
And it saves some memory because we don't create duplicate <c>Card</c> objects.
</p>
</section>
