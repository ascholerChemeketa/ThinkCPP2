<section xml:id="variables-operators_declaring-variables"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Declaring Variables</title>
  <p>
    <idx>
      <h>variable</h>
    </idx>At a fundamental level, the task of every program is to perform
    computations that manipulate data. In C++, and many other programming languages, variables are a
    critical part of this work. A <term>variable</term> is a named location in memory that stores a <term>
    value</term>. Values may be numbers, text, images, sounds, and other types of data. To store a
    value, you first have to declare a variable: </p>

  <program>
<xi:include href="../../programs/variables-operators/declaring-variables-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>declaration</h>
    </idx>
    <idx>
      <h>int</h>
    </idx>
    <idx>
      <h>type</h>
      <h>int</h>
    </idx>This statement is called a <term>declaration</term>, because it declares
    that the variable <pf>age</pf> has the type <pf>int</pf>. Each variable has a <term>type</term> that
    determines what kind of values it can store. For example, the <pf>int</pf> type can store integers
    (whole numbers) like <pf>1</pf> and <pf>-5</pf>.</p>

  <p>By itself, a declaration does not have any visible effect. It simply instructs the program to
    reserve some space in memory and assigns that space a name. As far as a programmer is concerned,
    the computer memory is a long sequence of numbered locations. Each location typically stores one <term>
    byte</term> - a sequence of eight digits, each of which is either 0 or 1. To picture what the
    code above is doing, you should imagine that something like the image below:</p>

  <figure>
    <caption>Declaring <pf>int age</pf> asks to reserve four bytes of memory.</caption>
    <image source="images/memory-declaration.svg" width="50%"
           alt="Four bytes of memory with random 1's and 0's."/>
  </figure>

  <p>Once that memory is reserved, any use of the name <pf>age</pf> will tell the compiler we are referring to that memory. The type <pf>int</pf> tells the compiler two things: how much memory to reserve (different types require different amounts of space) and how to interpret the 1's and 0's. In this case the compiler will interpret them as an integer. If we were storing a decimal number, or a piece of text, we would need to tell the compiler to interpret the bits differently. (For deeper coverage of representing different kinds of data using bits, see <url href="https://author.runestone.academy/ns/books/published/welcomecs2/data-representation_data-representation.html?mode=browsing">Welcome to CS</url> Data Representation chapter)</p>

  <exercise label="variables-operators_declaring-variables-ex-1">
    <statement>
      <p>Take a look at the statement below:</p>
      <p>
        <program>
int population;
</program>
      </p>
      <p>What kind of statement is it an example of? <fillin answer="declaration"
                mode="string"
                case="insensitive"/>
        .</p>
    </statement>
    <evaluation>
      <evaluate>
        <test correct="yes">
          <strcmp use-answer="yes"/>
        </test>
        <test correct="yes">
          <strcmp>declare</strcmp>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>