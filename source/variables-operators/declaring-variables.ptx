<section xml:id="variables-operators_declaring-variables"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Declaring Variables</title>
  <p>
    <idx>
      <h>variable</h>
    </idx>At a fundamental level, the task of every program is to perform
    computations that manipulate data. In C++, and many other programming languages, variables are a
    critical part of this work. A <term>variable</term> is a named location in memory that stores a <term>
    value</term>. Values may be numbers, text, images, sounds, and other types of data. To store a
    value, you first have to declare a variable: </p>

  <program xml:id="variables-operators_declaring-variables-1">
<xi:include href="../../programs/variables-operators/declaring-variables-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>declaration</h>
    </idx>
    <idx>
      <h>int</h>
    </idx>
    <idx>
      <h>type</h>
      <h>int</h>
    </idx>This statement is called a <term>declaration</term>, because it declares
    that the variable <pf>age</pf> has the type <pf>int</pf>. Each variable has a <term>type</term> that
    determines what kind of values it can store. For example, the <pf>int</pf> type can store integers
    (whole numbers) like <pf>1</pf> and <pf>-5</pf>.</p>

  <p>By itself, a declaration does not have any visible effect. It simply instructs the program to
    reserve some space in memory and assigns that space a name. As far as a programmer is concerned,
    the computer memory is a long sequence of numbered locations. Each location typically stores one <term>
    byte</term> - a sequence of eight digits, each of which is either 0 or 1. To picture what the
    code above is doing, you should imagine that something like the image below:</p>

  <!-- TODO figure with memory illustration-->

  <p>The figure above shows that <pf>age</pf> is occupying four bytes of space. The amount of memory
    reserved will depend on the type of data that is declared. Different types of data require
    different amounts of space to store.</p>

  <p>To declare an integer variable named <pf>x</pf>, you simply type this: </p>

  <program xml:id="variables-operators_declaring-variables-2">
<xi:include href="../../programs/variables-operators/declaring-variables-2.cpp" parse="text"/>
</program>

  <p>Note that <pf>x</pf> is an arbitrary name for the variable. In general, you should use names that
    indicate what the values they will hold represent. A name like <pf>c</pf> does not communicate
    anything about what value is being stored. If that variable in fact stores the color being used
    on a webpage, a better name would be <pf>color</pf>. Even better would be to indicate what the color is
    used for with a name like <pf>textColor</pf> or <pf>backgroundColor</pf>. Meaningful names help other programmers more
    easily understand code they are reading. That <q>other programmer</q> is likely to be future you
    who looks back at your code after a few months and has no memory of what <pf>means</pf> - so be nice to
    future you!</p>

  <insight>
    <p>Good code is <q>self documenting</q>. The variable names and structure of the code make it
      easy to understand the intent of the programmer who wrote the code. Comments can be useful to
      help explain code, but they should never be thought of as a replacement for well chosen names.</p>
  </insight>


  <exercise label="variables_1">
    <statement>
      <p>Take a look at the statement below:</p>
      <p>
        <program>
int population;
</program>
      </p>
      <p>What kind of statement is it an example of? <fillin answer="declaration"
                mode="string"
                case="insensitive"/>
        .</p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>