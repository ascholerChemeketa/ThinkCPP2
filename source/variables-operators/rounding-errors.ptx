<section xml:id="variables-operators_rounding-errors"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Rounding Errors</title>
  <p>Most floating-point numbers are only <term>approximately</term> correct. Some numbers, like
    reasonably sized integers, can be represented exactly. But repeating fractions, like <m>1/3</m>,
    and irrational numbers, like <m>\pi</m>, cannot. To represent these numbers, computers have to
    round off to the nearest floating-point number. </p>

  <p>
    <idx>
      <h>rounding error</h>
    </idx>
    <idx>
      <h>error</h>
      <h>rounding</h>
    </idx> The difference between the number we want and the floating-point
    number we get is called <term>rounding error</term>. For example, the following two statements
    should produce equivalent results.</p>

  <program xml:id="variables-operators_rounding-errors-1"
           interactive="activecode">
<xi:include href="../programs/variables-operators_rounding-errors-1.cpp" parse="text"/>
  </program>

  <p>The problem is that <c>0.1</c> is a repeating fraction when converted into binary. So its
    floating-point representation stored in memory is only approximate. When we add up the
    approximations, the rounding errors accumulate. </p>
  
  <p>Why is this the case? Well, doubles have a fixed number of bits to store their answer.
  Imagine trying to store <m>\pi</m> as a decimal but only getting to use at most 6 digits. The
  closest you could come to the value of <m>\pi</m> would be <c>3.14159</c>. The same thing happens
  with doubles, only the values that are difficult to represent accurately are not always what we
  expect (0.1 is easy to represent in our base-10 number system, but difficult to represent in
  the base-2 system used by doubles).</p>

  <p>The answer is close to correct - doubles provide accuracy to ~14 significant digits.
    For many applications (like computer graphics, statistical analysis, and
    multimedia rendering), floating-point arithmetic has benefits that outweigh the costs.</p>

  <p>But if you need <term>absolute</term> precision, use integers instead. If you were
  storing financial data for a bank, representing a penny as 0.01 dollars would be a bad idea.
  Over time, errors would accumulate and someone would be very unhappy. Instead, it would be
  better to represent the amount in cents - to represent $1.25 as 125. Any time you did a calculation
  that resulted in a partial cent you would round the result to the nearest cent. (Indeed there are established rules
  for how to round financial calculations).</p>

<!-- TODO purge programs -->
  <!-- <program xml:id="variables-operators_rounding-errors-2"
           interactive="activecode">
<xi:include href="../programs/variables-operators_rounding-errors-2.cpp" parse="text"/>
</program> -->
<!-- 
  <p>In this example, balances will become inaccurate over time as the variable is used in
    arithmetic operations like deposits and withdrawals. The result would be angry customers and
    potential lawsuits. You can avoid the problem by representing the balance as an integer: </p> -->

  <!-- <program xml:id="variables-operators_rounding-errors-3"
           interactive="activecode">
<xi:include href="../programs/variables-operators_rounding-errors-3.cpp" parse="text"/>
</program>-->

</section>