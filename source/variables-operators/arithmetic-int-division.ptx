<section xml:id="variables-operators_int-division"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Integer Division</title>

  <p>The program below divides 45 by 60. Before you run it, stop and think about what you expect the output to be:</p>

  <listing>
  <program label="variables-operators_int-division-program-1"
           interactive="activecode">
<xi:include href="../../programs/variables-operators/int-division-1.cpp" parse="text"/>
</program>
  </listing>

  <p>This behavior often confuses people. The value of <pf>minute</pf> is <pf>45</pf>,
    and 45 divided by 60 should be 0.75, not 0. So why is 0 produced?</p>

  <p>
    <idx>
      <h>division</h>
      <h>integer</h>
    </idx>
    <idx>
      <h>integer division</h>
    </idx> The reason this program behaves the way it does is that C++ performs <term>integer
    division</term> when both operands are integers. Integer division produces an integer answer by <term>truncating</term> the answer. <term>Truncating</term> a value means dropping the decimal portion. Note that this is different than rounding the value - 0.75 becomes 0, not 1.</p>

  <insight>
    <p>When dividing integers, C++ does whole number division. <pf>7 / 3</pf> asks <q>how
      many whole times does 3 divide into 7?</q>. The answer is 2. </p>
  </insight>

  <p>As an alternative, we can calculate a percentage rather than a fraction: </p>

  <listing>
  <program label="variables-operators_int-division-program-2"
           interactive="activecode">
<xi:include href="../../programs/variables-operators/int-division-2.cpp" parse="text"/>
</program>
  </listing>


  <p>Because the multiplication happens first, we get <pf>4500 / 60</pf>, which is <pf>75</pf>. (The multiplication
    would happen first here no matter what, but the parentheses help make the intended order of
    operations clear.)</p>

  <note>
    <p>Also note that the print statement is broken up over multiple lines. Remember that C++ does
      not care about extra whitespace (things like spaces and newlines). Breaking up a long
      statement of code over multiple lines can help make it easier to read. Just make sure to break
      up code at logical places - like before operators - and to use indentation to make it clear
      that the extra lines are a continuation of a statements.</p>
  </note>

  <p>The order of operations is critical here. If we change the logic to do the division first, as
    shown below, we are back to 0 for our result. The first thing evaluated is <pf>minute / 60</pf>, which is 0.
    Multiplying that by 100 results in 0.</p>

  <listing>
  <program label="variables-operators_int-division-program-3"
           interactive="activecode">
<xi:include href="../../programs/variables-operators/int-division-3.cpp" parse="text"/>
</program>
  </listing>

  <exercise label="variables-operators_int-division-ex-1">
    <statement>
      <p>Integer division always <fillin mode="string" case="insensitive" answer="truncates?"/> the answer by dropping any decimal portion.</p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="variables-operators_int-division-ex-2">
    <statement>
      <program>int num1 = 12;
int num2 = 5;
cout &lt;&lt; num1 / num2;</program>
      <p>What is printed to the terminal?</p>
      <p><fillin mode="number" case="insensitive" answer="2"/></p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <numcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="variables-operators_int-division-ex-3">
    <statement>
      <program>int num1 = 10;
int num2 = 48;
cout &lt;&lt; num2 / num1;</program>
      <p>What is printed to the terminal?</p>
      <p>
        <fillin mode="number" case="insensitive" answer="4"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <numcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="variables-operators_int-division-ex-4">
    <statement>
      <program>int num1 = 10;
int num2 = 40;
cout &lt;&lt; num2 / num1;</program>
      <p>What is printed to the terminal?</p>
      <p>
        <fillin mode="number" case="insensitive" answer="4"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <numcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="variables-operators_int-division-ex-5">
    <statement>
      <program>int num1 = 10;
int num2 = 39;
cout &lt;&lt; num2 / num1;</program>
      <p>What is printed to the terminal?</p>
      <p>
        <fillin mode="number" case="insensitive" answer="3"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
          <test>
            <numcmp use-answer="yes"/>
          </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="variables-operators_int-division-ex-6">
    <statement>
      <program>int num1 = 7;
int num2 = 8;
cout &lt;&lt; "Decimal:" &lt;&lt; num1 / num2;</program>
      <p>What is printed after <pf>Decimal:</pf>?</p>
      <p>
        <fillin mode="number" case="insensitive" answer="0"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <numcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>