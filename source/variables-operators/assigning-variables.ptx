<section xml:id="variables-operators_assigning-variables"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Assigning Variables</title>

  <p>
    <idx>
      <h>assignment</h>
    </idx>
    <idx>
      <h>= assignment operator</h>
    </idx>
    Now that we have declared some variables, we can use them to store
    values. We do that with an <term>assignment</term> statement.</p>

  <program label="variables-operators_assigning-variables-program-1" interactive="activecode">
<xi:include href="../../programs/variables-operators/assigning-variables-1.cpp" parse="text"/>
</program>

  <p>This example shows two assignments, and the comments illustrate different ways people
    sometimes talk about assignment statements. The vocabulary can be confusing here, but the idea
    is straightforward: <ul>
      <li>
        <p>When you declare a variable, you create a named storage location.</p>
      </li>
      <li>
        <p>When you make an assignment to a variable, you update its value.</p>
      </li>
    </ul>
  </p>

  <p>The variable type that you declare must match the type of the value
      assigned to it. A type mismatch will generate a compile error. For example, you cannot
      store a string in an <pf>int</pf> variable. The following statements
    generate a compile error.</p>

  <program>
int hour;
hour = "six";       // WRONG !!
</program>

  <p>The <term>type</term> of <pf>hour</pf> is <term>int</term>. It can only store whole
  number values, not <term>strings</term> like <pf>"six"</pf>. It would also be an error
  to try to store <pf>"6"</pf> as that is still a string, not a number.</p>

  <p>This rule is sometimes a source of confusion, because there are many
    ways that you can convert values from one type to another, and C++
    sometimes converts things automatically. But for now you should remember
    that as a general rule variables and values have the same type, and
    we'll talk about special cases later.</p>

  <p>
    <idx>
      <h>initialize</h>
    </idx> Variables must be <term>initialized</term> (assigned for the first
    time) before they can be used. You can declare a variable and then assign a value later, as in
    the previous example. You can also declare and initialize on the same line:</p>

  <program label="variables-operators_assigning-variables-program-2" interactive="activecode">
<xi:include href="../../programs/variables-operators/assigning-variables-3.cpp" parse="text"/>
</program>

  <p>When a variable is not given a value, it is said to be <term>uninitialized</term>. In C++, an uninitialized variable has an unknown value. (It will contain whatever value is represented by the bits that happened to be in the memory where it was placed!). Using an uninitialized variable can cause the program to behave unpredictably and is never desired. Fortunately, the compiler will generally provide you with a warning. The program below has this issue</p>

  <program label="variables-operators_assigning-variables-program-3" interactive="activecode">
<xi:include href="../../programs/variables-operators/assigning-variables-4.cpp" parse="text"/>
</program>

  <insight><p>
    Make sure to ALWAYS initialize variables. Always using the <pf>type name = value;</pf> syntax to declare and initialize a variable all at once is a good way to make sure your variables are always initialized. If you do not have a value to assign yet, use <pf>type name = 0;</pf> or something similar to assign a reasonable default value.
  </p></insight>

  <exercise label="variables-operators_assigning-variables-ex-1">
    <statement>
      <p>A(n) <fillin mode="string" case="insensitive" answer="assignment"/> statement gives a value to a variable. </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>