<section xml:id="variables-operators_basic-input"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Basic Input</title>

  <p>The programs we have written so far are pretty predictable; they do the same thing every time
    they run. Most of the time, though, we want programs that take input from the user and respond
    accordingly.</p>

  <p>There are many ways to get input, including keyboard input, mouse movements and button clicks,
    as well as more exotic mechanisms like voice control and retinal scanning. In this text we will
    consider only keyboard input.</p>

  <p>In the header file <pf>iostream</pf>, C++ defines an object named <pf>cin</pf> (short for <q>console input</q>
    that handles input in much the same way that <pf>cout</pf> handles output. To get an integer value
    from the user we can write:</p>

  <program>
cin &gt;&gt; x;
  </program>

  <p>The <pf>&gt;&gt;</pf> operator causes the program to stop executing and wait for the user to type
    something. If the user types a valid integer, the program converts it into an integer value and
    stores it in <pf>x</pf>.</p>

  <note>
    <p>Make sure to use <pf>&lt;&lt;</pf> for output and <pf>&gt;&gt;</pf> for input.. It can be useful to remember
      that the symbols point in the direction data is going. In <pf>cout &lt;&lt; x</pf> the value of x is going <em>
      to</em> the console. In <pf>cin &gt;&gt; x</pf> a value is going from the console to the variable <em>x</em>
      .</p>
  </note>

  <p>Here is a simple program that tells a person their age in <q>dog years</q> (it is often said
    that one human year is like 7 dog years):</p>

  <listing>
  <program label="variables-operators_basic-input-program-1"
           line-numbers="yes"
           interactive="activecode">
<code>
<xi:include href="../../programs/variables-operators/basic-input-1.cpp" parse="text"/>
</code>
<stdin>21</stdin>
    </program>
  </listing>

  <p>The <term>prompt</term> is a message displayed to the user before input is requested. It is not
    part of the input statement, but it is an important part of the program. It tells the user that
    it is time to type something and what it is they should type.</p>

  <p>Programs in this book are not run on your computer - they are sent to a server to be run. So
    when you run a program in this book, you must provide all the input you want to give the program
    before running it. You can do this by typing the input into the textbox below it.</p>

  <p>If you run the program on your own computer, the importance of the prompt will be more obvious.
    First you will see the prompt message, then the program will pause and let you type whatever you
    like. It will not resume running until you press <pf>Enter</pf>. </p>

  <p>The <pf>&gt;&gt;</pf> operator stops reading when it hits a space or input that does not make sense
    given the type of data being read. The program above is trying to read an integer. That means
    only the characters 0-9 make sense to read. If you type <pf>21 15</pf> and then press <pf>Enter</pf>, only
    the 21 is read (it stops at the space). If you type <pf>21.5</pf>, the program will stop reading at
    the <pf>.</pf> (which does not make sense as part of an integer) and only the 21 will be read.
    Bad input will not be skipped to reach good input. If you enter something like <pf>twenty 8</pf>, the <pf>&gt;&gt;</pf>
    operator will see the <pf>t</pf> and immediately give up.</p>


  <warning>
    <p>Input with <pf>cin</pf> is very brittle. A program designed for long-term use or use by
      non-programmers should be robust. If there is an issue with the input, the program should try
      to catch the problem, alert the user, and allow them to correct it. We will learn about tools
      to do that later. For now, we will assume (dangerously) the user never makes a mistake or
      tries to break the program with bad input.</p>
  </warning>

  <p>You can get as many inputs as you like in a program. This program will read in four values and
    print their sum:</p>


  <listing>
  <program label="variables-operators_basic-input-program-2"
           line-numbers="yes"
           interactive="activecode">
<code>
<xi:include href="../../programs/variables-operators/basic-input-2.cpp" parse="text"/>
</code>
<stdin>5 3 8 2</stdin>
    </program>
  </listing>

  <p>Note that reading in two value in one statement (like <pf>num1</pf> and <pf>num2</pf>) is the reading
    them each in different statements (as is done for 3 and 4). The program would behave the same if
    we split line 10 into two lines.</p>

  <p>Also note that it does not matter that the inputs are all on one line, as long as they are
    separated by spaces. <pf>cin >> num1</pf> reads the first number, and then stops at the space after it. The
    next use of <pf>>></pf> from <pf>cin</pf> picks up where the last <pf>>></pf> operation ended. If we
    wanted, we could place the inputs each on their own line. Try modifying the input by hitting
    enter after each number and then rerun the program. The behavior should not change.</p>

  <insight>
    <p>The <pf>>></pf> operator looks like a <q>fast forward</q> button. Think of part of <pf>>></pf>'s
      job as being to <q>fast forward</q> past any spaces or newlines before trying to read in the
      next value.</p>
  </insight>

  <p>Don't worry too much about all the possible ways your program's input could be formatted, for
    now you will always be given very clear instructions on how to get any needed inputs.</p>



  <exercise label="variables-operators_basic-input-ex-1">
    <statement>
      <p>Integer division always <fillin mode="string" case="insensitive" answer="truncates?"/> the answer by dropping any decimal portion.</p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <p>The program above expects you to enter a single integer. What happens if you enter other data?
    Try the following inputs in the program above. See if you can predict what will be output. You
    can then reveal the answer below to check your understanding of what happened. <ul>
      <li>28 54</li>
      <li>14.123</li>
      <li>28e</li>
      <li>hello 28</li>
    </ul>
  </p>

  <answer>
    <tabular>
      <col halign="center"
           width="15%"/>
      <col halign="center"
           width="15%"/>
      <col width="61%"/>
      <row header="yes">
        <cell>Input</cell>
        <cell>Output</cell>
        <cell>Explanation</cell>
      </row>
      <row>
        <cell>28 54</cell>
        <cell>4</cell>
        <cell>The <pf>cin &gt;&gt; x;</pf> stopped reading at the space. Only 28 was read.</cell>
      </row>
      <row>
        <cell>14.123</cell>
        <cell>2</cell>
        <cell>The <pf>cin &gt;&gt; x;</pf> stopped reading at the <pf>.</pf>. Only 14 was read.</cell>
      </row>
      <row>
        <cell>28e</cell>
        <cell>4</cell>
        <cell>The <pf>cin &gt;&gt; x;</pf> stopped reading at the <pf>e</pf>. Only 28 was read.</cell>
      </row>
      <row valign="top">
        <cell>hello 28</cell>
        <cell>???</cell>
        <cell>
          <p>This one is tricky. The <pf>cin &gt;&gt; x;</pf> stopped reading at the <pf>h</pf>. Nothing was read
            into the variable.</p>
        </cell>
      </row>
    </tabular>
  </answer>

</section>