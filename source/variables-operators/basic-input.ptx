<section xml:id="variables-operators_basic-input"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Basic Input</title>

  <p>The programs we have written so far are pretty predictable; they do the same thing every time
    they run. Most of the time, though, we want programs that take input from the user and respond
    accordingly.</p>

  <p>There are many ways to get input, including keyboard input, mouse movements and button clicks,
    as well as more exotic mechanisms like voice control and retinal scanning. In this text we will
    consider only keyboard input.</p>

  <p>In the header file <c>iostream</c>, C++ defines an object named <c>cin</c> (short for <q>console input</q>
    that handles input in much the same way that <c>cout</c> handles output. To get an integer value
    from the user we can write:</p>

  <program>
cin &gt;&gt; x;
  </program>

  <p>The <c>&gt;&gt;</c> operator causes the program to stop executing and wait for the user to type
    something. If the user types a valid integer, the program converts it into an integer value and
    stores it in <c>x</c>.</p>

  <note>
    <p>Make sure to use <c>&lt;&lt;</c> for output and <c>&gt;&gt;</c> for input.. It can be useful to remember that
      the symbols point in the direction data is going. In <c>cout &lt;&lt; x</c> the value of x is going <em>to</em>
      the console. In <c>cin &gt;&gt; x</c> a value is going from <em>x</em> to the console.</p>
  </note>

  <p>Here is a simple program that tells a person their age in <q>dog years</q> (it is often said
    that one human year is like 7 dog years):</p>

  <program line-numbers="yes"
           interactive="activecode">
<code>
<xi:include href="../programs/variables-operators_basic-output-1.cpp" parse="text"/>
</code>
<stdin>21</stdin>
    </program>

  <p>The <term>prompt</term> is not part of the input, but it is an important part of the program.
    It tells the user that it is time to type something and what it is they should type.</p>

  <p>Programs in this book are not run on your computer - they are sent to a server to be run. So
    when you run a program in this book, you must provide all the input you want to give the program
    before running it. You can do this by typing the input into the textbox below it.</p>

  <p>If you run the program on your own computer, the importance of the prompt will be more obvious.
    First you will see the prompt message, then the program will pause and let you type whatever you
    like. It will not resume running until you press <c>Enter</c>. </p>

  <p>The <c>&gt;&gt;</c> operator stops reading when it hits a space or input that does not make sense.
    Given <c>cin &gt;&gt; x;</c>, here are some samples of what a user might type and what gets stored into x.</p>

  <p>The program above expects you to enter a single integer. What happens if you enter other data?
    Try the following inputs in the program above. See if you can figure out what happens to each.
    You can then reveal the answer below to check your understanding of what happened. <ul>
      <li>28 54</li>
      <li>14.123</li>
      <li>28e</li>
      <li>hello 28</li>
    </ul>
  </p>

  <answer>
    <tabular>
      <col halign="center"/>
      <col halign="center"/>
      <col/>
      <row header="yes">
        <cell>Input</cell>
        <cell>Output</cell>
        <cell>Explanation</cell>
      </row>
      <row>
        <cell>28 54</cell>
        <cell>4</cell>
        <cell>The <c>cin &gt;&gt; x;</c> stopped reading at the space. Only 28 was read.</cell>
      </row>
      <row>
        <cell>14.123</cell>
        <cell>2</cell>
        <cell>The <c>cin &gt;&gt; x;</c> stopped reading at the <c>.</c>. Only 14 was read.</cell>
      </row>
      <row>
        <cell>28e</cell>
        <cell>4</cell>
        <cell>The <c>cin &gt;&gt; x;</c> stopped reading at the <c>e</c>. Only 28 was read.</cell>
      </row>
      <row valign="top">
        <cell>hello 28</cell>
        <cell>???</cell>
        <cell>
          <p>This one is tricky. The <c>cin &gt;&gt; x;</c> stopped reading at the <c>h</c>. Nothing was read into
            the variable.</p>
        </cell>
      </row>
    </tabular>
  </answer>

  <warning>
    <p>Input with <c>cin</c> is very brittle. A program designed for long-term use or use by
      non-programmers should be robust. If there is an issue with the input, the program should try
      to catch the problem, alert the user, and allow them to correct it. We will learn about tools
      to do that later. For now, we will assume (dangerously) the user never makes a mistake or
      tries to break the program with bad input.</p>
  </warning>

  <p>You can get as many inputs as you like in a program. This program will read in four values and
    demonstrates that you can type in multiple values on the same line if they are separated by a
    space. Don't worry about all the possible ways your program could get input, for now you will
    always be given very clear instructions on how to get any needed inputs.</p>


</section>