<section xml:id="computer-programming_what-is-computer-science"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>What Is Computer Science?</title>
  <p>This book intentionally omits some details about the C++ language, because our main goal is
    teaching you how to think like a computer scientist. Being able to understand computation is
    much more valuable than just learning how to write code. </p>

  <p>One of the most interesting aspects of writing programs is deciding how to solve a particular
    problem, especially when there are multiple solutions. For example, there are numerous ways to
    sort a list of numbers, and each way has its advantages. In order to determine which way is best
    for a given situation, we need techniques for describing and analyzing solutions formally. </p>

  <p>An <term>algorithm</term> is a sequence of steps that specifies how to solve a problem. Some
    algorithms are faster than others, and some use less space in computer memory. <term>Computer
    science</term> is the science of algorithms, including their discovery and analysis. As you
    learn to develop algorithms for problems you haven't solved before, you will learn to think like
    a computer scientist. <idx>
      <h>algorithm</h>
    </idx>
    <idx>
      <h>computer science</h>
    </idx></p>

  <p>Designing algorithms and writing code is difficult and error-prone.
    For historical reasons, programming errors are called <term>bugs</term>, and the process of
    tracking them down and correcting them is called <term>debugging</term>. As you learn to debug
    your programs, you will develop new problem-solving skills. You will need to think creatively
    when unexpected errors happen.
    <idx>
      <h>bug</h>
    </idx>
    <idx>
      <h>debugging</h>
    </idx>
  </p>

  <p>Although it can be frustrating, debugging is an intellectually rich, challenging, and
    interesting part of computer science. In some ways, debugging is like detective work. You are
    confronted with clues, and you have to infer the processes and events that led to the results
    you see. Thinking about how to correct programs and improve their performance sometimes even
    leads to the discovery of new algorithms.</p>
</section>