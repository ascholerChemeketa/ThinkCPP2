<section xml:id="program-design_vocabulary"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Vocabulary</title>
  <p>
    <dl>
      <li>
        <title>incremental development:</title>
        <p>
          <idx>
            <h>incremental development</h>
          </idx> A process for creating programs by
          writing a few lines at a time, compiling, and testing.</p>
      </li>
      <li>
        <title>test-driven development:</title>
        <p>
          <idx>
            <h>test-driven development</h>
          </idx> A software development process that relies on the
          repetition of a very short development cycle: requirements are turned into
          specific test cases, then the software is improved to pass the new tests.</p>
      </li>
      <li>
        <title>self-documenting:</title>
        <p>
          <idx>
            <h>self-documenting</h>
          </idx> Code that is written in a way that makes its purpose clear
          without the need for additional comments.</p>
      </li>
      <li>
        <title>single-responsibility:</title>
        <p>
          <idx>
            <h>single-responsibility</h>
          </idx> A principle of software development that states that a function
          should have only one reason to change, meaning it should only do one thing.</p>
      </li>
      <li>
        <title>modular:</title>
        <p>
          <idx>
            <h>modular</h>
          </idx> A function is modular if it does not depend on the internal details of other functions or modules or the global state of the program.</p>
      </li>
      <li>
        <title>top down design:</title>
        <p>
          <idx>
            <h>top down design</h>
          </idx> A software design approach that starts with the high-level functionality and breaks it down into smaller, more manageable components.</p>
      </li>
      <li>
        <title>bottom up design:</title>
        <p>
          <idx>
            <h>bottom up design</h>
          </idx> A software design approach that starts with the low-level behaviors and uses those to design increasingly complex functions until a complete system is achieved.</p>
      </li>
      <li>
        <title>header files:</title>
        <p>
          <idx>
            <h>header files</h>
          </idx> Files that contain declarations of functions and data types, which can be shared between multiple source files.</p>
      </li>
      <li>
        <title>c++ modules:</title>
        <p>
          <idx>
            <h>c++ modules</h>
          </idx> A newer way to bundle related code and access it from other files.</p>
      </li>
      <li>
        <title>function declaration:</title>
        <p>
          <idx>
            <h>function declaration</h>
          </idx> A statement that specifies the name, return type, and parameters of a function, but does not provide the function's implementation.</p>
      </li>
      <li>
        <title>function definition:</title>
        <p>
          <idx>
            <h>function definition</h>
          </idx> A statement that provides the implementation of a function, including the body of the function and the code that defines its behavior. (It also serves as a declaration.)</p>
      </li>
      <li>
        <title>separate compilation:</title>
        <p>
          <idx>
            <h>separate compilation</h>
          </idx> The way C++ code is built. Each C++ source file is compiled independently, and the resulting object files are linked together to create the final executable.</p>
      </li>
    </dl>
  </p>
</section>