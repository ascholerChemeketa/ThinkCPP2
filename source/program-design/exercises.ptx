<exercises xml:id="program-design_exercises"
           xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Exercises</title>

  <introduction>
    <p>This chapter does not have automatically graded exercises like other ones. Instead, it includes a series of open-ended questions and prompts for further exploration.</p>
  </introduction>

  <exercise label="program-design_exercises-ex-1">
    <statement>In the development environment of your choice, set up a multiple file project. It should consist of:
      <ul>
        <li>A library (either a module file or a .h/.cpp pair) that contains a simple function like <pf>double celsiusToFahrenheit(double celsiusTemp);</pf>.</li>
        <li>A file with tests for that function.</li>
        <li>A file with a <pf>main</pf> function.</li>
      </ul>
      <p>Make sure that you can compile and run both the tests program and the main program.</p>
    </statement>
  </exercise>

  <exercise label="program-design_exercises-ex-2">
    <statement>
      <p>Design functions to help solve the following problem.</p>

      <p>Given two blood types like <pf>AB+</pf> and <pf>O-</pf>, we want to determine if the first blood type can donate to the second blood type and if the second can donate to the first.</p>

      <note>
        <title>How blood types work</title>
        <p>Blood that has type <pf>A</pf> antibodies (<pf>A</pf> or <pf>AB</pf>) can only be given to people with an <pf>A</pf> or <pf>AB</pf> blood type. Blood that has type <pf>B</pf> antibodies (<pf>B</pf> or <pf>AB</pf>) can only be given to people with a <pf>B</pf> or <pf>AB</pf> blood type. Blood that has type <pf>O</pf> antibodies can be given to anyone.</p>
        <p>Blood that has the <pf>+</pf> factor can only be given to someone who also has the <pf>+</pf> factor. (Blood with the <pf>-</pf> factor can be given to anyone.)</p>
      </note>

      <p>Our input will be two strings. We should print out two lines of output like:</p>

      <console>
        <output>
          AB+ can donate to O-: false
          O- can donate to AB+: true
        </output>
      </console>

      <p>Using either top-down or bottom-up design, design some functions that might be useful for solving this problem. Don't worry about doing the math or writing code, just focus on what tasks need to get done. For each function, write:
        <ul>
          <li>A prototype for the function</li>
          <li>Some sample input/output pairs that could turn into a test</li>
        </ul>
      </p>
    </statement>
  </exercise>

  <exercise label="program-design_exercises-ex-3">
    <statement>
      <p>Design functions to help solve the following problem.</p>
      <p>We would like to calculate blends of HTML colors in the format <pf>#RRGGBB</pf> where RR, GG, and BB are two-digit hexadecimal numbers. (See <url href="https://runestone.academy/ns/books/published/welcomecs2/data-representation_hex-data-colors.html?mode=browsing">Welcome to CS - Hex Data &amp; Colors</url> for more details).</p>

      <p>Our input will be lines of text like <pf>#406000 #AAFFBB 80%</pf> that have two colors and a percentage. The percentage will describe how much of the second color to use. So <pf>#406000 #AAFFBB 80%</pf> would mean to give the color <pf>#AAFFBB</pf> 80% weight and the color <pf>#406000</pf> 20% weight. We should print a new string in the format <pf>#RRGGBB</pf> that represents the blended color.</p>

      <p>Using either top-down or bottom-up design, design some functions that might be useful for solving this problem. Don't worry about doing the math or writing code, just focus on what tasks need to get done. For each function, write:
        <ul>
          <li>A prototype for the function</li>
          <li>Some sample input/output pairs that could turn into a test</li>
        </ul>
      </p>
    </statement>
  </exercise>

</exercises>