<section xml:id="program-design_headers"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Header Files</title>

  <p>So we have <pf>library.cpp</pf> which defines some functions that we want to make use of in
    <pf>main.cpp</pf>. We have seen that we can declare each function from the library in <pf>main.cpp</pf>. But
    we would like to avoid having to do that. This is where <term>header files</term> come in. A
    header file is a file that contains the function declarations for a <pf>.cpp</pf> file. <idx>
      <h>header file</h>
    </idx></p>

  <p>Here is the header file that corresponds to <pf>library.cpp</pf>:</p>

  <listing>
    <caption><pf>library.h</pf></caption>
    <program label="program-design_headers-library.h"
             line-numbers="yes"
             highlight-lines="3,5,16">
<xi:include href="../../programs/program-design/headers-library.h" parse="text"/>
  </program>
  </listing>

  <p>Key things to note: <ul>
      <li>It has the same name as the <pf>.cpp</pf> file, but with a <pf>.h</pf> extension. This is a convention,
    not a strict requirement.</li>
      <li>It has the declarations for the function(s) that exist in the .cpp file, but it does NOT
    have the definitions.</li>
      <li>The function's comment goes in the .h file with the declaration. The .h file is what <q>
    other</q> programmers should refer to when they want to know what is in <pf>library.cpp</pf> and how to
    use it - ideally they should never need to look in the .cpp file.</li>
      <li>Around the function declarations there is the special <pf>#ifndef ... #endif</pf> construct
    (lines 3, 5, 16). These lines ensure that even if we include this file multiple times, it will
    only be read one time. Line 3 asks <q>Have we not defined LIBRARY_H?</q> (<pf>ifndef</pf>). If we have
    not, we keep going. Otherwise, all the code until the <pf>endif</pf> is skipped. The first thing we do
    inside the <pf>ifndef</pf> is to define <pf>LIBRARY_H</pf>. That way, if we end up in this file again, it will
    be clear we have already seen the code. The name we check/define can be anything, but by
    convention, it usually matches the name of the file (in this case <pf>LIBRARY_H</pf>).</li>
    </ul>
  </p>

  <p>It is possible to have functions defined in <pf>library.cpp</pf> that are not declared in <pf>library.h</pf>. Doing so indicates that the unlisted functions are not for use by other <pf>.cpp</pf> files - they are <term>internal</term> functions that other code should not rely on.</p>

  <p>The header file is designed for <pf>.cpp</pf> files to include it using the <pf>#include</pf> directive:</p>

  <listing>
    <caption><pf>main.cpp</pf> (with include)</caption>
    <program label="program-design_headers-main.cpp" datafile="Library.cxx">
<xi:include href="../../programs/program-design/headers-main.cpp" parse="text"/>
  </program>
  </listing>

  <p>Now, when the compiler is working on <pf>main.cpp</pf>, it will see the <pf>#include "library.h"</pf>
    directive and read the contents of <pf>library.h</pf> into the file. (Including a file essentially
    copies it into the file that has the include.) This means that the compiler will know about the
    <pf>doubleValue</pf> function and be able to compile the code in <pf>main.cpp</pf> that calls it.</p>

  <p>Note that this use of include uses <pf>" "</pf> around the name of the file to include instead of
    <pf>\&lt; &gt;</pf>. The angle brackets say <q>this is a standard library, look for it with the
    compiler's file</q>. The quotes say <q>this is a library that is NOT part of the standard
    compiler libraries, look for it in our files</q>. We use <pf>#include &lt;iostream&gt;</pf> because
    <pf>iostream</pf> is a standard library. Our <pf>library.h</pf> file is not.</p>

  <warning>
    <p>If you use the wrong symbols around the filename in your include, the compiler may not find
      the file because it is looking in the wrong folder.</p>
  </warning>

  <p>Generally, a .cpp file will include it's own .h - we would use <pf>#include "library.h"</pf> in the
    library.cpp file as well as the main file. We still only compile the .cpp files - the .h file(s)
    just get included as the .cpp files are compiled. So the recipe to compile these three files
    would still be:</p>

  <console>
    <input>g++ main.cpp library.cpp -o program.exe</input>
  </console>

  <figure>
    <caption>Compiling main.cpp and library.cpp files that each include library.h.</caption>
    <image source="images/compilation-multiple-winclude.svg"
           width="60%"/>
  </figure>


  <p>Finally, note that we do not normally have a <q>main.h</q>. <pf>main.cpp</pf> does not have functions
    that are used in any other files and the whole point of a <pf>.h</pf> is to share a list of
    declarations for the functions available in a file.</p>

    <!--TODO examples from chapter11_header-files.html -->

</section>