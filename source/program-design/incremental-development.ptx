<section xml:id="program-design_incremental-development" xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Incremental Development</title>

  <p>Beginner programmers often wonder why it's worth the trouble to write other functions, when they could
    just do everything in <pf>main</pf>. The answer is that functions are a powerful tool for
    organizing and managing complexity.</p>

  <p>We have already discussed some of the ways that functions manage complexity:
  
  <ul>
  <li><p>They enable <term>abstractions</term>. In a large codebase, developers can't be expected to remember all the details of every corner of the code. A well designed function lets you use logic without having to know those details. You can think of a function as a black box that takes inputs, does something with them, and produces an output. You don't need to know how it works; you just need to know what it does.</p></li>
  <li><p>They enable efficient <term>reuse</term> of code. Rather than copy/pasting code from one part of a program (and then having to keep all of those copies in sync as you make changes), you can call the same function from many parts of a program.</p></li>
  </ul>
  </p>

  <p>In addition to these advantages, functions can be useful for the development process itself.
  Functions give us a way to think about breaking a large problem into smaller, more manageable pieces. They give us a way to build and test that code incrementally, rather than all at once. This is called <term>incremental development</term>.</p>

  <p>We have seen case studies that used incremental development to build their way to the final version of a program. But those examples relied on starting at the beginning and adding one step at a time. When incrementally developing with functions, we are less tied to working from the beginning to the end. Instead, we can work on whatever parts of the program seem easiest or most important to figure out first.
  <idx><h>incremental development</h></idx>
  </p>

  <p>Equally important, organizing your code into multiple functions allows you to test
    individual parts of your program separately. And to rerun those tests at any time to verify that each part of the program is working correctly. Tests can even be used as <q>goal posts</q> to drive development. This process is known as <term>test driven development</term> and will be explored later.</p>

  <p>
  Key aspects to any form of incremental development:
  <ul>
    <li><p>Start with a working program and make small changes or additions one at a time.</p></li>
    <li><p>Testing each change and fixing any errors before building new code on top of the buggy code.</p></li>
  </ul>
  The goal is to have confidence in all of of the code other than your most recent changes. That way you know exactly what to blame if the program stops working as expected. If you do get stuck along the way, you can always go back to the last working version of the code and start over from there.</p>


<p>
As an example, suppose you want to find the distance between two points, given by the coordinates <m>(x_1, y_1)</m> and <m>(x_2, y_2)</m>.
By the usual definition:
<me>
  distance = \sqrt{(x_2 - x_1)^2 +(y_2 - y_1)^2}
</me>
</p>

<p>
The first step is to consider what a <pf>distance</pf> function should look like in Java.
In other words, what are the inputs (parameters) and what is the output (return value)?
For this function, the parameters are the two points, and it is natural to represent them using four <pf>double</pf> values.
The return value is the distance, which should also have type <pf>double</pf>.
</p>

<p>
    <idx><h>stub</h></idx>
Already we can write an outline for the function, which is sometimes called a <term>stub</term>.
The stub includes the function declaration and a <pf>return</pf> statement:
</p>

</section>
