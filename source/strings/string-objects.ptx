<section xml:id="strings_character-string-objects"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Strings are Objects</title>

  <p>The term <term>object</term> in programming refers to a code entity that bundles some data together with functions that operate on that data. `string`s in C++ are objects. And they are one of the first kind of objects we will deal extensively with. (`cout` and `cin` are objects, but we haven't had to know that to use them.)</p>

  <p>We will lean much more about objects in a later chapter <!-- TODO xref -->. For now, the important thing to know is that the way you interact with an object is to call functions <q>on it</q>. Which looks different than calling a function and passing it all of the data. To call a function on an object we use the syntax: </p>

  <program>
  objectName.functionName()
  </program>

  <p>This syntax is called <q>dot notation,</q> because the dot (period) separates the name of the object from the name of the function. For example, to find the length (number of characters) of a string called `fruit`, we can use its <c>length</c> function by saying `fruit.length()`:<idx><h>dot notation</h></idx></p>

  <listing label="length_AC_1">
    <caption>
      This active code outputs the length of string <c>fruit</c>.
    </caption>
    <program xml:id="length_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "Watermelon";
    cout << fruit.length() << endl;
}
        ]]></code>
    </program>
  </listing>

  <p>Functions that are a part of an object are often referred to as <term>methods</term> or <term>member functions</term>. You should think of `fruit.length()` as saying <q>call the length method of `fruit`</q> or <q>ask fruit to run its `length` method</q>. <idx><h>method</h></idx> <idx><h>member function</h></idx>
  </p>

  <p>When using methods, we always have to specify which object is going to be running the method using dot notation. Which string exactly are we asking about its length? Trying to use `length()` without `someStringName.` before it would be a syntax error:</p>

    <program xml:id="length_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "Watermelon";
    string vegetable = "Potato";

    // tell the vegetable object to run its length method
    cout << vegetable.length() << endl;

    // tell the fruit object to run its length method
    cout << fruit.length() << endl;

    // cout << length() << endl; // ERROR! there is no standalone length function
}
        ]]></code>
    </program>

  <exercise label="length_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string s = "coding rocks";
cout << s.length() << endl;
]]></code>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>11</p>
        </statement>
        <feedback>
          The space counts as a character.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>12</p>
        </statement>
        <feedback>
          Yes, there are 12 characters in the string.
        </feedback>
      </choice>
    </choices>
  </exercise>
  
</section>