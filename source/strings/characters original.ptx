<section xml:id="strings_characters"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Characters</title>



  <program>int length = fruit.length();
char last = fruit[length];       // WRONG!!</program>
  <p>That won't work. The reason is that there is no 6th letter in <c>"banana"</c>. Since we started
    counting at 0, the 6 letters are numbered from 0 to 5. To get the last character, you have to
    subtract 1 from <c>length</c>.</p>
  <warning>
    <p>A common source of error involving strings and other arrays is indexing out of bounds. This
      is usually the result of forgetting to subtract 1 from <c>length</c>.</p>
  </warning>
  <listing label="length_AC_2">
    <caption>
      This active code outputs the last character in string <c>fruit</c> using the <c>length</c>
        function.
    </caption>
    <program xml:id="length_AC_2_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "Watermelon";
    size_t length = fruit.length();
    char last = fruit[length-1];
    cout << last;
}
        ]]></code>
    </program>
  </listing>


  <p>
    <idx>
      <h>charAt</h>
    </idx>
    <idx>
      <h>char</h>
    </idx>
    <idx>
      <h>type</h>
      <h>char</h>
    </idx> Strings provide a function named <c>charAt</c>. It returns a <c>char</c>, a data
    type that stores an individual character (as opposed to strings of them):
  </p>

  <program xml:id="strings_characters-1">
<xi:include href="../../programs/strings/characters-1.cpp" parse="text"/>
</program>

  <p> The argument <c>0</c> means that we want the character at <term>index</term> 0. String indexes
    range from 0 to <m>n-1</m>, where <m>n</m> is the length of the string. So the character
    assigned to <c>letter</c> is <c>'b'</c>: </p>

  <p> \ttfamily </p>
  <tabular>
    <row bottom="minor">
      <cell></cell>
      <cell></cell>
      <cell></cell>
      <cell></cell>
      <cell></cell>
      <cell></cell>
    </row>
    <row>
      <cell>b</cell>
      <cell>a</cell>
      <cell>n</cell>
      <cell>a</cell>
      <cell>n</cell>
      <cell>a</cell>
    </row>
    <row bottom="minor">
      <cell></cell>
      <cell></cell>
      <cell></cell>
      <cell></cell>
      <cell></cell>
      <cell></cell>
    </row>
    <row>
      <cell>0</cell>
      <cell>1</cell>
      <cell>2</cell>
      <cell>3</cell>
      <cell>4</cell>
      <cell>5</cell>
    </row>
  </tabular>
  <p> Characters work like the other data types you have seen. You can compare them using relational
    operators: </p>

  <program xml:id="strings_characters-2">
<xi:include href="../../programs/strings/characters-2.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>quote mark</h>
    </idx>
    <idx>
      <h>escape sequence</h>
    </idx> Character literals, like <c>'A'</c>, appear in single quotes.
    Unlike string literals, which appear in double quotes, character literals can contain only a
    single character. Escape sequences, like <c>'
t'</c>, are legal because they represent a single
    character. </p>

  <p> The increment and decrement operators also work with characters. So this loop displays the
    letters of the alphabet: </p>

  <program xml:id="strings_characters-3">
<xi:include href="../../programs/strings/characters-3.cpp" parse="text"/>
</program>

  <p> The output is shown here: </p>

  <console>
    <output>
ABCDEFGHIJKLMNOPQRSTUVWXYZ
</output>
  </console>

  <p>
    <idx>
      <h>Unicode</h>
    </idx> Java uses <term>Unicode</term> to represent characters, so strings
    can store text in other alphabets like Cyrillic and Greek, and non-alphabetic languages like
    Chinese. You can read more about it at the Unicode website (<url href="https://unicode.org/"/>). </p>

  <p> In Unicode, each character is represented by a <q>code point</q>, which you can think of as an
    integer. The code points for uppercase Greek letters run from 913 to 937, so we can display the
    Greek alphabet like this: </p>

  <program xml:id="strings_characters-4">
<xi:include href="../../programs/strings/characters-4.cpp" parse="text"/>
</program>

  <p> This example uses a type cast to convert each integer (in the range) to the corresponding
    character. Try running the code and see what happens. </p>
</section>