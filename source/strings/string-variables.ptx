<section xml:id="strings_character-string-variables"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>String Variables</title>

  <p>Although we have worked with string literals enclosed in quotes like `"Hello world"`, we have yet to store or manipulate those strings. To do so, we need to create a variable of type <c>string</c>. To work with the <c>string</c> data type, you need to include the `&lt;string>` library. Then you can create and assign values to variable with type <c>string</c> in the usual ways: <idx><h>string</h></idx>
    <idx>
      <h>type</h>
      <h>string</h>
    </idx> </p>

  <listing label="string_variables_AC_1">
    <program xml:id="string_variables_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string first;
    first = "Hello, ";
    string second = "world.";
    second = "there.";
    cout << first << second << endl;
}
        ]]></code>
    </program>
  </listing>

  <p>Strings have a maximum length that depends on the platform (usually billions of characters). And they can be can be just 1 character long, or even 0 characters. Unlike numeric types, if you fail to initialize a string, you can count on it being empty instead of having a random value:</p>

  <program>
string empty = "";
string alsoEmpty;    // we know this string holds ""
string single = "a";
  </program>

  <note><p>If you are already including <c>iostream</c>, you may get away with not explicitly including <c>string</c>.
    In some environments, <c>iostream</c> will include <c>string</c> for you. But it is best to explicitly
    include <c>string</c> if your code relies on it.</p></note>

</section>