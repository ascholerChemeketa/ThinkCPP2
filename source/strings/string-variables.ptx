<section xml:id="strings_character-string-variables"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>String Variables and Objects</title>
  <p>Strings are more than a new type of data like `char`. They are an entirely different kind of variable: an <term>object</term>.</p>

<subsection>
  <title>String Variables</title>

  <p>Although we have worked with string literals enclosed in quotes like `"Hello world"`, we have yet to store or manipulate those strings. To do so, we need to create a variable of type <c>string</c>. To work with the <c>string</c> data type, you need to include the `&lt;string>` library. Then you can create and assign values to variable with type <c>string</c> in the usual ways: <idx><h>string</h></idx>
    <idx>
      <h>type</h>
      <h>string</h>
    </idx> </p>

  <listing label="string_variables_AC_1">
    <program xml:id="string_variables_AC_1_editor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string first;
    first = "Hello, ";
    string second = "world.";
    second = "there.";
    cout << first << second << endl;
}
        ]]></code>
    </program>
  </listing>

  <p>Strings have a maximum length that depends on the platform (usually billions of characters). And they can be can be just 1 character long, or even 0 characters. Unlike numeric types, if you fail to initialize a string, you can count on it being empty instead of having a random value:</p>

  <program>
string empty = "";
string alsoEmpty;    // we know this string holds ""
string single = "a";
  </program>

  <note><p>If you are already including <c>iostream</c>, you may get away with not explicitly including <c>string</c>.
    In some environments, <c>iostream</c> will include <c>string</c> for you. But it is best to explicitly
    include <c>string</c> if your code relies on it.</p></note>

</subsection>

<subsection>
  <title>Strings are Objects</title>

  <p>The term <term>object</term> in programming refers to a code entity that bundles some data together with functions that operate on that data. `string`s in C++ are objects. And they are one of the first kind of objects we will deal extensively with. (`cout` and `cin` are objects, but we haven't had to know that to use them.)</p>

  <p>We will lean much more about objects in a later chapter <!-- TODO xref -->. For now, the important thing to know is that the way you interact with an object is to call functions <q>on it</q>. Which looks different than calling a function and passing it all of the data. To call a function on an object we use the syntax: </p>

  <program>
  objectName.functionName()
  </program>

  <p>This syntax is called <q>dot notation,</q> because the dot (period) separates the name of the object from the name of the function. For example, to find the size (number of characters) of a string called `fruit`, we can use its <c>size</c> function by saying `fruit.size()`:<idx><h>dot notation</h></idx></p>

  <listing label="size_AC_1">
    <caption>
      This active code outputs the size of string <c>fruit</c>.
    </caption>
    <program xml:id="size_AC_1_ewefweditor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "Watermelon";
    cout << fruit.size() << endl;
}
        ]]></code>
    </program>
  </listing>

  <p>Functions that are a part of an object are often referred to as <term>methods</term> or <term>member functions</term>. You should think of `fruit.size()` as saying <q>call the size method of `fruit`</q> or <q>ask fruit to run its `size` method</q>. <idx><h>method</h></idx> <idx><h>member function</h></idx>
  </p>

  <p>When using methods, we always have to specify which object is going to be running the method using dot notation. Which string exactly are we asking about its size? Trying to use `size()` without `someStringName.` before it would be a syntax error:</p>

    <program xml:id="size_AC_1_ewefewditor"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "Watermelon";
    string vegetable = "Potato";

    // tell the vegetable object to run its size method
    cout << vegetable.size() << endl;

    // tell the fruit object to run its size method
    cout << fruit.size() << endl;

    // cout << size() << endl; // ERROR! there is no standalone size function
}
        ]]></code>
    </program>

    <note><p>Strings also have a `length()` method. It does the same thing as the `size()` method, so you can use either one.</p></note>

  <p>It is important to recognize that a string, even with only one character, is different than a `char` variable. A `char` is just a number that represents a character. A string is a list of 0 or more characters and has built in functions. Even if a string currently only has one character, it may later be modified to have more.</p>

  <exercise label="size_fwef1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string s = "coding rocks";
cout << s.size() << endl;
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>11</p>
        </statement>
        <feedback>
          The space counts as a character.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>12</p>
        </statement>
        <feedback>
          Yes, there are 12 characters in the string.
        </feedback>
      </choice>
    </choices>
  </exercise>

  
  <exercise label="length_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program line-numbers="yes">
        <code><![CDATA[
string s = "coding rocks";
cout << s.at( s.length() - 5 ) << endl;
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>o</p>
        </statement>
        <feedback>
          Take a look at the index calculation again, s.length()-5.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>r</p>
        </statement>
        <feedback>
          Yes, s.length() is 12 and 12-5 is 7. Use 7 as index and remember to start counting with
            0.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>s</p>
        </statement>
        <feedback>
          s is at index 11.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, s.length() is 12 and there is no index 12.</p>
        </statement>
        <feedback>
          You subtract 5 before using the index operator so it will work.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="length_3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a program that prints out the length of the string `Programming`.</p>
    </statement>
    <blocks>
      <block order="6" name="main">
        <cline>int main() {</cline>
          </block>
          <block order="7" name="course" depends="main">
        <cline> string course = "Programming";</cline>
      </block>
      <block order="3" name="num_chars" depends="main">
        <cline> size_t num_chars;</cline>
      </block>
      <block order="1" correct="no" name="bad1">
        <cline> string num_chars; </cline>
      </block>
      <block order="2"  name="set_num_chars" depends="course num_chars">
        <choice correct="yes">
          <cline> num_chars = course.length();</cline></choice>
        <choice  name="bad2">
          <cline> num_chars = length(course); </cline></choice>
      </block>
      <block order="4" name="print_num_chars" depends="set_num_chars">
        <cline><![CDATA[ cout << num_chars << endl;]]></cline>
      </block>
      <block order="5" depends="print_num_chars">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
  </subsection>
</section>