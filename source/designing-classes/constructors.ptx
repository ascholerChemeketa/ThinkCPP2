<section xml:id="designing-classes_constructors" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Constructors</title>
<p>
    <idx><h>constructor</h></idx>
    <idx><h>function</h><h>constructor</h></idx>
After declaring instance variables, the next step is to define a <term>constructor</term>, which is a special function that initializes the object.
The syntax for constructors is similar to that of other functions, except for the following:
</p>

<p>
    <idx><h>static</h></idx>
<ul>
<li><p>The name of the constructor is the same as the name of the class.</p></li>
<li><p>Constructors have no return type (and no return value).</p></li>
<li><p>The keyword <pf>static</pf> is omitted.</p></li>
</ul>
</p>

<p>
Here is an example constructor for the <pf>Time</pf> class:
</p>

<program xml:id="designing-classes_constructors-1">
<xi:include href="../../programs/designing-classes/constructors-1.cpp" parse="text"/>
</program>

<p>
This constructor does not take any arguments.
Each line initializes an instance variable to <pf>0</pf> (which is midnight for a <pf>Time</pf> object).
</p>

<p>
    <idx><h>this</h></idx>
    <idx><h>keyword</h></idx>
The name <pf>this</pf> is a keyword that refers to the object we are creating.
You can use <pf>this</pf> the same way you use the name of any other object.
For example, you can read and write the instance variables of <pf>this</pf>, and you can pass <pf>this</pf> as an argument to other functions.
But you do not declare <pf>this</pf>, and you can't make an assignment to it.
</p>

<p>
A common error when writing constructors is to put a <pf>return</pf> statement at the end.
Like <pf>void</pf> functions, constructors do not return values.
</p>

<p>
To create a <pf>Time</pf> object, you must use the <pf>new</pf> operator:
</p>

<program xml:id="designing-classes_constructors-2" interactive="activecode">
<xi:include href="../../programs/designing-classes/constructors-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>new</h></idx>
    <idx><h>operator</h><h>new</h></idx>
When you use <pf>new</pf>, Java creates the object and invokes your constructor to initialize the instance variables.
When the constructor is done, <pf>new</pf> returns a reference to the new object.
In this example, the reference gets assigned to the variable <pf>time</pf>, which has type <pf>Time</pf>.
<xref ref="fig_time">Figure</xref> shows the result.
</p>

<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
</p>
<figure xml:id="fig_time" >
<caption>Memory diagram of a <pf>Time</pf> object.</caption>
<image width="73%" source="images/time.png" />
</figure>
<p>
    <idx><h>recursion</h><h>infinite</h></idx>
    <idx><h>infinite recursion</h></idx>
    <idx><h>StackOverflowError</h></idx>
Beginners sometimes make the mistake of using <pf>new</pf> in the constructor:
</p>

<program xml:id="designing-classes_constructors-3">
<xi:include href="../../programs/designing-classes/constructors-3.cpp" parse="text"/>
</program>

<p>
Doing so causes an infinite recursion, since <pf>new</pf> invokes the <term>same</term> constructor, which uses <pf>new</pf> again, which invokes the constructor again, and so on.
</p>
</section>
