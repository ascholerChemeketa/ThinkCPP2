<section xml:id="designing-classes_equals-function" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The equals function</title>
<p>
    <idx><h>== equals operator</h></idx>
    <idx><h>equals</h></idx>
    <idx><h>function</h><h>equals</h></idx>
We have seen two ways to check whether values are equal: the <pf>==</pf> operator and the <pf>equals</pf> function.
With objects, you can use either one, but they are not the same:
</p>

<p>
    <idx><h>identical</h></idx>
    <idx><h>equivalent</h></idx>
<ul>
<li><p>The <pf>==</pf> operator checks whether two references are <term>identical</term>; that is, whether they refer to the same object.</p></li>
<li><p>The <pf>equals</pf> function checks whether two objects are <term>equivalent</term>; that is, whether they have the same values.</p></li>
</ul>
</p>

<p>
The definition of <term>identity</term> is always the same, so the <pf>==</pf> operator always does the same thing.
But the definition of <term>equivalence</term> is different for different objects, so objects can define their own <pf>equals</pf> functions.
</p>

<p>
Consider the following variables and the corresponding memory diagram in <xref ref="fig_time2">Figure</xref>:
</p>

<program>
<xi:include href="../../programs/designing-classes/equals-function-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
</p>
<figure xml:id="fig_time2" >
<caption>Memory diagram of three <pf>Time</pf> variables.</caption>
<image width="73%" source="images/time2.png" />
</figure>
<p>
The assignment operator copies references, so <pf>time1</pf> and <pf>time2</pf> refer to the same object.
Because they are identical, <pf>time1 == time2</pf> is true.
But <pf>time1</pf> and <pf>time3</pf> refer to two different objects.
Because they are not identical, <pf>time1 == time3</pf> is false.
</p>

<p>
By default, the <pf>equals</pf> function does the same thing as <pf>==</pf>.
For <pf>Time</pf> objects, that's probably not what we want.
For example, <pf>time1</pf> and <pf>time3</pf> represent the same time of day, so we should consider them equivalent.
</p>

<p>
    <idx><h>equals</h></idx>
    <idx><h>function</h><h>equals</h></idx>
We can provide an <pf>equals</pf> function that implements this idea:
</p>

<program>
<xi:include href="../../programs/designing-classes/equals-function-2.cpp" parse="text"/>
</program>

<p>
<pf>equals</pf> is an instance function, so it doesn't have the keyword <pf>static</pf>.
It uses <pf>this</pf> to refer to the current object, and <pf>that</pf> to refer to the other.
<pf>that</pf> is <term>not</term> a keyword, so we could have given this parameter a different name.
But using <pf>that</pf> makes the code nicely readable.
</p>

<p>
We can invoke <pf>equals</pf> like this:
</p>

<program>
<xi:include href="../../programs/designing-classes/equals-function-3.cpp" parse="text"/>
</program>

<p>
Inside the <pf>equals</pf> function, <pf>this</pf> refers to the same object as <pf>time1</pf>, and <pf>that</pf> refers to the same object as <pf>time3</pf>.
Since their instance variables are <q>equal</q>, the result is <pf>true</pf>.
</p>

<p>
Because <pf>hour</pf> and <pf>minute</pf> are integers, we compare them with <pf>==</pf>.
But <pf>second</pf> is a floating-point number.
Because of rounding errors, it is not good to compare floating-point numbers with <pf>==</pf> (see <xref ref="rounderr">Section</xref>).
Instead, we check whether the difference is smaller than a threshold, <pf>DELTA</pf>.
</p>

<p>
Many objects have a similar notion of equivalence; that is, two objects are considered equal if their instance variables are equal.
But other definitions are possible.
</p>
</section>
