<section xml:id="designing-classes_getters-setters" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Getters and Setters</title>
<p>
Recall that the instance variables of <c>Time</c> are <c>private</c>.
We can access them from within the <c>Time</c> class, but if we try to read or write them from another class, the compiler reports an error.
</p>

<p>
    <idx><h>private</h></idx>
    <idx><h>variable</h><h>private</h></idx>
A class that uses objects defined in another class is called a <term>client</term>.
For example, here is a new class called <c>TimeClient</c>:
</p>

<p>
    <idx><h>client</h></idx>
</p>

<program xml:id="designing-classes_getters-setters-1" interactive="activecode">
<xi:include href="../../programs/designing-classes/getters-setters-1.cpp" parse="text"/>
</program>

<p>
If you compile this code, you get an error message like <q>hour has private access in Time</q>.
There are three ways to solve this problem:
<ul>
<li><p>Make the instance variables public.</p></li>
<li><p>Provide functions to access the instance variables.</p></li>
<li><p>Decide that it's not a problem and refuse to let other classes access the instance variables.</p></li>
</ul>
</p>

<p>
The first choice is appealing because it's simple.
But here is the problem: when class <m>A</m> accesses the instance variables of class <m>B</m> directly, <m>A</m> becomes dependent on <m>B</m>.
If anything in <m>B</m> changes later, it is likely that <m>A</m> will have to change too.
</p>

<p>
    <idx><h>dependent</h></idx>
    <idx><h>independent</h></idx>
But if <m>A</m> uses only functions to interact with <m>B</m>, <m>A</m> and <m>B</m> are less dependent, which means that we can make changes in <m>B</m> without affecting <m>A</m> (as long as we don't change the function parameters).
So we generally avoid making instance variables public.
</p>

<p>
The second option is to provide functions that access the instance variables.
For example, we might want the instance variables to be <q>read only</q>; that is, code in other classes should be able to read them but not write them.
We can do that by providing one function for each instance variable:
</p>

<program xml:id="designing-classes_getters-setters-2">
<xi:include href="../../programs/designing-classes/getters-setters-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>accessor</h></idx>
    <idx><h>function</h><h>accessor</h></idx>
    <idx><h>getter</h></idx>
    <idx><h>function</h><h>getter</h></idx>
functions like these are formally called <q>accessors</q>, but more commonly referred to as <term>getters</term>.
By convention, the function that gets a variable named <c>something</c> is called <c>getSomething</c>.
</p>

<p>
We can fix the compiler error in <c>TimeClient</c> by using the getter:
</p>

<program xml:id="designing-classes_getters-setters-3">
<xi:include href="../../programs/designing-classes/getters-setters-3.cpp" parse="text"/>
</program>

<p>
If we decide that <c>TimeClient</c> should also be able to modify the instance variables of <c>Time</c>, we can provide functions to do that too:
</p>

<program xml:id="designing-classes_getters-setters-4">
<xi:include href="../../programs/designing-classes/getters-setters-4.cpp" parse="text"/>
</program>

<p>
    <idx><h>mutator</h></idx>
    <idx><h>function</h><h>mutator</h></idx>
    <idx><h>setter</h></idx>
    <idx><h>function</h><h>setter</h></idx>
These functions are formally called <q>mutators</q>, but more commonly known as <term>setters</term>.
The naming convention is similar; the function that sets <c>something</c> is usually called <c>setSomething</c>.
</p>

<p>
Writing getters and setters can get boring, but many IDEs can generate them for you based on the instance variables.
</p>
</section>
