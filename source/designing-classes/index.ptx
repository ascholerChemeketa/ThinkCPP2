<chapter xml:id="designing-classes" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Designing Classes</title>


<introduction>
<p>
    <idx><h>object</h><h>type</h></idx>
    <idx><h>type</h><h>object</h></idx>
Whenever you create a new class, you are creating a new object type with the same name.
So way back in <xref ref="hello">Section</xref>, when we created the class <c>Hello</c>, we also created an object type named <c>Hello</c>.
</p>

<p>
We didn't declare any variables with type <c>Hello</c>, and we didn't use <c>new</c> to create <c>Hello</c> objects.
And it wouldn't have done much good if we had<mdash/>but we could have!
</p>

<p>
In this chapter, you will learn to design classes that represent <term>useful</term> objects. Here are the main ideas:
<ul>
<li><p>Again, defining a <term>class</term> creates a new object type with the same name.

    <idx><h>class</h><h>definition</h></idx></p></li>
<li><p>A class definition is a template for objects: it specifies what attributes the objects have and what functions can operate on them.

    <idx><h>instance</h></idx></p></li>
<li><p>Every object belongs to an object type; that is, it is an <term>instance</term> of a class.

    <idx><h>instantiate</h></idx></p></li>
<li><p>The <c>new</c> operator <term>instantiates</term> objects; that is, it creates new instances of a class.</p></li>
</ul>
</p>

<p>
Think of a class as a blueprint for a house: you can use the same blueprint to build any number of houses.
</p>
</introduction>
<xi:include  href="time-class.ptx" />
<xi:include  href="constructors.ptx" />
<xi:include  href="value-constructors.ptx" />
<xi:include  href="getters-setters.ptx" />
<xi:include  href="displaying-objects.ptx" />
<xi:include  href="tostring-function.ptx" />
<xi:include  href="equals-function.ptx" />
<xi:include  href="adding-times.ptx" />
<xi:include  href="vocabulary.ptx" />
<xi:include  href="exercises.ptx" />
</chapter>
