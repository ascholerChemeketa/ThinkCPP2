<section xml:id="interacting-objects_member-object-params"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Objects as Parameters to Methods</title>
  
  <p>
    The <pf>distanceBetween</pf> function we just wrote uses a procedural programming approach. In that approach, we solve problems by writing new functions. When we want to know how far apart <pf>p1</pf> and <pf>p2</pf> are, we write a function and then <q>ask</q> the function <q>how far is it between p1 and p2?</q></p>
    
  <p>However, in an object-oriented design, we would like to encapsulate this functionality within the <pf>Point</pf> class itself. Other parts of the program shouldn't be trying to implement basic functionality of a Point like calculating the distance between two of them. That is logic that the <pf>Point</pf> class programmer is best equipped to implement.</p>

  <p>So the object-oriented approach is to have the <pf>Point</pf> class provide methods to do this work. For the distance example, we would add a method to the <pf>Point</pf> class that allows us to <q>ask</q> a point <pf>p1</pf> <q>how far is it to point p2?</q>. We are still going to end up doing the same math to get the answer, but we are now thinking of that math as a job that a <pf>Point</pf> object does for us instead of a job that we have to do ourselves.</p>

  <p>Here is what the code for a Point member function <pf>distanceTo</pf> might look like (defined outside of the class):</p>

  <program line-numbers="yes">
<xi:include href="../../programs/interacting-objects/disatance-to.cpp" parse="text"/>
  </program>
  
  <p>Key things to note:

  <ul>
      <li>There is only one parameter to the function, <pf>other</pf>. This is the other <pf>Point</pf> object that we want to calculate the distance to. The other point is <pf>this</pf> - the one that is running the code.</li>
      <li>We use <pf>m_x</pf> and <pf>m_y</pf> to refer to the member variables of the current <pf>Point</pf> object. This is the <q>this</q> object. We also could use <pf>getX()</pf> and <pf>getY()</pf>.</li>
      <li>We use <pf>other.m_x</pf> and <pf>other.m_y</pf> to refer to the member variables of the <pf>other</pf> <pf>Point</pf> object. We also could use <pf>other.getX()</pf> and <pf>other.getY()</pf>.</li>
      <li>We say <pf>const</pf> twice. <pf>const Point&amp; other</pf> promises not to modify the Point that is passed in as a parameter. The <pf>const</pf> at the end promises that the object which is executing the code will not be modified.</li>
  </ul>

   Something like <pf>other.m_x - m_x</pf> says <q>subtract my x value from the other point's x value.</q>
  </p>

  <p>To use this function we could write:</p>

  <program line-numbers="yes">
<xi:include href="../../programs/interacting-objects/disatance-to-user.cpp" parse="text"/>
  </program>
  <p>When the <pf>distanceTo</pf> function is executing, we could diagram the memory like this:</p>

  <figure align="center">
    <caption>A memory diagram of p1 executing getX</caption>
    <image source="images/objects-param-of-member.svg"
          width="50%"
          alt="When distanceTo is called on p1 and p2 is the parameter, this refers to p1 and other refers to p2"/>
  </figure>

  <p>As before, <pf>m_x</pf> implicitly means <q>this object's <pf>m_x</pf></q>. To specify the other object's <pf>m_x</pf>, we need to explicitly specify that we are talking about the other object via <pf>other.</pf>.</p>

  <p>You might be surprised to see that <pf>p1</pf> can access the private data of <pf>p2</pf>. This is allowed because they are the same class. Member code of any <pf>Point</pf> object can access not just its own private data, but also the private data of any other <pf>Point</pf>. However that would not be the case if a function in a <pf>Circle</pf> class took a <pf>Point</pf> as a parameter.</p>

<program>
bool Circle::contains(const Point&amp; p) const;
</program>

  <p>The <pf>contains</pf> function shown above would not be able to access private data of <pf>p</pf>. It would need to use public functions <pf>getX()</pf> and <pf>getY()</pf> to access <pf>p</pf>'s coordinates. The function belongs to the <pf>Circle</pf> class - thus it can only access private data of <pf>Circle</pf> objects, not <pf>Point</pf> objects.</p>

  <insight><p>Access modifiers are designed to protect parts of the code (the Circle class) from other parts of the code (non-Circle code), not to protect individual objects from other objects. That is why they apply to classes of data.</p></insight>

  <exercise label="program_l3angd_1">
    <statement>
      <p>Imagine there are Circles <pf>c1</pf> and <pf>c2</pf>. They have a member function <pf>bool sameAs(const Circle&amp; c) const;</pf>. How would you call that method to ask <pf>c2</pf> if it is the same as <pf>c1</pf>?</p>
        <p><fillin mode="string"
          answer="c2.sameAs(c1)"/></p>
    </statement>
    <evaluation>
      <evaluate>
        <test correct="yes">
          <strcmp>c2\.sameAs\s*\(\s*c1\s*\);?</strcmp>
        </test>
        <test>
          <strcmp>^c1\..*</strcmp>
          <feedback>We want to call the method on <pf>c2</pf>, not <pf>c1</pf></feedback>
        </test>
        <test>
          <strcmp>^sameAs\(.*</strcmp>
          <feedback><pf>sameAs</pf> is a member function. It must be called on a particular object.</feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  

  <exercise label="keyworferds_3">
    <statement>
      <p>Click on the use of <pf>const</pf> which promises that the object running the code of <pf>sameAs</pf> will not be modified.</p>
    </statement>
    <feedback>
      Try again!
    </feedback>
    <areas>
      <cline>bool sameAs(<area correct="no">const</area> Circle&amp; c) <area correct="yes">const</area>;</cline>
    </areas>
  </exercise>
  

  <exercise label="keyworfdfderds_3">
    <statement>
      <p>Click on the use of <pf>const</pf> which promises that the object passed as a parameter to <pf>sameAs</pf> will not be modified.</p>
    </statement>
    <feedback>
      Try again!
    </feedback>
    <areas>
      <cline>bool sameAs(<area correct="yes">const</area> Circle&amp; c) <area correct="no">const</area>;</cline>
    </areas>
  </exercise>
  


</section>