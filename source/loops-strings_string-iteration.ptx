<section xml:id="loops-strings_string-iteration" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>String Iteration</title>
<p>
<idx><h>iteration</h></idx>
Strings provide a function called <c>length</c> that returns the number of characters in the string.
The following loop iterates the characters in <c>fruit</c> and displays them, one on each line:
</p>

<program xml:id="loops-strings_string-iteration-1">
<xi:include href="../programs/loops-strings_string-iteration-1.cpp" parse="text"/>
</program>

<p>
<idx><h>string</h><h>length</h></idx>
<idx><h>length</h><h>string</h></idx>
Because <c>length</c> is a function, you have to invoke it with parentheses (there are no arguments).
When <c>i</c> is equal to the length of the string, the condition becomes <c>false</c> and the loop terminates.
</p>

<p>
To find the last letter of a string, you might be tempted to do something like the following:
</p>

<program xml:id="loops-strings_string-iteration-2">
<xi:include href="../programs/loops-strings_string-iteration-2.cpp" parse="text"/>
</program>

<p>
<idx><h>StringIndexOutOfBoundsException</h></idx>
<idx><h>exception</h><h>StringIndexOutOfBounds</h></idx>
This code compiles and runs, but invoking the <c>charAt</c> function throws a <c>StringIndexOutOfBoundsException</c>.
The problem is that there is no sixth letter in <c>"banana"</c>.
Since we started counting at 0, the six letters are indexed from 0 to 5.
To get the last character, you have to subtract 1 from <c>length</c>:
</p>

<program xml:id="loops-strings_string-iteration-3">
<xi:include href="../programs/loops-strings_string-iteration-3.cpp" parse="text"/>
</program>

<p>
Many string algorithms involve reading one string and building another.
For example, to reverse a string, we can concatenate one character at a time:
</p>

<program xml:id="loops-strings_string-iteration-4">
<xi:include href="../programs/loops-strings_string-iteration-4.cpp" parse="text"/>
</program>

<p>
<idx><h>empty string</h></idx>
The initial value of <c>r</c> is <c>""</c>, which is an <term>empty string</term>.
The loop iterates the indexes of <c>s</c> in reverse order.
Each time through the loop, the <c>+=</c> operator appends the next character to <c>r</c>.
When the loop exits, <c>r</c> contains the characters from <c>s</c> in reverse order.
So the result of <c>reverse("banana")</c> is <c>"ananab"</c>.
</p>
</section>
