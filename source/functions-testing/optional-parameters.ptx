<section xml:id="functions-testing_optional-parameters"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Default Parameters and Overloads</title>

  <note>
    <p><idx>
        <h>syntactic sugar</h>
      </idx>Programming languages often have syntax that makes it
      easier to write some pieces of code but do not really allow us to do anything fundamentally
      new. These bits of syntax are sometimes called <term>syntactic sugar</term> <mdash/> they makes
      the code <q>taste</q> better, but do not add any <q>nutritional value</q>.</p>
    <p>This section contains two bits of syntactical sugar that make it possible to write and call
      functions more flexibly. You can write programs without ever using the techniques discussed
      here. But they can be handy, and you are likely to see them in code written by others
      (especially in languages other than C++), and are thus worth at least being aware of.</p>
  </note>

  <subsection>
    <title>Overloaded Functions</title>
    <p>When you define a function, you can provide multiple versions of the function with different
      numbers of parameters. This is called <term>overloading</term>. The compiler will choose the
      correct version of the function based on the number and types of the arguments you provide. <idx>
        <h>function</h>
        <h>overload</h>
      </idx>
    </p>
    <p>Here is an example of three different versions of a <c>toInches</c> function:</p>
    <program xml:id="functions-testing_optional-parameters-1">
<xi:include href="../../programs/functions-testing/optional-parameters-1.cpp" parse="text"/>
</program>
    <p>You could call this function like <c>toInches(5)</c>, in which case the compiler would use the version
      that just takes feet. You could call it like <c>toInches(2, 5)</c> and the compiler would use the version
      that accepts two integers - yards and feet. Or you could call it with <c>toInches(1, 2, 5)</c> to use the
      version that takes three parameters.</p>

    <p>Why is this trick useful? It allows someone writing a code library to make it more flexible.
      We have seen how the <c>cmath</c> library uses it to provide multiple versions of functions like <c>pow</c>
      and <c>sqrt</c>. There are versions that take doubles, but there are also versions that take
      floats and other sized data types. If overloading didn't exist, the library would have to give
      each function a different name, like <c>powDouble</c>, <c>powFloat</c>, etc... That would be a mess!</p>

    <p>If you are going to use this trick, you do have to make sure all the functions have different
      lists of parameters. All that matters is the types and number of parameters, not the names of
      the parameters. So you can't write both <c>void doThing(int inches)</c> and <c>void doThing(int cm)</c>. Those both have the same
      parameter list - <c>(int)</c>. If you made the call <c>doThing(10)</c>, there would be no way to tell which
      version of the function you were trying to use.</p>


    <exercise label="mce_5_4">
      <statement>
        <p>If we wrote the following function, which of the other functions below can we also
          legally write and add to the program?</p>
        <program line-numbers="yes">
        <code>
int func(double x, int y);
</code>
      </program>
      </statement>
      <choices randomize="yes">
        <choice>
          <statement id="mce_5_4_opt_a">
            <p>
              <c>int func(double a, int b);</c>
            </p>
          </statement>
          <feedback> Since this function has the same name and parameter types as the given
            function, it is not allowed.</feedback>
        </choice>
        <choice correct="yes">
          <statement id="mce_5_4_opt_b">
            <p>
              <c>int foo(double x, int y);</c>
            </p>
          </statement>
          <feedback> This function has a different name from the given function, so it is allowed. </feedback>
        </choice>
        <choice correct="yes">
          <statement id="mce_5_4_opt_c">
            <p>
              <c>int func(double x);</c>
            </p>
          </statement>
          <feedback> Although this function has the same name as the given function, it has a
            different number of parameters, so it is allowed. </feedback>
        </choice>
        <choice>
          <statement id="mce_5_4_opt_d">
            <p>
              <c>void func(double x, int y);</c>
            </p>
          </statement>
          <feedback> Although this function has a different return type, its parameter list is the
            same as the given function, so it is not allowed. </feedback>
        </choice>
        <choice correct="yes">
          <statement id="mce_5_4_opt_e">
            <p>
              <c>int func(int y, double x);</c>
            </p>
          </statement>
          <feedback> Although this function has the same name as the given function, its parameter
            list is in a different order, so it is allowed. </feedback>
        </choice>
      </choices>
    </exercise>

  </subsection>

  <subsection>
    <title>Default Parameter Values</title>
    <p>
      <idx>
        <h>parameter</h>
        <h>default value</h>
      </idx>It is possible to specify <term>default values</term> for
      parameters in a function. These default values get used if the caller does not provide the
      appropriate parameter. Like overloading, this trick can make functions more flexible - one
      function can respond to multiple different kinds of call. Here is an example of the syntax:</p>

    <program xml:id="functions-testing_default-parameters-1"
             highlight-lines="1"
             line-numbers="yes">
<xi:include href="../../programs/functions-testing/default-parameters-1.cpp" parse="text"/>
</program>

    <p>Notice the <c> = 0</c> after <c>yards</c> and <c>miles</c>. Those are the default values - they will be
      used if the caller leaves out the miles and or yards. To call the function, you can specify
      either one <c>int</c> (feet), two <c>int</c>s (feet and yards), or three <c>int</c>s (feet, yards,
      miles) as shown in this program. Note that </p>

    <program xml:id="functions-testing_default-parameters-2"
             interactive="codelens">
<xi:include href="../../programs/functions-testing/default-parameters-2.cpp" parse="text"/>
</program>

    <p>Although when calling the function we can skip providing values for either <c>miles</c> or <c>yards</c>
      and <c>miles</c>, we cannot skip over <c>yards</c> and provide a value for <c>miles</c>. If skipping were
      allowed, something like <c>toFeet(5, 2)</c> would be ambiguous - the compiler would not know if the 2 was
      for <c>yards</c> or <c>miles</c>. </p>

    <p>To prevent this kind of confusion, default parameters have to follow these rules: <ul>
        <li>In the function definition, parameters with default values must come after ones that do
      not have defaults. We could NOT write the function above as <c>int toInches(int miles = 0, int yards = 0, int feet)</c>.</li>
        <li>When calling the function, you can stop providing values at any point you like and rely
      on default values for the remaining parameters. But you can not skip some parameters and then
      start providing values for later ones. If I want to call the function above with 5 <c>feet</c> and
      1 <c>miles</c>, you would have to use <c>toInches(5, 0, 1)</c>. Since we are specifying a <c>miles</c> value, we also
      must specify the yards.</li>
      </ul>
    </p>

    <p>There is some overlap in the kinds of things made easier by default values and overloaded
      functions. Default values tend to make it easier to provide multiple ways to call the same
      basic function, while overloading allows for more flexibility in how different kinds of
      parameters are handled. </p>

    <p>In the case of <c>toInches</c>, default value trick allows the writer of the function to provide
      multiple ways to call the function without having to write multiple overloaded versions. Which
      is nice. But, default values are less flexible. You can write overloaded functions that take
      completely different lists of parameters like <c>writeToLog(int num)</c> and <c>writeToLog(double num, int numDigit)</c>, but you could not
      reasonably combine those completely different functions into one version using default
      parameters.</p>
  </subsection>
</section>