<section xml:id="functions-testing_incremental-development"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Incremental Development of Functions</title>

  <p><idx>
      <h>incremental development</h>
    </idx>We have seen multiple case studies that used <term>incremental development</term> to build their way
    to the final version of a program. We can use the
    same process to develop functions incrementally. Our first attempt at a function doesn't have to
    always (or even ever) produce the correct return value. Instead, we can return some partial
    version of the answer (or a made up answer) while using print statements or a debugger to check
    what we have done so far.</p>

  <p> As an example, suppose you want to find the distance between two points, given by the
    coordinates <m>(x_1, y_1)</m> and <m>(x_2, y_2)</m>. By the usual definition: <me> distance =
    \sqrt{(x_2 - x_1)^2 +(y_2 - y_1)^2} </me>
  </p>

  <p> A `distance` function will need four parameters (the 2 x values and 2 y values) and will
    return a single value (the distance). So it's prototype will look like this: </p>

  <program>
  double distance(double x1, double y1, double x2, double y2)
</program>

  <p>
    <idx>
      <h>stub</h>
    </idx> Given this, we can write an outline for the function, which is sometimes
    called a <term>stub</term>. The stub includes the function declaration and a <c>return</c> statement: </p>

  <program xml:id="functions-testing_incremental-development-1">
<xi:include href="../../programs/functions-testing/incremental-development-1.cpp" parse="text"/>
</program>

  <p> The function clearly is not returning the correct result, but the <c>return</c> statement allows it
    to compile. Which means that we can test the function without worrying about syntax errors. This
    program has some tests that will call the function and check its answer for various inputs: </p>

  <program xml:id="functions-testing_incremental-development-2" interactive="activecode">
<xi:include href="../../programs/functions-testing/incremental-development-2.cpp" parse="text"/>
</program>

  <p> Running the program will result in failed tests. But the code itself should build and run.
    Now, we can start adding code and testing it. Even if those <q>tests</q> aren't the final tests
    we will use. </p>

  <p> Say we want to find the difference between the two x values and the two y values first. We
    might write code to do this, and then print out the values: </p>

  <program xml:id="functions-testing_incremental-development-3" interactive="activecode">
<xi:include href="../../programs/functions-testing/incremental-development-3.cpp" parse="text"/>
</program>

  <p>By running that code, we can check the values being calculated and confirm they look correct.
    <idx>
      <h>scaffolding</h>
    </idx> We will remove the print statements when the function is
    finished. Code like that is called <term>scaffolding</term>, because it is helpful for building
    the program but is not part of the final product.
  (We could use a debugger to check the values instead of printing them.)</p>

   <exercise label="program_lang_1">
    <statement>
      <p>There are three tests and thus three calls to the function. For the call For the call `distance(1.0, 2.0, 4.0, 6.0)`, what value was printed for `dy`? <fillin mode="string"
                answer="4"/> </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  

  <p> The next step is to square <c>dx</c> and <c>dy</c>. We could use the <c>Math.pow</c> function, but it is
    simpler to multiply each term by itself. Then we add the squares and print
    the result so far. This is what the new version might look like with the new scaffolding added and the old removed:</p>

  <program xml:id="functions-testing_incremental-development-4">
<xi:include href="../../programs/functions-testing/incremental-development-4.cpp" parse="text"/>
</program>


  <p>Once we tested that version, we could try to finish the function be returning the square root of `dsquared`. That last line would hopefully pass the final tests for the function itself. Once we were sure it did, we could remove the debugging scaffolding to leave something like:</p>

  <program xml:id="functions-testing_incremental-development-5">
<xi:include href="../../programs/functions-testing/incremental-development-5.cpp" parse="text"/>
</program>

  <p> As you gain more experience programming, you might write and debug more than one or two lines at a
    time. But if you find yourself spending a lot of time debugging, consider taking smaller steps. </p>
</section>