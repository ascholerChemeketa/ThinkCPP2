<section xml:id="advanced-topics_interfaces" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Interfaces</title>
<p>
You might be getting tired of polygons at this point.
Can't we draw anything else?
Of course we can, but <pf>Drawing</pf> is currently based on <pf>DrawablePolygon</pf>.
To draw other types of objects, we have to generalize the code.
</p>

<p>
The <pf>Drawing</pf> class does essentially three things: (1) it maintains a <pf>list</pf> of objects, (2) it invokes the <pf>draw</pf> function on each object, and (3) it invokes the <pf>step</pf> function on each object.
</p>

<p>
So here's one way we could make the code more general:
<ol>
<li><p>Define a new superclass, which we call <pf>Actor</pf>, that provides the two functions needed by <pf>Drawing</pf>:


<program>
<xi:include href="../../programs/advanced-topics/interfaces-1.cpp" parse="text"/>
</program>
</p></li>
<li><p>In the <pf>Drawing</pf> class, replace <pf>DrawablePolygon</pf> with <pf>Actor</pf>.</p></li>
<li><p>Any class that we want to draw must now extend <pf>Actor</pf>.</p></li>
</ol>
</p>

<p>
There's just one problem: <pf>DrawablePolygon</pf> already extends <pf>Polygon</pf>, and classes can extend only one superclass.
Also, the <pf>Actor</pf> class seems pointless, since the functions it defines don't do anything.
</p>

<p>
    <idx><h>inheritance</h></idx>
Java provides another mechanism for inheritance that solves these problems.
We can define <pf>Actor</pf> as an <pf>interface</pf> instead of a <pf>class</pf>, like this:
</p>

<program>
<xi:include href="../../programs/advanced-topics/interfaces-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>interface</h></idx>
Like a class definition, an <term>interface</term> definition contains functions.
But it contains only the declarations of the functions, not their implementations.
</p>

<p>
Like an abstract class, an interface specifies functions that must be provided by subclasses.
The difference is that an abstract class can implement some functions; an interface cannot.
</p>

<p>
All interface functions are <pf>public</pf> by default, since they are intended to be used by other classes.
So there is no need to declare them as <pf>public</pf>.
</p>

<p>
To inherit from an interface, you use the keyword <pf>implements</pf> instead of <pf>extends</pf>.
Here's a version of <pf>DrawablePolygon</pf> that extends <pf>Polygon</pf> and implements <pf>Actor</pf>.
So it inherits functions from <pf>Polygon</pf>, and it is required to provide the functions in <pf>Actor</pf>; namely <pf>draw</pf> and <pf>step</pf>:
</p>

<program>
<xi:include href="../../programs/advanced-topics/interfaces-3.cpp" parse="text"/>
</program>

<p>
In terms of inheritance, <pf>DrawablePolygon</pf> is both a <pf>Polygon</pf> and an <pf>Actor</pf>.
So the following assignments are legal:
</p>

<program>
<xi:include href="../../programs/advanced-topics/interfaces-4.cpp" parse="text"/>
</program>

<p>
And the same is true for subclasses of <pf>DrawablePolygon</pf>; these assignments are legal too:
</p>

<program label="advanced-topics_interfaces-program-1" interactive="activecode">
<xi:include href="../../programs/advanced-topics/interfaces-5.cpp" parse="text"/>
</program>

<p>
    <idx><h>polymorphism</h></idx>
Interfaces are another example of polymorphism.
<pf>a1</pf> and <pf>a2</pf> are the same type of variable, but they refer to objects with different types.
And similarly with <pf>p1</pf> and <pf>p2</pf>.
</p>

<p>
Classes may extend only one superclass, but they may implement as many interfaces as needed.
Java library classes often implement multiple interfaces.
</p>
</section>
