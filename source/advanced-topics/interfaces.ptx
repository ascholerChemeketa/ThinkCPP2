<section xml:id="advanced-topics_interfaces" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Interfaces</title>
<p>
You might be getting tired of polygons at this point.
Can't we draw anything else?
Of course we can, but <c>Drawing</c> is currently based on <c>DrawablePolygon</c>.
To draw other types of objects, we have to generalize the code.
</p>

<p>
The <c>Drawing</c> class does essentially three things: (1) it maintains a <c>list</c> of objects, (2) it invokes the <c>draw</c> function on each object, and (3) it invokes the <c>step</c> function on each object.
</p>

<p>
So here's one way we could make the code more general:
<ol>
<li><p>Define a new superclass, which we call <c>Actor</c>, that provides the two functions needed by <c>Drawing</c>:


<program xml:id="advanced-topics_interfaces-1">
<xi:include href="../../programs/advanced-topics/interfaces-1.cpp" parse="text"/>
</program>
</p></li>
<li><p>In the <c>Drawing</c> class, replace <c>DrawablePolygon</c> with <c>Actor</c>.</p></li>
<li><p>Any class that we want to draw must now extend <c>Actor</c>.</p></li>
</ol>
</p>

<p>
There's just one problem: <c>DrawablePolygon</c> already extends <c>Polygon</c>, and classes can extend only one superclass.
Also, the <c>Actor</c> class seems pointless, since the functions it defines don't do anything.
</p>

<p>
    <idx><h>inheritance</h></idx>
Java provides another mechanism for inheritance that solves these problems.
We can define <c>Actor</c> as an <c>interface</c> instead of a <c>class</c>, like this:
</p>

<program xml:id="advanced-topics_interfaces-2">
<xi:include href="../../programs/advanced-topics/interfaces-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>interface</h></idx>
Like a class definition, an <term>interface</term> definition contains functions.
But it contains only the declarations of the functions, not their implementations.
</p>

<p>
Like an abstract class, an interface specifies functions that must be provided by subclasses.
The difference is that an abstract class can implement some functions; an interface cannot.
</p>

<p>
All interface functions are <c>public</c> by default, since they are intended to be used by other classes.
So there is no need to declare them as <c>public</c>.
</p>

<p>
To inherit from an interface, you use the keyword <c>implements</c> instead of <c>extends</c>.
Here's a version of <c>DrawablePolygon</c> that extends <c>Polygon</c> and implements <c>Actor</c>.
So it inherits functions from <c>Polygon</c>, and it is required to provide the functions in <c>Actor</c>; namely <c>draw</c> and <c>step</c>:
</p>

<program xml:id="advanced-topics_interfaces-3">
<xi:include href="../../programs/advanced-topics/interfaces-3.cpp" parse="text"/>
</program>

<p>
In terms of inheritance, <c>DrawablePolygon</c> is both a <c>Polygon</c> and an <c>Actor</c>.
So the following assignments are legal:
</p>

<program xml:id="advanced-topics_interfaces-4">
<xi:include href="../../programs/advanced-topics/interfaces-4.cpp" parse="text"/>
</program>

<p>
And the same is true for subclasses of <c>DrawablePolygon</c>; these assignments are legal too:
</p>

<program xml:id="advanced-topics_interfaces-5" interactive="activecode">
<xi:include href="../../programs/advanced-topics/interfaces-5.cpp" parse="text"/>
</program>

<p>
    <idx><h>polymorphism</h></idx>
Interfaces are another example of polymorphism.
<c>a1</c> and <c>a2</c> are the same type of variable, but they refer to objects with different types.
And similarly with <c>p1</c> and <c>p2</c>.
</p>

<p>
Classes may extend only one superclass, but they may implement as many interfaces as needed.
Java library classes often implement multiple interfaces.
</p>
</section>
