<chapter xml:id="advanced-topics" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Advanced Topics</title>


<introduction>
<p>
    <idx><h>inheritance</h></idx>
    <idx><h>generalization</h></idx>
When we first looked at inheritance in <xref ref="eights">Chapter</xref>, our purpose was to avoid duplicating code.
We noticed that <q>decks of cards</q> and <q>hands of cards</q> had common functionality, and we designed a <pf>CardCollection</pf> class to provide it.
This technique is an example of <term>generalization</term>.
By generalizing the code, we were able to reuse it in the <pf>Deck</pf> and <pf>Hand</pf> classes.
</p>

<p>
    <idx><h>specialization</h></idx>
In <xref ref="conway">Chapter</xref>, we looked at inheritance from a different point of view.
When designing <pf>GridCanvas</pf> to represent a grid of cells, we extended <pf>Canvas</pf> and overrode its <pf>paint</pf> function.
This design is an example of <term>specialization</term>.
Using the code provided by <pf>Canvas</pf>, we created a specialized subclass with minimal additional code.
</p>

<p>
We didn't write the code for <pf>Canvas</pf>; it's part of the Java library.
But we were able to customize it for our own purposes.
In fact, the <pf>Canvas</pf> class was explicitly designed to be extended.
</p>

<p>
In this chapter, we'll explore the concept of inheritance more fully and present event-driven programming.
We'll continue to develop graphical simulations as a running example, but this time in varying shapes and colors!
</p>
</introduction>
<xi:include  href="polygon-objects.ptx" />
<xi:include  href="adding-color.ptx" />
<xi:include  href="regular-polygons.ptx" />
<xi:include  href="more-constructors.ptx" />
<xi:include  href="initial-drawing.ptx" />
<xi:include  href="blinking-polygons.ptx" />
<xi:include  href="interfaces.ptx" />
<xi:include  href="event-listeners.ptx" />
<xi:include  href="timers.ptx" />
<xi:include  href="vocabulary.ptx" />
<xi:include  href="exercises.ptx" />
</chapter>
