<section xml:id="advanced-topics_adding-color" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Adding Color</title>
<p>
Specialization is useful for adding new features to an existing class, especially when you can't (or don't want to) change its design.
For example, we can extend the <pf>Polygon</pf> class by adding a <pf>draw</pf> function and a <pf>Color</pf> attribute:
</p>

<program xml:id="advanced-topics_adding-color-1">
<xi:include href="../../programs/advanced-topics/adding-color-1.cpp" parse="text"/>
</program>

<p>
As a reminder, constructors are not inherited when you extend a class.
If you don't define a constructor, the compiler will generate one that does nothing.
</p>

<p>
The constructor for <pf>DrawablePolygon</pf> uses <pf>super</pf> to invoke the constructor for <pf>Polygon</pf>, which initializes the attributes <pf>npoints</pf>, <pf>xpoints</pf>, and <pf>ypoints</pf>.
Then <pf>DrawablePolygon</pf> initializes the <pf>color</pf> attribute to <pf>GRAY</pf>.
</p>

<p>
<pf>DrawablePolygon</pf> has the same attributes and functions that <pf>Polygon</pf> has, so you can use <pf>addPoint</pf> as before, or you can directly access <pf>npoints</pf>, <pf>xpoints</pf>, and <pf>ypoints</pf> (since they are <pf>public</pf>).
You can also use functions like <pf>contains</pf>, <pf>intersects</pf>, and <pf>translate</pf>.
</p>

<p>
The following code creates a <pf>DrawablePolygon</pf> with the same points as in the previous section and sets its color to <pf>GREEN</pf>:
</p>

<program xml:id="advanced-topics_adding-color-2">
<xi:include href="../../programs/advanced-topics/adding-color-2.cpp" parse="text"/>
</program>

</section>
