<section xml:id="advanced-topics_adding-color" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Adding Color</title>
<p>
Specialization is useful for adding new features to an existing class, especially when you can't (or don't want to) change its design.
For example, we can extend the <c>Polygon</c> class by adding a <c>draw</c> function and a <c>Color</c> attribute:
</p>

<program xml:id="advanced-topics_adding-color-1">
<xi:include href="../../programs/advanced-topics/adding-color-1.cpp" parse="text"/>
</program>

<p>
As a reminder, constructors are not inherited when you extend a class.
If you don't define a constructor, the compiler will generate one that does nothing.
</p>

<p>
The constructor for <c>DrawablePolygon</c> uses <c>super</c> to invoke the constructor for <c>Polygon</c>, which initializes the attributes <c>npoints</c>, <c>xpoints</c>, and <c>ypoints</c>.
Then <c>DrawablePolygon</c> initializes the <c>color</c> attribute to <c>GRAY</c>.
</p>

<p>
<c>DrawablePolygon</c> has the same attributes and functions that <c>Polygon</c> has, so you can use <c>addPoint</c> as before, or you can directly access <c>npoints</c>, <c>xpoints</c>, and <c>ypoints</c> (since they are <c>public</c>).
You can also use functions like <c>contains</c>, <c>intersects</c>, and <c>translate</c>.
</p>

<p>
The following code creates a <c>DrawablePolygon</c> with the same points as in the previous section and sets its color to <c>GREEN</c>:
</p>

<program xml:id="advanced-topics_adding-color-2">
<xi:include href="../../programs/advanced-topics/adding-color-2.cpp" parse="text"/>
</program>

</section>
