<section xml:id="advanced-topics_initial-drawing" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>An Initial Drawing</title>
<p>
Now that we have <c>DrawablePolygon</c> and <c>RegularPolygon</c>, let's take them for a test drive.
We'll need a <c>Canvas</c> for drawing them, so we define a new class, <c>Drawing</c>, that extends <c>Canvas</c>:
</p>

<program xml:id="advanced-topics_initial-drawing-1">
<xi:include href="../../programs/advanced-topics/initial-drawing-1.cpp" parse="text"/>
</program>
  
<program xml:id="advanced-topics_initial-drawing-2">
<xi:include href="../../programs/advanced-topics/initial-drawing-2.cpp" parse="text"/>
</program>

<p>
The <c>Drawing</c> class has an <c>ArrayList</c> of <c>DrawablePolygon</c> objects.
When we create a <c>Drawing</c> object, the list is initially empty.
The <c>add</c> function takes a <c>DrawablePolygon</c> and adds it to the list.
</p>

<p>
<c>Drawing</c> overrides the <c>paint</c> function that it inherits from <c>Canvas</c>.
<c>paint</c> loops through the list of <c>DrawablePolygon</c> objects and invokes <c>draw</c> on each one.
</p>

<p>
Here is an example that creates three <c>RegularPolygon</c> objects and draws them.
<xref ref="fig_drawing">Figure</xref> shows the result.
</p>

<program xml:id="advanced-topics_initial-drawing-3" interactive="activecode">
<xi:include href="../../programs/advanced-topics/initial-drawing-3.cpp" parse="text"/>
</program>
  
<program xml:id="advanced-topics_initial-drawing-4">
<xi:include href="../../programs/advanced-topics/initial-drawing-4.cpp" parse="text"/>
</program>
  <figure xml:id="fig_drawing" >
<caption>Initial drawing of three <c>RegularPolygon</c> objects.</caption>
<image width="75%" source="images/drawing.png" />
</figure>
<p>
The first block of code creates <c>RegularPolygon</c> objects with 3, 6, and 360 sides.
As you can see, a polygon with 360 sides is a pretty good approximation of a circle.
</p>

<p>
The second block of code translates the polygons to different locations.
The third block of code creates the <c>Drawing</c> and adds the polygons to it.
And the fourth block of code creates a <c>JFrame</c>, adds the <c>Drawing</c> to it, and displays the result.
</p>

<p>
Most of these pieces should be familiar, but one part of this program might surprise you.
When we create the <c>RegularPolygon</c> objects, we assign them to <c>DrawablePolygon</c> variables.
It might not be obvious why that's legal.
</p>

<p>
    <idx><h>IS-A</h></idx>
<c>RegularPolygon</c> extends <c>DrawablePolygon</c>, so every <c>RegularPolygon</c> object is also a <c>DrawablePolygon</c>.
The parameter of <c>Drawing.add</c> has to be a <c>DrawablePolygon</c>, but it can be any type of <c>DrawablePolygon</c>, including <c>RegularPolygon</c> and other subclasses.
</p>

<p>
    <idx><h>polymorphism</h></idx>
This design is an example of <term>polymorphism</term>, a fancy word that means <q>having many forms</q>.
<c>Drawing.add</c> is a polymorphic function, because the parameter can be one of many types.
And the <c>ArrayList</c> in <c>Drawing</c> is a polymorphic data structure, because the elements can be different types.
</p>
</section>
