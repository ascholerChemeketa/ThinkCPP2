<section xml:id="advanced-topics_initial-drawing" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>An Initial Drawing</title>
<p>
Now that we have <pf>DrawablePolygon</pf> and <pf>RegularPolygon</pf>, let's take them for a test drive.
We'll need a <pf>Canvas</pf> for drawing them, so we define a new class, <pf>Drawing</pf>, that extends <pf>Canvas</pf>:
</p>

<program xml:id="advanced-topics_initial-drawing-1">
<xi:include href="../../programs/advanced-topics/initial-drawing-1.cpp" parse="text"/>
</program>
  
<program xml:id="advanced-topics_initial-drawing-2">
<xi:include href="../../programs/advanced-topics/initial-drawing-2.cpp" parse="text"/>
</program>

<p>
The <pf>Drawing</pf> class has an <pf>ArrayList</pf> of <pf>DrawablePolygon</pf> objects.
When we create a <pf>Drawing</pf> object, the list is initially empty.
The <pf>add</pf> function takes a <pf>DrawablePolygon</pf> and adds it to the list.
</p>

<p>
<pf>Drawing</pf> overrides the <pf>paint</pf> function that it inherits from <pf>Canvas</pf>.
<pf>paint</pf> loops through the list of <pf>DrawablePolygon</pf> objects and invokes <pf>draw</pf> on each one.
</p>

<p>
Here is an example that creates three <pf>RegularPolygon</pf> objects and draws them.
<xref ref="fig_drawing">Figure</xref> shows the result.
</p>

<program xml:id="advanced-topics_initial-drawing-3" interactive="activecode">
<xi:include href="../../programs/advanced-topics/initial-drawing-3.cpp" parse="text"/>
</program>
  
<program xml:id="advanced-topics_initial-drawing-4">
<xi:include href="../../programs/advanced-topics/initial-drawing-4.cpp" parse="text"/>
</program>
  <figure xml:id="fig_drawing" >
<caption>Initial drawing of three <pf>RegularPolygon</pf> objects.</caption>
<image width="75%" source="images/drawing.png" />
</figure>
<p>
The first block of code creates <pf>RegularPolygon</pf> objects with 3, 6, and 360 sides.
As you can see, a polygon with 360 sides is a pretty good approximation of a circle.
</p>

<p>
The second block of code translates the polygons to different locations.
The third block of code creates the <pf>Drawing</pf> and adds the polygons to it.
And the fourth block of code creates a <pf>JFrame</pf>, adds the <pf>Drawing</pf> to it, and displays the result.
</p>

<p>
Most of these pieces should be familiar, but one part of this program might surprise you.
When we create the <pf>RegularPolygon</pf> objects, we assign them to <pf>DrawablePolygon</pf> variables.
It might not be obvious why that's legal.
</p>

<p>
    <idx><h>IS-A</h></idx>
<pf>RegularPolygon</pf> extends <pf>DrawablePolygon</pf>, so every <pf>RegularPolygon</pf> object is also a <pf>DrawablePolygon</pf>.
The parameter of <pf>Drawing.add</pf> has to be a <pf>DrawablePolygon</pf>, but it can be any type of <pf>DrawablePolygon</pf>, including <pf>RegularPolygon</pf> and other subclasses.
</p>

<p>
    <idx><h>polymorphism</h></idx>
This design is an example of <term>polymorphism</term>, a fancy word that means <q>having many forms</q>.
<pf>Drawing.add</pf> is a polymorphic function, because the parameter can be one of many types.
And the <pf>ArrayList</pf> in <pf>Drawing</pf> is a polymorphic data structure, because the elements can be different types.
</p>
</section>
