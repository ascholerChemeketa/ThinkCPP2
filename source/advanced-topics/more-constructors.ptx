<section xml:id="advanced-topics_more-constructors" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>More Constructors</title>
<p>
Classes in the Java library often have more than one constructor for convenience.
We can do the same with <c>RegularPolygon</c>.
For example, we can make the <c>color</c> parameter optional by defining a second constructor:
</p>

<program xml:id="advanced-topics_more-constructors-1">
<xi:include href="../../programs/advanced-topics/more-constructors-1.cpp" parse="text"/>
</program>

<p>
The keyword <c>this</c>, when used in a constructor, invokes another constructor in the same class.
It has a similar syntax as the keyword <c>super</c>, which invokes a constructor in the superclass.
</p>

<p>
Similarly, we could make the <c>radius</c> parameter optional too:
</p>

<program xml:id="advanced-topics_more-constructors-2">
<xi:include href="../../programs/advanced-topics/more-constructors-2.cpp" parse="text"/>
</program>

<p>
Now, suppose we invoke the <c>RegularPolygon</c> constructor like this:
</p>

<program xml:id="advanced-topics_more-constructors-3">
<xi:include href="../../programs/advanced-topics/more-constructors-3.cpp" parse="text"/>
</program>

<p>
Because we provide only one integer argument, Java calls the third constructor, which calls the second one, which calls the first one.
The result is a <c>RegularPolygon</c> with the specified value of <c>nsides</c>, <c>6</c>, the default value of <c>radius</c>, <c>50</c>, and the default color, <c>GRAY</c>.
</p>

<p>
When writing constructors, it's a good idea to validate the values you get as arguments.
Doing so prevents run-time errors later in the program, which makes the code easier to debug.
</p>

<p>
For <c>RegularPolygon</c>, the number of sides should be at least three, the radius should be greater than zero, and the color should not be <c>null</c>.
We can add the following lines to the first constructor:
</p>

<program xml:id="advanced-topics_more-constructors-4">
<xi:include href="../../programs/advanced-topics/more-constructors-4.cpp" parse="text"/>
</program>

<p>
    <idx><h>throw</h></idx>
    <idx><h>statement</h><h>throw</h></idx>
In this example, we <c>throw</c> an exception to indicate that one of the arguments is invalid.
By default, these exceptions terminate the program and display an error message along with the stack trace.
</p>

<p>
Because we added this code to the most general constructor, we don't have to add it to the others.
</p>
</section>
