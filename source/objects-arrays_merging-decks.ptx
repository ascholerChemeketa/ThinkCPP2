<section xml:id="objects-arrays_merging-decks" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Merging Decks</title>
<p>
<idx><h>merge</h></idx>
The next helper method we need is <c>merge</c>, which takes two sorted subdecks and returns a new deck containing all cards from both decks, in order.
Here's what the algorithm looks like in pseudocode, assuming the subdecks are named <c>d1</c> and <c>d2</c>:
</p>

<program xml:id="objects-arrays_merging-decks-1" interactive="activecode">
<xi:include href="../programs/objects-arrays_merging-decks-1.cpp" parse="text"/>
</program>

<p>
An exercise at the end of the chapter asks you to implement <c>merge</c>.
It's a little tricky, so be sure to test it with different subdecks.
Once your <c>merge</c> method is working, you can use it to write a simplified version of merge sort:
</p>

<program xml:id="objects-arrays_merging-decks-2" interactive="activecode">
<xi:include href="../programs/objects-arrays_merging-decks-2.cpp" parse="text"/>
</program>

<p>
If you have working versions of <c>subdeck</c>, <c>selectionSort</c>, and <c>merge</c>, you should have no trouble getting this method working.
But it is still not very efficient, because it uses <c>selectionSort</c> to sort the subdecks.
We can make it more efficient if we use <c>mergeSort</c> instead, but that means we have to make it recursive!
</p>
</section>
