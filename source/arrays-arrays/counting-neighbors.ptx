<section xml:id="arrays-arrays_counting-neighbors" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Counting Neighbors</title>
<p>
    <idx><h>neighbor</h></idx>
Now that you know about <pf>try</pf> and <pf>catch</pf>, we can use them to implement a useful function in <pf>GridCanvas</pf>.
Part of the GoL logic is to count the number of live neighbors.
Most cells have eight neighbors, as shown in <xref ref="fig_neighbors">Figure</xref>.
</p>

<p>
However, cells on the edges and in the corners have fewer neighbors.
If we try to count all possible neighbors, we'll go out of bounds.
The following function uses a <pf>try</pf>-<pf>catch</pf> statement to deal with these special cases:
</p>

<program xml:id="arrays-arrays_counting-neighbors-1">
<xi:include href="../../programs/arrays-arrays/counting-neighbors-1.cpp" parse="text"/>
</program>
  <figure xml:id="fig_neighbors" >
<caption>Cells in the interior of the grid have eight neighbors.
Cells in the corners and along the edges have fewer neighbors.</caption>
<image width="73%" source="images/grid.png" />
</figure>
<p>
The <pf>test</pf> function takes a row index, <pf>r</pf>, and a column index, <pf>c</pf>.
It tries to look up the <pf>Cell</pf> at that location.
If both indexes are in bounds, the <pf>Cell</pf> exists.
In that case, <pf>test</pf> returns <pf>1</pf> if the <pf>Cell</pf> is on.
Otherwise, it skips the catch block and returns <pf>0</pf>.
</p>

<p>
If either index is out of bounds, the array lookup throws an exception, but the catch block ignores it.
Then <pf>test</pf> resumes and returns <pf>0</pf>.
So the non-existent cells around the perimeter are considered to be off.
</p>

<p>
Now we can use <pf>test</pf> to implement <pf>countAlive</pf>, which takes a grid location, <pf>(r, c)</pf>, and returns the number of live neighbors surrounding that location:
</p>

<program xml:id="arrays-arrays_counting-neighbors-2">
<xi:include href="../../programs/arrays-arrays/counting-neighbors-2.cpp" parse="text"/>
</program>

<p>
Because <pf>test</pf> handles <q>out of bounds</q> exceptions, <pf>countAlive</pf> works for any values of <pf>r</pf> and <pf>c</pf>.
</p>
</section>
