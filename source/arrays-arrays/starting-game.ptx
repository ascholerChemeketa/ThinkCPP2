<section xml:id="arrays-arrays_starting-game" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Starting the Game</title>
<p>
Now we're ready to implement the game.
To encapsulate the rules of GoL, we define a class named <pf>Conway</pf>.
The <pf>Conway</pf> class <q>has<nbsp/>a</q> <pf>GridCanvas</pf> that represents the state of the game.
</p>

<p>
This constructor makes a <pf>GridCanvas</pf> with 5 rows and 10 columns, with cells that are 20 pixels wide and high.
It then sets up the initial conditions:
</p>

<program xml:id="arrays-arrays_starting-game-1">
<xi:include href="../../programs/arrays-arrays/starting-game-1.cpp" parse="text"/>
</program>

<p>
Before we implement the rest of the game, we'll write a <pf>main</pf> function that creates a <pf>Conway</pf> object and displays it.
We can use this function to test <pf>Cell</pf> and <pf>GridCanvas</pf>, and to develop the other functions we need:
</p>

<program xml:id="arrays-arrays_starting-game-2" interactive="activecode">
<xi:include href="../../programs/arrays-arrays/starting-game-2.cpp" parse="text"/>
</program>

<p>
    <idx><h>JFrame</h></idx>
After constructing the <pf>game</pf> object, <pf>main</pf> constructs a <pf>JFrame</pf>, which creates a window on the screen.
The <pf>JFrame</pf> is configured\footnotemark to exit the program when closed.
Resizing the window is disabled.
</p>

<p>
<pf>main</pf> then adds the <pf>GridCanvas</pf> inside the frame, resizes (<q>packs</q>) the frame to fit the canvas, and makes the frame visible.
<xref ref="fig_conway">Figure</xref> shows the result.
</p>
<figure xml:id="fig_conway" >
<caption>Screenshot of the initial <pf>Conway</pf> application.</caption>
<image width="73%" source="images/conway.png" />
</figure>
</section>
