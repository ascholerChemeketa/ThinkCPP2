<section xml:id="variables-operators_arithmetic-operators"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Arithmetic Operators</title>
  <p>
    <idx>
      <h>operator</h>
    </idx>
<idx>
      <h>addition</h>
      <h>integer</h>
    </idx>
<term>Operators</term> are symbols that represent simple computations.
    For example, the addition operator is <c>+</c>, subtraction is <c>-</c>, multiplication is <c>*</c>,
    and division is <c>/</c>. </p>

  <p> The following program converts a time of day to minutes: </p>

  <program xml:id="variables-operators_arithmetic-operators-1"
           interactive="activecode">
<xi:include href="../programs/variables-operators_arithmetic-operators-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>expression</h>
    </idx>
<idx>
      <h>operand</h>
    </idx> In this program, <c>hour * 60 + minute</c> is an <term>expression</term>, which
    represents a single value to be computed (<c>719</c>). When the program runs, each variable is
    replaced by its current value, and then the operators are applied. The values that operators
    work with are called <term>operands</term>. </p>

  <p> Expressions are generally a combination of numbers, variables, and operators. When compiled
    and executed, they become a single value. For example, the expression <c>1 + 1</c> has the value <c>2</c>.
    In the expression <c>hour - 1</c>, C++ replaces the variable with its value, yielding <c>11 - 1</c>, which
    has the value <c>10</c>. </p>

  <p> In the expression <c>hour * 60 + minute</c>, both variables get replaced, yielding <c>11 * 60 + 59</c>. The multiplication
    happens first, yielding <c>660 + 59</c>. Then the addition yields <c>719</c>. </p>

  <insight><p>
    A variable on the left hand side of <c>=</c> is being written to. A variable on the right hand side of <c>=</c>
    or in any other expression is being read from. The entire right hand side of an assignment statement
    is evaluated to find a single value, which is then stored in the variable on the left hand side.
  </p></insight>

  <p> Addition, subtraction, and multiplication all do what you expect, but you might be surprised
    by division. For example, the following fragment tries to compute the fraction of an hour that
    has elapsed: </p>

  <program xml:id="variables-operators_arithmetic-operators-2"
           interactive="activecode">
<xi:include href="../programs/variables-operators_arithmetic-operators-2.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>division</h>
      <h>integer</h>
    </idx>
<idx>
      <h>integer division</h>
    </idx> This result often confuses people. The value of <c>minute</c> is <c>45</c>,
    and 45 divided by 60 should be 0.75, not 0. The problem is that C++ performs <term>integer
    division</term> when the operands are integers. By design, integer division always rounds toward
    zero, even in cases like this one.</p>

  <insight><p>When dividing integers, C++ does whole number division. Something like <c>7 / 3</c>
    asks <q>how many whole times does 3 divide into 7?</q>. The answer is 2.
  </p></insight>

  <p> As an alternative, we can calculate a percentage rather than a fraction: </p>

  <program xml:id="variables-operators_arithmetic-operators-3"
           interactive="activecode">
<xi:include href="../programs/variables-operators_arithmetic-operators-3.cpp" parse="text"/>
</program>

  <p>Because the multiplication happens first, we get <c>4500 / 60</c>, which is <c>75</c>.
  (The multiplication would happen first here no matter what, but the parentheses help make
  the intended order of operations crystal clear.)</p>

  <note><p>Also note that the print statement is broken up over multiple lines. Remember that C++ does not care about extra whitespace (things like spaces and newlines). Breaking up a long statement of code over multiple lines can help make it easier to read. Just make sure to break up code at logical places - like before operators - and to use indentation to make it clear that the extra lines are a continuation of a statements.</p></note>

  <p>The order of operations is critical here. If we change the logic to do the division first, as shown below, we are back to 0 for our result. The first thing evaluated is <c>minute / 60</c>, which is 0. Multiplying that by 100 results in 0.</p>

  <program xml:id="variables-operators_arithmetic-operators-4"
           interactive="activecode">
<xi:include href="../programs/variables-operators_arithmetic-operators-4.cpp" parse="text"/>
</program>

</section>