<section xml:id="input-output_string-streams"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>String Streams</title>

  <p>One final kind of stream is worth discussion: the <pf>stringstream</pf>. This is a stream that reads from or writes to a string. It can be used as an alternative to <pf>std::format</pf> for building up a string with data from variables. It also can be used to imitate writing to a file. If we want to test out code that is supposed to write to a file, we can instead have it write to a <pf>stringstream</pf> and then print out the string that was produced. If the output looks good, we know that if we successfully open a file and write to that instead of the <pf>stringstream</pf>, our program should work correctly.</p>

  <p>The <pf>stringstream</pf> data type is defined in the <pf>&lt;sstream></pf> library. Once we create a variable of type <pf>stringstream</pf> we can then immediately write to it using <pf>&lt;&lt;</pf> (there is no file to open). Once we are done writing, we can use the <pf>.str()</pf> method to ask the string stream for the string that was built up:</p>

  <program label="input-output_string-streams-1"  interactive="activecode">
<xi:include href="../../programs/input-output/string-streams-1.cpp" parse="text"/>
</program>

  <p>It is also possible to read from a string stream. This is done by using the <pf>.str()</pf> method to set the string that we want to read from. Once we have set the string, we can use <pf>>></pf> to read from it just like we would from a file or the console:</p>

  <program label="input-output_string-streams-2"  interactive="activecode">
<xi:include href="../../programs/input-output/string-streams-2.cpp" parse="text"/>
</program>

  <p>Notice that everything after setting up the stringstream looks just like reading from a file. We even still use <pf>eof()</pf> even though there isn't really a file that we are reading from - when working with a <pf>stringstream</pf>, <pf>eof()</pf> means <q>end of the stringstream</q>.</p>

  
  <exercise label="input-output_string-streams-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="show">
    <statement>
      <p>Construct a block of code that uses a string stream to break <pf>"April 22 2025"</pf> into the string <pf>"April"</pf> and the integers <pf>25</pf> and <pf>2025</pf>.</p>
    </statement>
    <blocks>
      <block name="date">
        <cline>string date = "April 22 2025";</cline>
      </block>
      <block name="ss" depends="date">
        <choice correct="yes">
          <cline>stringstream parser;</cline>
          <cline>parser.str(date);</cline>
        </choice>
        <choice>
          <cline>stringstream parser;  </cline>
          <cline>stringstream.str(date);</cline>
        </choice>
      </block>
      <block name="variables">
        <cline>string month;</cline>
        <cline>int day, year;</cline>
      </block>
      <block name="read" depends="ss variables">
        <choice correct="yes">
          <cline><![CDATA[parser >> month >> day >> year;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[date >> month >> day >> year;]]></cline>
        </choice>
      </block>
    </blocks>
  </exercise>

</section>