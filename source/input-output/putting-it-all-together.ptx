<section xml:id="input-output_putting-it-all-together" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Putting It All Together</title>
<p>
At this point, you have seen enough Java to write useful programs that solve everyday problems.
You can (1) import Java library classes, (2) create a <c>Scanner</c>, (3) get input from the keyboard, (4) format output with <c>printf</c>, and (5) divide and mod integers.
Now we will put everything together in a complete program:
</p>

<p>
    <idx><h>Convert.java</h></idx>
</p>

<listing filename="Convert.java">
<program xml:id="input-output_putting-it-all-together-1" interactive="activecode">
<xi:include href="../../programs/input-output/putting-it-all-together-1.cpp" parse="text"/>
</program>
</listing>

<p>
Although not required, all variables and constants are declared at the top of <c>main</c>.
This practice makes it easier to find their types later on, and it helps the reader know what data is involved in the algorithm.
</p>

<p>
    <idx><h>documentation</h></idx>
For readability, each major step of the algorithm is separated by a blank line and begins with a comment.
The class also includes a documentation comment (<c>/**</c>), which you can learn more about in <xref ref="javadoc">Appendix</xref>.
</p>

<p>
Many algorithms, including the <c>Convert</c> program, perform division and modulo together.
In both steps, you divide by the same number (<c>IN_PER_FOOT</c>).
</p>

<p>
When statements including <c>System.out.printf</c> get long (generally wider than 80 characters), a common style convention is to break them across multiple lines.
The reader should never have to scroll horizontally.
</p>
</section>
