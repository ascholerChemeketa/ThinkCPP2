<section xml:id="input-output_format-numbers"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Formatting Numbers</title>

  <introduction>
    <p>Normally when you print out a floating point number, it will be printed with 6 significant
      digits (xxx.xxx or x.xxxxxx). This is not always what you want. For example, if you are
      printing out a currency value, you probably want to print out 2 digits after the decimal
      point. <pf>std::format</pf> provides tools to help us handle situations like these.</p>
    <p>Formatting instructions are placed inside of the <pf>{}</pf> representing an item. The syntax is:</p>

    <program>{:[[fill]align][sign]["#"][0][width][precision][type]}</program>

    <p>Don't panic! Each part is optional and most of the time you only need to specify one or two
      parts. We won't worry about covering every possible option or every possible value for the
      options. If you ever need to, you can look up a <url hrref="https://github.com/paulkazusek/std_format_cheatsheet">std::format
      cheat sheet</url> on the web.</p>
  </introduction>

  <subsection>
    <title>sign</title>
    <p>By default, the sign of a number is only printed if it is negative. If you want to always
      print the sign, you can specify a <pf>+</pf> or <pf> </pf> in the <pf>[sign]</pf> location. Examine the spacing in
      this next program. <pf>_</pf> is used around items to make it clear where spaces are being added by
      <pf>format</pf>:</p>

    <listing>
    <program label="input-output_format-numbers-program-1"
             interactive="activecode">
<xi:include href="../../programs/input-output/format-numbers-1.cpp" parse="text"/>
</program>
    </listing>
  </subsection>

  <subsection>
    <title>precision</title>
    <p>In the <pf>[precision]</pf> spot, a <pf>.</pf> followed by a number specifies a number of digits to
      include. By default, this is a count of significant digits (those to the left and right of the
      decimal place). When formatting 123.456789, an attempt to format to 2 decimal places will
      force the number to be written in scientific notation using just <pf>1.2</pf>. 3 digits will result
      in no decimal. 4+ will allow for some decimal places:</p>

    <listing>
    <program label="input-output_format-numbers-program-2"
             interactive="activecode">
<xi:include href="../../programs/input-output/format-numbers-2.cpp" parse="text"/>
</program>
    </listing>

    <p>Often times, what we really want to specify is a number of decimal places to print. To do
      that, we need to add on a <pf>[type]</pf> specifier. In this case, we want the type <pf>f</pf> for <q>fixed
      point</q>. We can also use <pf>e</pf> to specify that we want to force scientific notation.</p>

    <listing>
    <program label="input-output_format-numbers-program-3"
             interactive="activecode">
<xi:include href="../../programs/input-output/format-numbers-3.cpp" parse="text"/>
</program>
    </listing>
  </subsection>

  <subsection>
    <title>type</title>
    <p>In addition to using <pf>f</pf> and <pf>e</pf> in the <pf>[type]</pf> spot to control the formatting of doubles,
      we can use it to force numeric (or potentially numeric) values to output in another format: <ul>
        <li><pf>c</pf> Output as a character</li>
        <li><pf>b</pf> Output an int as binary</li>
        <li><pf>x</pf> Output an hexadecimal</li>
      </ul>
    </p>

    <listing>
    <program label="input-output_format-numbers-program-4"
             interactive="activecode">
<xi:include href="../../programs/input-output/format-numbers-4.cpp" parse="text"/>
</program>
    </listing>
  </subsection>

  <exercise label="input-output_format-numbers-ex-1">
    <statement>
      <p>Match each format code with its description.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <cardsort>
      <match>
        <premise>{:+}</premise>
        <response>Print the sign of a number even if it is positive</response>
      </match>
      <match>
        <premise>{:.5}</premise>
        <response>Print to 5 significant digits</response>
      </match>
      <match>
        <premise>{:.5f}</premise>
        <response>Print with a fixed decimal place and 5 decimal places</response>
      </match>
      <match>
        <premise>{:c}</premise>
        <response>Print the number as the ASCII character it represents</response>
      </match>
    </cardsort>
  </exercise>

</section>