<section xml:id="immutable-objects_strings-are-immutable" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Strings Are Immutable</title>
<p>
If the Java library didn't have a <c>String</c> class, we would have to use character arrays to store and manipulate text.
Operations like concatenation<nbsp/>(<c>+</c>), <c>indexOf</c>, and <c>substring</c> would be difficult and inconvenient.
Fortunately, Java does have a <c>String</c> class that provides these and other functions.
</p>

<p>
<idx><h>toUpperCase</h></idx>
<idx><h>toLowerCase</h></idx>
<idx><h>immutable</h></idx>
For example, the functions <c>toLowerCase</c> and <c>toUpperCase</c> convert uppercase letters to lowercase, and vice versa.
These functions are often a source of confusion, because it sounds like they modify strings.
But neither these functions nor any others can change a string, because strings are <term>immutable</term>.
</p>

<p>
When you invoke <c>toUpperCase</c> on a string, you get a new <c>String</c> object as a result.
For example:
</p>

<program xml:id="immutable-objects_strings-are-immutable-1">
<xi:include href="../programs/immutable-objects_strings-are-immutable-1.cpp" parse="text"/>
</program>

<p>
After these statements run, <c>upperName</c> refers to the string <c>"ALAN TURING"</c>.
But <c>name</c> still refers to <c>"Alan Turing"</c>.
A common mistake is to assume that <c>toUpperCase</c> somehow affects the original string:
</p>

<program xml:id="immutable-objects_strings-are-immutable-2">
<xi:include href="../programs/immutable-objects_strings-are-immutable-2.cpp" parse="text"/>
</program>

<p>
The previous code displays <c>"Alan Turing"</c>, because the value of <c>name</c>, which refers to the original <c>String</c> object, never changes.
If you want to change <c>name</c> to be uppercase, then you need to assign the return value:
</p>

<program xml:id="immutable-objects_strings-are-immutable-3">
<xi:include href="../programs/immutable-objects_strings-are-immutable-3.cpp" parse="text"/>
</program>

<p>
<idx><h>replace</h></idx>
A similar function is <c>replace</c>, which finds and replaces instances of one string within another.
This example replaces <c>"Computer Science"</c> with <c>"CS"</c>:
</p>

<program xml:id="immutable-objects_strings-are-immutable-4">
<xi:include href="../programs/immutable-objects_strings-are-immutable-4.cpp" parse="text"/>
</program>

<p>
As with <c>toUpperCase</c>, assigning the return value (to <c>text</c>) is important.
If you don't assign the return value, invoking <c>text.replace</c> has no effect.
</p>

<p>
Strings are immutable by design, because it simplifies passing them as parameters and return values.
And since the contents of a string can never change, two variables can reference the same string without one accidentally corrupting the other.
</p>
</section>
