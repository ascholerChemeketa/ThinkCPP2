<section xml:id="input-output_reading-error-messages" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Reading Error Messages</title>
<p>
Notice that the values you pass to <c>printf</c> are separated by commas.
If you are used to using the <c>+</c> operator to concatenate strings, you might write something like this by accident:
</p>

<program xml:id="input-output_reading-error-messages-1">
<xi:include href="../programs/input-output_reading-error-messages-1.cpp" parse="text"/>
</program>

<p>
This line of code is legal, so the compiler won't catch the mistake.
Instead, when you run the program, it causes an exception:
</p>

<p>
<idx><h>MissingFormatArgumentException</h></idx>
<idx><h>exception</h><h>MissingFormatArgument</h></idx>
</p>

<console>
<output>
Exception in thread "main" java.util.MissingFormatArgumentException:
Format specifier '%d'
    at java.util.Formatter.format(Formatter.java:2519)
    at java.io.PrintStream.format(PrintStream.java:970)
    at java.io.PrintStream.printf(PrintStream.java:871)
    at Example.main(Example.java:10)
</output>
</console>

<p>
As you saw in <xref ref="exception">Section</xref>, the error message includes the name of the exception, <c>MissingFormatArgumentException</c>, followed by additional details, <c>Format specifier '%d'</c>.
That means it doesn't know what value to substitute for <c>%d</c>.
</p>

<p>
The problem is that concatenation happens first, before <c>printf</c> executes.
If the value of <c>inch</c> is <c>100</c>, the result of concatenation is <c>"inches = %d100"</c>.
So <c>printf</c> gets the format string, but it doesn't get any values to format.
</p>

<p>
<idx><h>stack trace</h></idx>
The error message also includes a <term>stack trace</term> that shows the function that was running when the error was detected, <c>java.util.Formatter.format</c>; the function that ran it, <c>java.io.PrintStream.format</c>; the function that ran <term>that</term>, <c>java.io.PrintStream.printf</c>; and finally the function you actually wrote, <c>Example.main</c>.
</p>

<p>
Each line also names the source file of the function and the line it was on (e.g., <c>Example.java:10</c>).
That's a lot of information, and it includes function names and filenames you have no reason to know at this point.
But don't be overwhelmed.
</p>

<p>
When you see an error message like this, read the first line carefully to see <term>what</term> happened.
Then read the last line to see <term>where</term> it happened.
In some IDEs, you can click the error message, and it will take you to the line of code that was running.
But remember that where the error is discovered is not always where it was caused.
</p>
</section>
