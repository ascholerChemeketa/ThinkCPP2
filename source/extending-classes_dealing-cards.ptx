<section xml:id="extending-classes_dealing-cards">
<title>Dealing Cards</title>
<p>
To begin the game, we need to deal cards to each of the players.
And during the game, we need to move cards between hands and piles.
If we add the following method to <c>CardCollection</c>, it can meet both of these requirements:
</p>

<program>
public void deal(CardCollection that, int n) {
    for (int i = 0; i &lt; n; i++) {
        Card card = popCard();
        that.addCard(card);
    }
}
</program>

<p>
The <c>deal</c> method removes cards from the collection it is invoked on, <c>this</c>, and adds them to the collection it gets as a parameter, <c>that</c>.
The second parameter, <c>n</c>, is the number of cards to deal.
We will use this method to implement <c>dealAll</c>, which deals (or moves) all of the remaining cards:
</p>

<program>
public void dealAll(CardCollection that) {
    int n = cards.size();
    deal(that, n);
}
</program>

<p>
At this point, we can create a <c>Deck</c> and start dealing cards.
Here's a simple example that deals five cards to a hand, and deals the rest into a draw pile:
</p>

<program>
Deck deck = new Deck("Deck");
deck.shuffle();

Hand hand = new Hand("Hand");
deck.deal(hand, 5);
hand.display();

Hand drawPile = new Hand("Draw Pile");
deck.dealAll(drawPile);
System.out.printf("Draw Pile has %d cards.\n",
                  drawPile.size());
</program>

<p>
Because the deck is shuffled randomly, you should get a different hand each time you run this example.
The output will look something like this:
</p>

<console>
<output>
Hand:
5 of Diamonds
Ace of Hearts
6 of Clubs
6 of Diamonds
2 of Clubs

Draw Pile has 47 cards.
</output>
</console>

<p>
If you are a careful reader, you might notice something strange about this example.
Take another look at the definition of <c>deal</c>.
Notice that the first parameter is supposed to be a <c>CardCollection</c>.
But we invoked it like this:
</p>

<program>
Hand hand = new Hand("Hand");
deck.deal(hand, 5);
</program>

<p>
The argument is a <c>Hand</c>, not a <c>CardCollection</c>.
So why is this example legal?
</p>

<p>
It's because <c>Hand</c> is a subclass of <c>CardCollection</c>, so a <c>Hand</c> object is also considered to be a <c>CardCollection</c> object.
If a method expects a <c>CardCollection</c>, you can give it a <c>Hand</c>, a <c>Deck</c>, or a <c>CardCollection</c>.
</p>

<p>
But it doesn't work the other way around: not every <c>CardCollection</c> is a <c>Hand</c>, so if a method expects a <c>Hand</c>, you have to give it a <c>Hand</c>, not a <c>CardCollection</c> or a <c>Deck</c>.
</p>

<p>
If it seems strange that an object can belong to more than one type, remember that this happens in real life too.
Every cat is also a mammal, and every mammal is also an animal.
But not every animal is a mammal, and not every mammal is a cat.
</p>
</section>
