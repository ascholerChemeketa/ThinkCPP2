<section xml:id="immutable-objects_vocabulary">
<title>Vocabulary</title>
<ul>
<li>
<title>object-oriented:</title>
<p>
<idx><h>object-oriented</h></idx>
A way of organizing code and data into objects, rather than independent methods.</p></li>
<li>
<title>object:</title>
<p>
<idx><h>object</h></idx>
A collection of related data that comes with a set of methods that operate on the data.</p></li>
<li>
<title>primitive:</title>
<p>
<idx><h>primitive</h></idx>
A data type that stores a single value and provides no methods.</p></li>
<li>
<title>immutable:</title>
<p>
<idx><h>immutable</h></idx>
An object that, once created, cannot be modified.
Strings are immutable by design.</p></li>
<li>
<title>wrapper class:</title>
<p>
<idx><h>wrapper class</h></idx>
Classes in <c>java.lang</c> that provide constants and methods for working with primitive types.</p></li>
<li>
<title>parse:</title>
<p>
<idx><h>parse</h></idx>
In <xref ref="variables">Chapter</xref>, we defined <em>parse</em> as what the compiler does to analyze a program.
Now you know that it means to read a string and interpret or translate it.</p></li>
<li>
<title>empty array:</title>
<p>
<idx><h>empty array</h></idx>
An array with no elements and a length of zero.</p></li>
<li>
<title>design process:</title>
<p>
<idx><h>design process</h></idx>
A process for determining what methods a class or program should have.</p></li>
<li>
<title>encapsulate:</title>
<p>
<idx><h>encapsulate</h></idx>
To wrap data inside an object, or to wrap statements inside a method.</p></li>
<li>
<title>generalize:</title>
<p>
<idx><h>generalize</h></idx>
To replace something unnecessarily specific (like a constant value) with something appropriately general (like a variable or parameter).</p></li>
</ul>
</section>
