<section xml:id="conditionals-logic_boolefunctions"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Boolean functions</title>
  <p>
    <idx>
      <h>boolean</h>
    </idx>
    <idx>
      <h>function</h>
      <h>boolean</h>
    </idx> Functions can return <c>boolean</c> values, just like any other type, which
    is often convenient for hiding tests inside functions. If you think you might want to check the parity (evenness or oddness) of numbers often, you
    might want to <q>wrap</q> this code up in a function, as follows:</p>

  <program xml:id="conditionals-logic_boolefunctions-5">
<xi:include href="../../programs/conditionals-logic/boolefunctions-5.cpp" parse="text"/>
</program>

  <p> The name of this function is <c>isOdd</c>. It is common to give <c>boolean</c> functions names that sound
    like yes/no questions. The code itself is straightforward, although it is longer than it needs to be. There are multiple ways to write the code for that function. We could return the answer as soon
    as it is identified:</p>

  <program xml:id="conditionals-logic_boolefunctions-6a">
<xi:include href="../../programs/conditionals-logic/boolefunctions-6a.cpp" parse="text"/>
</program>

  <p>As soon as the code hits a `return`, it leaves the function and returns the value. So in that
    version the function will never reach the line where the comment is. Returning from many places
    in a function can get confusing, so many programmers prefer to try to stick to one return
    statement at the very end. Even if we restrict ourselves to that structure, we can simplify
    things by recognizing there is no need to change the variable to `false` if the number is not
    odd:</p>

  <program xml:id="conditionals-logic_boolefunctions-6b">
<xi:include href="../../programs/conditionals-logic/boolefunctions-6b.cpp" parse="text"/>
</program>

  <p>Finally, we could recognize that the expression `number % 2 == 1` has a boolean value that matches what we want to return. That means we could write the function as just:</p>

  <program xml:id="conditionals-logic_boolefunctions-6c">
<xi:include href="../../programs/conditionals-logic/boolefunctions-6c.cpp" parse="text"/>
</program>
  <exercise label="bool_fun_1">
    <statement>
      <p>Match the conditional statement to its output, assuming it is outputted using cout and x =
        3.</p>
    </statement>
    <feedback>
      Try again!
    </feedback>
    <matches>
      <match order="1">
        <premise>(x % 2 == 1 &amp;&amp; x == 7)</premise>
        <response>0</response>
      </match>
      <match order="2">
        <premise>(x % 2 == 0 || x + 1 == 4)</premise>
        <response>1</response>
      </match>
    </matches>
  </exercise>

  <exercise label="bool_fun_2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that first checks if a number <em>x</em> is positive, then checks
        if it's even, and then prints out a message to classify the number. It prints <q>both</q> if
        the number is both positive and even, <q>even</q> if the number is only even, <q>positive</q>
        if the number is only positive, and finally <q>neither</q> if it is neither postive nor
        even.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>bool positiveFlag = (x &gt; 0);</cline>
      </block>
      <block order="14"
             correct="no">
        <cline><![CDATA[bool positiveFlag = (x < 0); ]]></cline>
      </block>
      <block order="2">
        <cline>bool evenFlag = (x % 2 == 0);</cline>
      </block>
      <block order="10"
             correct="no">
        <cline>bool evenFlag = (x % 2 == 1); </cline>
      </block>
      <block order="11">
        <cline>if (evenFlag &amp;&amp; positiveFlag) {</cline>
      </block>
      <block order="3"
             correct="no">
        <cline>if (evenFlag || positiveFlag) {  </cline>
      </block>
      <block order="9">
        <cline> cout &lt;&lt; "both";</cline>
      </block>
      <block order="6">
        <cline>} else if (evenFlag) {</cline>
      </block>
      <block order="4">
        <cline> cout &lt;&lt; "even";</cline>
      </block>
      <block order="13">
        <cline>} else if (positiveFlag) {</cline>
      </block>
      <block order="7">
        <cline><![CDATA[ cout << "positive";]]></cline>
      </block>
      <block order="12">
        <cline>} else {</cline>
      </block>
      <block order="8">
        <cline> cout &lt;&lt; "neither";</cline>
      </block>
      <block order="5">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>
</section>