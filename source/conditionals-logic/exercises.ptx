<exercises xml:id="conditionals-logic_exercises"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Exercises</title>

  <exercise label="cond_recc_p5" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a block of code that prints <q>Pick me!</q> if x is
            equal to y, <q>Choose me!</q> if x is less than y, OR <q>Love me!</q>
            if x + y is even.</p>
    </statement>
    <blocks>
      <block order="5">
        <choice correct="yes">
          <cline>if (x == y) {</cline>
        </choice>
        <choice>
          <cline>if (x = y) { </cline>
        </choice>
      </block>
      <block order="4">
        <cline><![CDATA[ cout << "Pick me!";]]></cline>
        <cline>}</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>else if (y &gt; x) {</cline>
        </choice>
        <choice>
          <cline>if (x &lt; y) { </cline>
        </choice>
      </block>
      <block order="1">
        <cline><![CDATA[ cout << "Choose me!";]]></cline>
        <cline>}</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>else if ((x + y) % 2 == 0) {</cline>
        </choice>
        <choice>
          <cline>else (x + y % 2 == 0) { </cline>
        </choice>
      </block>
      <block order="8">
        <cline>else if (x + y % 2 == 0) { </cline>
      </block>
      <block order="10">
        <cline><![CDATA[ cout << "Love me!"; }]]></cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="cond_recc_p3" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>Construct a function that returns the difference of a and b if the result
            would result in a positive number.  Otherwise, it returns -1.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice>
          <cline>void difference(int a, int b) {</cline>
        </choice>
        <choice correct="yes">
          <cline>int difference(int a, int b) { </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline> if (a - b &gt; 0) {</cline>
        </choice>
        <choice>
          <cline> if (a - b &lt; 0) { </cline>
        </choice>
      </block>
      <block order="1">
        <cline>  return &lt;&lt; a - b;</cline>
        <cline> }</cline>
      </block>
      <block order="4">
        <cline> else {</cline>
      </block>
      <block order="6">
        <cline>  return &lt;&lt; -1;</cline>
        <cline> }</cline>
      </block>
      <block order="2">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="cond_recc_p7" numbered="yes" adaptive="yes" indentation="hide">
    <statement>
      <p>According to a logic game, a knight is someone who cannot tell a lie,
            and a knave is someone who cannot tell the truth.  Construct a function
            that takes two booleans: the truth value of the story, and the truth value
            told by the person.  The function should print whether the person was a
            knight or a knave.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>void knightKnave(bool truth, bool told) {</cline>
      </block>
      <block order="8">
        <cline> if (truth) {</cline>
      </block>
      <block order="3">
        <cline>  if (told) {</cline>
        <cline><![CDATA[   cout << "Knight";]]></cline>
        <cline>  }</cline>
      </block>
      <block order="1">
        <cline>  else {</cline>
        <cline>   cout &lt;&lt; "Knave";</cline>
        <cline>  }</cline>
        <cline> }</cline>
      </block>
      <block order="5">
        <cline> else {</cline>
      </block>
      <block order="4">
        <cline>  if (told) {</cline>
        <cline>   cout &lt;&lt; "Knave";</cline>
        <cline>  }</cline>
      </block>
      <block order="2">
        <cline>  else {</cline>
        <cline><![CDATA[   cout << "Knight";]]></cline>
        <cline>  }</cline>
        <cline> }</cline>
      </block>
      <block order="6">
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>


  <exercise label="VARS_2ervergverwefwef">
    <statement>
      <p>Write a function `isNegative`. It should take a single integer as its parameter and return true if the integer is negative or false if it is not. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

//Write the function isNegative here

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("isNegative") {
  CHECK(isNegative(-5) == true);
  CHECK(isNegative(-1) == true);
  CHECK(isNegative(0) == false);
  CHECK(isNegative(3) == false);
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>

  <exercise label="wwgertwhwertheqgrfer">
    <statement>
      <p>Write a function `exclusiveOr`. If `a` and `b` are both true or both false, it should return false. If one is true and the other is false, it should return true. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

bool exclusiveOr(bool a, bool b) {
    //TODO - write your code here
}

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("exclusiveOr") {
  CHECK(exclusiveOr(true, true) == false);
  CHECK(exclusiveOr(false, false) == false);
  CHECK(exclusiveOr(true, false) == true);
  CHECK(exclusiveOr(false, true) == true);
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>

  

  <exercise label="wwgertwhwertheqgrfer">
    <statement>
      <p>Write a function `exclusiveOr`. If `a` and `b` are both true or both false, it should return false. If one is true and the other is false, it should return true. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

bool exclusiveOr(bool a, bool b) {
    //TODO - write your code here
}

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("exclusiveOr") {
  CHECK(exclusiveOr(true, true) == false);
  CHECK(exclusiveOr(false, false) == false);
  CHECK(exclusiveOr(true, false) == true);
  CHECK(exclusiveOr(false, true) == true);
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>


  <exercise label="wwgertwhwerddwtheqgrfer">
    <statement>
      <p>In a dice game, the player rolls two dice, one red and one blue. If the red die has a higher value, they score 0. If the blue one is higher, they score the value of the blue one minus the red one. If the two dice are the same, they score the value shown on the blue die.</p>
      <p>Write a function `computeScore`. It should take two integers for `redDie` and `blueDie` (in that order) and return the score the player earns. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

//TODO - write your function here

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("computeScore") {
  CHECK(computeScore(4, 3) == 0);
  CHECK(computeScore(3, 4) == 1);
  CHECK(computeScore(1, 6) == 5);
  CHECK(computeScore(5, 2) == 0);
  CHECK(computeScore(4, 4) == 4);
  CHECK(computeScore(2, 2) == 2);
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>


  <exercise label="wwgertwhwerthed23qgrfer">
    <statement>
      <p>Write a function `gradePoints`. It should take a single `integer` representing a percentage grade (0-100) and return the `integer` number of grade points that equates to. 0-59 should be 0 grade points, 60-69 1 grade point, 70-79, 2 grade points, 80-89 3 grade points, and 90+ 4 grade points. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

    //TODO - write your function

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("gradePoints") {
  CHECK(gradePoints(32) == 0);
  CHECK(gradePoints(60) == 1);
  CHECK(gradePoints(68) == 1);
  CHECK(gradePoints(70) == 2);
  CHECK(gradePoints(73) == 2);
  CHECK(gradePoints(81) == 3);
  CHECK(gradePoints(90) == 4);
  CHECK(gradePoints(100) == 4);
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>


  <exercise label="wwgertwhwerthed23qgrfer">
    <statement>
      <p>Orders from a company that cost $100 or more get a 10% discount. Orders less than $100 do not get a discount.</p>
      <p>Write a function `orderCost`. It should take a single `double` representing the undiscounted order price and return the `double` value of what the order should cost. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

    //TODO - write your function 

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("orderCost") {
  CHECK(orderCost(90) == doctest::Approx(90));
  CHECK(orderCost(100) == doctest::Approx(90));
  CHECK(orderCost(112) == doctest::Approx(100.8));
  CHECK(orderCost(125) == doctest::Approx(112.5));
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>


  <exercise label="wwgertwhwerthed23qgrfer">
    <statement>
      <p>Orders from a company that cost $100 or more get a 10% discount. Orders less than $100 do not get a discount.</p>
      <p>Write a function `orderCost`. It should take a single `double` representing the undiscounted order price and return the `double` value of what the order should cost. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

    //TODO - write your function 

        </code>
        <tests visible="no">
<![CDATA[
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"

TEST_CASE("orderCost") {
  CHECK(orderCost(90) == doctest::Approx(90));
  CHECK(orderCost(100) == doctest::Approx(90));
  CHECK(orderCost(112) == doctest::Approx(100.8));
  CHECK(orderCost(125) == doctest::Approx(112.5));
}
]]>
        </tests>
    </program>
    </statement>
  </exercise>

  <exercise label="wwgertwhwerthed23qgrferrps">
    <statement>
      <p>In a two-person card game, the players each start with 20 "health points" and play until one is reduced to 0 or less. If a player reduces the other to 0 health, they are the winner. If the winner still has 10 or more of their health points left, it is declared a "crushing win" (or "crushing loss" depending on your perspective).</p>
      <p>Write a function to announce the results of a game. It should take as parameters the two `integer` health values for the players and print the outcome of the game from the perspective of player 1 (the first health value) - `Win`, `Loss`, `Crushing Win`, `Crushing Loss`. For example, if the two values were 8 and 0 you should print `Win`. If the two values were -1 and 16 you would print `Crushing Loss`. Includes and tests are present but hidden.</p>
      <program interactive="activecode">
        <preamble visible="no"><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;]]>
        </preamble>
        <code>

void announceGame(int p1Health, int p2Health) {
    //TODO - write your code here
}

        </code>
        <postamble visible="no"><![CDATA[
int main() {
  int a,b;
  cin >> a >> b;
  announceGame(a, b);
}]]></postamble>
        <tests>
          <iotest>
            <input>8 0</input>
            <output>Win</output>
          </iotest>
          <iotest>
            <input>-1 16</input>
            <output>Crushing Loss</output>
          </iotest>
          <iotest>
            <input>19 0</input>
            <output>Crushing Win</output>
          </iotest>
          <iotest>
            <input>-30 2</input>
            <output>Loss</output>
          </iotest>
        </tests>
    </program>
    </statement>
  </exercise>


</exercises>