
  <p>
    <idx>
      <h>initialize</h>
    </idx>
    <idx>
      <h>statement</h>
      <h>initialization</h>
    </idx> Since relational and logical operators evaluate to a <pf>boolean</pf>
    value, you can store the result of a comparison in a variable: </p>

  <program xml:id="conditionals-logic_boolevariables-2">
<xi:include href="../../programs/conditionals-logic/boolevariables-2.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>flag</h>
    </idx> The parentheses are unnecessary, but they make the code easier to
    understand. A variable defined in this way is called a <term>flag</term>, because it signals, or <q>
    flags</q>, the presence or absence of a condition. </p>

  <p> You can use flag variables as part of a conditional statement: </p>

  <program xml:id="conditionals-logic_boolevariables-3">
<xi:include href="../../programs/conditionals-logic/boolevariables-3.cpp" parse="text"/>
</program>

  <p> Flags may not seem that useful at this point, but they will help simplify complex conditions
    later. Each part of a condition can be stored in a separate flag, and these flags can be
    combined with logical operators. </p>

  <p> Notice that we didn't have to write <nbsp/><pf>if (evenFlag == true)</pf>. Since <pf>evenFlag</pf> is a <pf>boolean</pf>, it's already a
    condition. To check if a flag is <pf>false</pf>, we simply negate the flag: </p>

  <program xml:id="conditionals-logic_boolevariables-4">
<xi:include href="../../programs/conditionals-logic/boolevariables-4.cpp" parse="text"/>
</program>

  <p> In general, you should never compare anything to <pf>true</pf> or <pf>false</pf>. Doing so makes the code
    more verbose and awkward to read out loud. </p>
