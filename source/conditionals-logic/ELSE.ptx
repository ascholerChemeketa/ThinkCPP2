<section xml:id="conditionals-logic_ifelse-statement"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>The if-else Statement</title>
  <p>
    <idx>
      <h>conditional statement</h>
    </idx>
    <idx>
      <h>statement</h>
      <h>conditional</h>
    </idx>
    <idx>
      <h>if statement</h>
    </idx>
    <idx>
      <h>statement</h>
      <h>if</h>
    </idx>Now that we have boolean values, we need to use them to control what code gets executed.
    <term>Conditional statements</term> give us this ability. The simplest
    conditional statement in C++ is the <pf>if</pf> statement: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>block</h>
    </idx> The expression in parentheses is called the <term>condition</term>. If
    it is true, the statements in braces get executed. The If the condition is false, execution skips
    over that <term>block</term> of code. The condition in parentheses can be any <pf>boolean</pf>
    expression. </p>

  <p>
    <idx>
      <h>branch</h>
    </idx>
    <idx>
      <h>statement</h>
      <h>else</h>
    </idx> A second form of conditional statement has two possibilities, indicated
    by <pf>if</pf> and <pf>else</pf>. The possibilities are called <term>branches</term>, and the condition
    determines which branch gets executed: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-2.cpp" parse="text"/>
</program>

  <p> If the remainder when <pf>x</pf> is divided by 2 is 0, we know that <pf>x</pf> is even, and the
    program displays a message to that effect. If the condition is false, the second print statement
    is executed instead. Since the condition must be true or false, exactly one of the branches will
    run. </p>

  <p> The braces are optional for branches that have only one statement. So we could have written
    the previous example this way: </p>

  <listing>
  <program label="conditionals-logic_ifelse-statement-program-1"
           interactive="activecode">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-3.cpp" parse="text"/>
</program>
  </listing>

  <p> However, it's better to use braces<mdash/>even when they are optional<mdash/>to avoid making
    the mistake of adding statements to a one-line <pf>if</pf> or <pf>else</pf> block. This code is misleading
    because it's not indented correctly: </p>

  <listing>
  <program label="conditionals-logic_ifelse-statement-program-2"
           interactive="activecode">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-4.cpp" parse="text"/>
</program>
  </listing>

  <p> Since there are no braces, only the first <pf>println</pf> is part of the <pf>if</pf> statement. Here is
    what the compiler actually sees: </p>

  <listing>
  <program label="conditionals-logic_ifelse-statement-program-3"
           interactive="activecode">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-5.cpp" parse="text"/>
</program>
  </listing>

  <p> As a result, the second <pf>println</pf> runs no matter what. Even experienced programmers make this
    mistake; search the web for Apple's <q>goto fail</q> bug. </p>

  <p>
    <idx>
      <h>\{\} curly braces</h>
    </idx> In all previous examples, notice that there is no semicolon
    at the end of the <pf>if</pf> or <pf>else</pf> lines. Instead, a new block should be defined using braces.
    Another common mistake is to put a semicolon after the condition, like this: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-6.cpp" parse="text"/>
</program>

  <p> This code will compile, but the program will output <pf>"x is even"</pf> regardless of the value of <pf>x</pf>.
    Here is the same incorrect code with better formatting: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-7.cpp" parse="text"/>
</program>

  <p> Because of the semicolon, the <pf>if</pf> statement compiles as if there are no braces, and the
    subsequent block runs independently. As a general rule, each line of Java code should end with a
    semicolon or brace<mdash/>but not both. </p>

  <p> The compiler won't complain if you omit optional braces or write empty statements. Doing so is
    allowed by the Java language, but it often results in bugs that are difficult to find.
    Development tools like Checkstyle (see <xref ref="checkstyle">Appendix</xref>) can warn you
    about these and other kinds of programming mistakes. </p>
  <warning>
    <p>
      <idx>
        <h>assignment</h>
      </idx>
    <idx>
        <h>operator</h>
        <h>assignment</h>
      </idx>
    <idx>
        <h>== equals operator</h>
      </idx>Remember that a single <pf>=</pf> represents assignment -
      it says <q>gets the value</q>. A double equals <pf>==</pf> asks the question <q>is equal to?</q>.
      A common mistake is to use a single <pf>=</pf> instead of a double <pf>==</pf> when comparing values.
      If you make this mistake, the compiler will emit a warning like the one shown below that tells
      you you are using an assignment operator in a place where a true/false value is expected. </p>
    <console>
      <output>test.cpp:7:10: error: suggest parentheses around assignment used as truth value [-Werror=parentheses]
    7 |     if( x = 3 ) {
      |          ~^~~</output>
    </console>
  </warning>

  <p> You can use flag variables as part of a conditional statement: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/boolevariables-3.cpp" parse="text"/>
</program>


</section>