<section xml:id="objects-arrays_selection-sort">
<title>Selection Sort</title>
<p>
<idx><h>selection sort</h></idx>
<idx><h>sort</h><h>selection</h></idx>
Now that we have shuffled the deck, we need a way to put it back in order.
There is an algorithm for sorting that is ironically similar to the algorithm for shuffling.
It's called <em>selection sort</em>, because it works by traversing the array repeatedly and selecting the lowest (or highest) remaining card each time.
</p>

<p>
During the first iteration, we find the lowest card and swap it with the card in the zeroth position.
During the <m>i</m>th iteration, we find the lowest card to the right of <m>i</m> and swap it with the <m>i</m>th card.
Here is pseudocode for selection sort:
</p>

<program>
public void selectionSort() {
    for each index i {
        // find the lowest card at or to the right of i
        // swap the ith card and the lowest card found
    }
}
</program>

<p>
Again, the pseudocode helps with the design of the helper methods.
For this algorithm, we can reuse <c>swapCards</c> from the previous section, so we need only a method to find the lowest card; we'll call it <c>indexLowest</c>:
</p>

<program>
private int indexLowest(int low, int high) {
    // find the lowest card between low and high
}
</program>

<p>
One of the exercises at the end of the chapter asks you to write <c>indexLowest</c>, and then use it and <c>swapCards</c> to implement <c>selectionSort</c>.
</p>
</section>
