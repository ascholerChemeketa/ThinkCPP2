<section xml:id="mutable-objects_scope-revisited" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Scope Revisited</title>
<p>
<idx><h>scope</h></idx>
In <xref ref="stack">Section</xref>, we introduced the idea that variables have scope.
The scope of a variable is the part of a program where a variable can be used.
</p>

<p>
Consider the first few lines of the <c>Rectangle.translate</c> function from the Java library source code:
</p>

<program xml:id="mutable-objects_scope-revisited-1">
<xi:include href="../programs/mutable-objects_scope-revisited-1.cpp" parse="text"/>
</program>

<p>
This example uses three kinds of variables:
<ul>
<li><p>Parameters (<c>dx</c> and <c>dy</c>)</p></li>
<li><p>Local variables (<c>oldv</c> and <c>newv</c>)

<idx><h>this</h></idx></p></li>
<li><p>Attributes (<c>this.x</c>)</p></li>
</ul>
</p>

<p>
Parameters and local variables are created when a function is invoked, and they disappear when the function returns.
They can be used anywhere inside the function, but not in other functions and not in other classes.
</p>

<p>
Attributes are created when an object is created, and they disappear when the object is destroyed.
They can be used in any of the object's functions, using the keyword <c>this</c>.
And if they are public, they can be used in other classes via references to the object, <c>box1.x</c>.
</p>

<p>
When the Java compiler encounters a variable name, it searches backward for its declaration.
The compiler first looks for local variables, then parameters, then attributes.
</p>
</section>
