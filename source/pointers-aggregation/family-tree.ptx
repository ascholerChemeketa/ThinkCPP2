<section xml:id="pointers-aggregation_family-tree"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>A Family Tree</title>

  <p>As a more in depth example of using aggregation, let us model a
  family tree. The basis of our program will be a Person class. Every Person has a name. They may
  have a mother that we know about and they may also have a number of children we need to represent.
  (For brevity, we will skip representing fathers... the logic would be the same as for mothers.) A
  Person will thus need a <pf>Person*</pf> to store the mother, it will start out as a <pf>nullptr</pf>. It will
  also need a <pf>vector&lt;Person*></pf> to store any children. An empty vector will indicate no children, so we
  don't need to explicitly add any <pf>nullptr</pf>s to it.</p>

  <p>The implementation for this is shown
  below. Much of this code is similar to the Person class we used on the previous page, here are the
  key new features: <ul>
      <li>
        <p><pf>getMother</pf> and <pf>getChild</pf> both return <pf>Person*</pf>s as we want to return the memory address to
  the appropriate object instead of a copy of the object. If <pf>getMother</pf> looked like <pf>Person getMother() const</pf> it
  would return a copy of the object that <pf>m_mother</pf> points at.</p>
      </li>
      <li>
        <p><pf>getChild</pf> takes a parameter to specify which child to retrieve. The parameter is a
  <pf>size_t</pf> (not an <pf>int</pf>) as we will use it to specify a location in the vector.</p>
      </li>
      <li>
        <p><pf>setMother</pf> is similar to the <pf>marry</pf> function from our spouse sample. When we set a
  Person's mother, we also make sure that the mother object has the child Person in their list of
  children. <pf>mother->m_children.push_back(this)</pf> tells the mother object to add the current object to its list of children.</p>
      </li>
      <li>
        <p><pf>print</pf> checks the Person being printed to see if they have a mother and/or children.
  If so, it prints out the names of those objects.</p>
      </li>
    </ul> Other than noting those
  features, don't worry about reading the code too closely. </p>

  <listing>
    <title>Person.cxx</title>
    <caption>Person.cxx - A module implementation of Person</caption>
    <program label="person-family-cxx"
             xml:id="person-family-cxx"
             line-numbers="yes"
             highlight-lines="21, 22, 25, 44-47, 60, 63"
             filename="Person.cxx">
<xi:include href="../../programs/pointers-aggregation/person-family.cxx" parse="text"/>
    </program>
  </listing>

  <p>To
  work with this class, we will need to set up some Persons and establish links between them. The
  figure below shows the relations we will set up. Each person has an arrow pointing at their
  mother, which corresponds to the `m_mother. (This is not a true memory diagram - it does not
  visualize the pointers that point back at the children from the mother.)</p>

  <figure>
    <caption>The family relations set up in the programs below.</caption>
    <image >
      <shortdescription>Henry and George have Fay as mother. Fay has Erin as Mother. Erin has Diana as mother. Diana, Carl and Bob have Anna as mother.</shortdescription>
      <mermaid>
        stateDiagram-v2
          direction BT
          Anna: Anna (p0)
          Bob: Bob (p1)
          Carl: Carl (p2)
          Diana: Diana (p3)
          Erin: Erin (p4)
          Fay: Fay (p5)
          George: George (p6)
          Henry: Henry (p7)
          Bob --> Anna
          Carl --> Anna
          Diana --> Anna
          Erin --> Diana
          Fay --> Erin
          George --> Fay
          Henry --> Fay
      </mermaid>
    </image>
  </figure>

  <p>The first program sets up this family tree in
  lines 9-25. It then prints out some of the Persons, changes one of their names, and prints again.</p>

  <program label="pointers-aggregation_family-tree-program-1"
           compile-also="person-family-cxx"
           highlight-lines="32, 35"
           interactive="activecode">
<xi:include href="../../programs/pointers-aggregation/person-family-user-1.cpp" parse="text"/>
  </program>

  <p>Notice
  that because we are using aggregation, when we change Fay's name to Fiona (line 32), the Henry
  object <q>sees</q> the change. On line 35, as we print out Henry, we see</p>
  
  <note>
    <p>Recall that this is the key distinction of storing a <pf>Person*</pf> as the <pf>m_mother</pf> instead of a
  <pf>Person</pf> object. Because we are using <pf>Person*</pf>s, objects <q>see</q> changes that are made to the
  object that was set as their <pf>m_mother</pf>. If the Henry object stored a <pf>Person</pf>, it would make a
  copy of the Fay object when their relationship was set up. In that case, the Henry object would
  never <q>see</q> future changes to the Fay object.</p>
  </note>

  <p>Now let's get trickier. We are
  going to try to navigating all the way from Henry up to the top of the family tree (a person with
  no known mother).</p>

  <p>To do this, we need a way to track <q>the current person</q>. However, we need to be careful
  about how we do this. If we use a <pf>Person</pf> object to store <q>the current person</q>, we will be making a
  copy of whatever Person we assign to it. But we do not want to make a copies of any Person once the family
  is set up. There should only ever be one <q>Henry</q> (the variable named <pf>p7</pf>) in the program.We need <pf>currentPerson</pf> to be
  an alias for one of the existing Person objects, and not a new Person. Thus we will make <pf>Person* currentPerson</pf>.
  Using that, we can point at <pf>p7</pf> and have access to the Henry object without copying it.</p>

  <p>This program starts with the same family set up code. Skip past it and examine lines 28+. They set up some pointers to point to Henry and his ancestors.</p>

  <program label="pointers-aggregation_family-tree-program-2"
           compile-also="person-family-cxx"
           interactive="activecode">
<xi:include href="../../programs/pointers-aggregation/person-family-user-2.cpp" parse="text"/>
  </program>

  <p>Rather than write out each next step in accessing Henry's ancestors by hand, we could use a loop to <q>walk up</q> the family tree. The next program does exactly that. It reuse the <pf>currentPerson</pf> pointer to
  always store the person we are currently at. To <q>step up</q> the tree, we can change the <pf>currentPerson</pf> to be the mother of the old <pf>currentPerson</pf>. Once the <pf>currentPerson</pf> is null, we know we have run out
  of family members!</p>

  <program label="pointers-aggregation_family-tree-program-3"
           compile-also="person-family-cxx"
           highlight-lines="30, 37, 40"
           interactive="activecode">
<xi:include href="../../programs/pointers-aggregation/person-family-user-3.cpp" parse="text"/>
  </program>

  <p>The tricky bit is the last line of the loop (40). We change the memory address stored in <pf>currentPerson</pf>
  to be a copy of the address stored in <pf>currentMother</pf>. This updates the <pf>currentPerson</pf> pointer to point at
  the mother of the old <pf>currentPerson</pf>. Then, we bounce up to the start of the loop to check if we have
  reached an unknown mother (nullptr) - that will be our sign that we have reached the top of the
  tree and it is time to stop.</p>

  <exercise label="pointers-aggregation_family-tree-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a <pf>Person</pf> function <pf>getSiblings</pf> that returns a vector containing all of the siblings of the current Person. If the current Person's mother is unknown, we will return an empty vector.</p>
    </statement>
    <blocks>
      <block>
        <cline><![CDATA[vector<Person*> Person::getSiblings() const {]]></cline>
      </block>
      <block>
        <cline><![CDATA[    vector<Person*> sibs;]]></cline>
      </block>
      <block>
        <cline><![CDATA[    if (m_mother) {]]></cline>
      </block>
      <block>
        <cline><![CDATA[        for (Person* kid : m_mother->m_children) {]]></cline>
      </block>
      <block>
        <cline><![CDATA[            if (kid != this) {]]></cline>
      </block>
      <block>
        <cline><![CDATA[                sibs.push_back(kid);]]></cline>
      </block>
      <block>
        <cline><![CDATA[            }]]></cline>
        <cline><![CDATA[        }]]></cline>
        <cline><![CDATA[    }]]></cline>
      </block>
      <block>
        <cline><![CDATA[    return sibs;]]></cline>
      </block>
      <block>
        <cline><![CDATA[}]]></cline>
      </block>
    </blocks>
  </exercise>
</section>