<section xml:id="pointers-aggregation_aggregation-implementation"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Implementing Aggregation</title>

  <subsection>
    <title>Variable Ownership Semantics</title>

    <p>To implement aggregation in C++, we need to have a variable that gives us access to some
      memory without owning it. That means we can't use a regular variable, like a <pf>Point m_center</pf>, as
      regular variables <q>own</q> a chunk of memory. When a regular variable goes out of scope, the
      variable it names goes away. Pointers (and references) are different. A pointer just names a
      place in memory where we store a memory address (hopefully the address of some useful piece of
      data). When the pointer goes away, all that is lost is that copy of the address. The data at
      that address is not lost.</p>

    <insight>
      <p> Different types of variables have different ownership semantics (meaning). <ul>
          <li>A <q>regular</q> variable (like <pf>x</pf> in <pf>int x = 10;</pf>) owns the memory it is using.</li>
          <li>A <q>reference</q> variable (like <pf>r</pf> in <pf>int&amp; r = x;</pf>) does NOT own the memory it
        is using. It is an alias for another variable.</li>
          <li>A <q>pointer</q> variable (like <pf>p</pf> in <pf>int* p = &amp;x;</pf>) may or may not own the memory
        it points at. Until we learn about dynamic allocation, we will assume pointers do NOT own
        the memory they point at.</li>
        </ul>
      </p>
    </insight>

    <p> So to implement aggregation, we need to use pointers or references. There are some
      limitation that come with references: you can't have a null reference and you have to
      initialize references when they are created. So if we chose reference variables, we could not
      have a Person with no spouse (a null value for a spouse). And we would have to use the
      initialization list to make sure that the spouse was initialized as the space for it was
      allocated. To avoid these limitations and keep things consistent even in situations where they
      might not matter, we will always use pointers to implement aggregation.</p>

    <note>
      <p>We also could implement composition using pointers if we made sure that each container
        object pointed to a unique object and that those contained objects went away when their
        container did. We will avoid that complication.</p>
    </note>
  </subsection>

  <subsection>
    <title>Aggregation Using Pointers</title>

    <p>A Circle class built using aggregation will be very similar to the composition version, but
      will store a pointer to a Point instead of a Point. A simplified version of this new Circle
      class might look like:</p>

    <listing>
    <program label="pointers-aggregation_aggregation-implementation-program-1"
             interactive="activecode"
             highlight-lines="8, 14, 18, 27, 34, 37"
             line-numbers="yes"
             compile-also="point-final-cxx">
<xi:include href="../../programs/pointers-aggregation/aggregation-circle.cpp" parse="text"/>
  </program>
    </listing>

    <p>Key things to note about this implementation: <ul>
        <li>The <pf>m_center</pf> is now a <pf>Point*</pf> (line 24).</li>
        <li>The constructor takes a <pf>Point *</pf> (line 5).</li>
        <li>To use <pf>m_center</pf>'s functions, we need to use the <pf>-></pf> operator (lines 14, 18).</li>
        <li>When we construct a Circle, we pass it the address of an already existing Point (lines
      34 and 37).</li>
      </ul> We have to pass an existing Point object to the Circle constructor
      because the Circle will not have its own storage for a Point. Instead, it will just store the
      address of a Point, which means that Point must already exist elsewhere in memory. </p>

    <p>A memory diagram for the main function after all of the Circles are constructed would look
      lime the image below. <pf>c1</pf> and <pf>c2</pf> don't hold their own Point objects, they hold
      the memory address of <pf>p1</pf>.</p>

    <figure>
      <caption>Memory diagram of p1, c1, and c2 using aggregation.</caption>
      <image source="images/aggregation-circles.svg"
             width="80%"
             >
        <shortdescription>In Circles c1 and c2, the m_center holds the memory address of Point p1</shortdescription>
      </image>
    </figure>

    <p>This means, that any change to <pf>p1</pf> will be <q>seen</q> by the two Circle objects. We
      can see this in the last few lines of the program above. Shifting Point <pf>p1</pf> affects the
      center of both <pf>c1</pf> and <pf>c2</pf> because they both use the actual Point <pf>p1</pf> as
      their center.</p>

    <note>
      <p>This is a critical distinction between aggregation and composition. If we made two circles
        from a Point <pf>p1</pf> with the composition version of Circle, each Circle would make its
        own copy of the data from <pf>p1</pf> and store that data.</p>
      <figure>
        <caption>Memory diagram of p1, c1, and c2 using composition.</caption>
        <image source="images/composition-circles.svg"
               width="80%"
               >
          <shortdescription>In Circles c1 and c2, the m_center hold copies of the data from p1</shortdescription>
        </image>
      </figure>
      <p>Given this structure in memory, future changes to <pf>p1</pf> would not affect either
        Circle's center point as those are different objects in memory.</p>
    </note>
  </subsection>

  <exercise label="pointers-aggregation_aggregation-implementation-ex-1">
    <statement>
      <p>Match each storage type to its ownership semantics.</p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <cardsort>
      <match>
        <premise>An <pf>int</pf> variable</premise>
        <response>Owns its own memory where an integer is stored.</response>
      </match>
      <match>
        <premise>An <pf>int&amp;</pf> variable</premise>
        <response>Links to memory that it definitely does not own.</response>
      </match>
      <match>
        <premise>An <pf>int*</pf> variable</premise>
        <response>Links to memory that it may or may not own.</response>
      </match>
    </cardsort>
  </exercise>

  <exercise label="pointers-aggregation_aggregation-implementation-ex-2">
    <statement>
      <p>If we modeled aggregation between a Person and their best friend (also a Person) with
        references instead of pointers, what is something we could not do?</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>We could not have a Person with no set best friend.</p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>We could not change the best friend of a Person.</p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>We could not have two People share the same spouse.</p>
        </statement>
      </choice>
    </choices>
  </exercise>
</section>