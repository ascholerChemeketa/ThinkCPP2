<section xml:id="pointers-aggregation_pointers-types"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Types of Pointers</title>

  <p> Every pointer has a type. A pointer might be a <q>pointer to an int</q> (<pf>int*</pf>), a <q>pointer
    to a double</q> (<pf>double*</pf>), or a <q>pointer to a Circle</q> (<pf>Circle*</pf>). This information is
    essential because it tells the compiler how to interpret the data that the pointer points to.
    For example, given <pf>double* p</pf>, the compiler knows that if we try to use the memory <pf>p</pf>
    points at, it only makes sense to use it as a double. </p>

  <p>This sample creates three different pointers, <pf>p</pf>, <pf>p2</pf>, and <pf>p3</pf>, each of a
    different type:</p>

  <listing>
  <program label="pointers-aggregation_pointers-types-program-1"
           interactive="activecode"
           highlight-lines="8, 14, 20"
           line-numbers="yes"
           codelens="yes">
<xi:include href="../../programs/pointers-aggregation/pointers-types-1.cpp" parse="text"/>
  </program>
  </listing>

  <p>Trying to store the wrong kind of address into a pointer is a compile time error:</p>

  <listing>
  <program label="pointers-aggregation_pointers-types-program-2"
           interactive="activecode"
           highlight-lines="8"
           line-numbers="yes"
           codelens="yes">
<xi:include href="../../programs/pointers-aggregation/pointers-types-2.cpp" parse="text"/>
  </program>
  </listing>

  <p>It is also an error to try to store a value other than a memory address into a pointer. Given <pf>int x = 10;</pf>,
    we can't ask a pointer to store <pf>x</pf> - that names the value <pf>10</pf>, not the memory
    address of x.</p>

  <listing>
  <program label="pointers-aggregation_pointers-types-program-3"
           interactive="activecode"
           highlight-lines="8"
           line-numbers="yes"
           codelens="yes">
<xi:include href="../../programs/pointers-aggregation/pointers-types-3.cpp" parse="text"/>
  </program>
  </listing>

  <note>
    <p>It is possible to declare a pointer with no specific type as a <pf>void*</pf>. However, because
      that address has no defined type, the compiler won't let us do much with that address. It does
      not know if the address points at data that should be treated as a double, an int, or a
      Circle.</p>
  </note>

  <exercise label="pointers-aggregation_pointers-types-ex-1">
    <statement>
      <p>Which statements below are correct?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>Any pointer variable can be assigned any variable's address.</p>
        </statement>
        <feedback>
          <p>Pointers can only be assigned the address of variables of the matching type.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>All pointers store memory addresses.</p>
        </statement>
        <feedback>
          <p>All pointers just store memory addresses.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The compiler uses a pointer's type to determine what can be done with what it points
            at.</p>
        </statement>
        <feedback>
          <p>That is why pointers have types.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>You can assign an <pf>int</pf> value like 42 to a <pf>int*</pf>.</p>
        </statement>
        <feedback>
          <p>Pointers can only be assigned memory addresses, not the values of the type they are
            supposed to point at.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>