<section xml:id="pointers-aggregation_pointers-objects"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Object Member Access with Pointers</title>

  <p> When using pointers with objects, we are likely to encounter a syntax annoyance. Say we have a
    Pointer called <pf>myPointer</pf> that points at a <pf>Point</pf> object and we want to call the <pf>getX()</pf>
    function of that Point. We know that the pointer is just a memory address. To use it we need to
    dereference it - <pf>*myPointer</pf> will give us <q>the object that myPointer points at</q>. So we write
    the following to access the <pf>getX()</pf> of that object (using our <xref ref="point-final-cxx-listing"
          text="title"/>
    ): </p>

  <program label="pointers-aggregation_pointers-objects-program-1"
           interactive="activecode"
           compile-also="point-final-cxx">
<xi:include href="../../programs/pointers-aggregation/pointers-objects-1.cpp" parse="text"/>
  </program>

  <p> The compiler spits out an error message that looks something like this: </p>

  <console>
    <output>request for member ‘getX’ in ‘myPointer’, which is of pointer type ‘Point*’ (maybe you meant to use ‘->’ ?)</output>
  </console>

  <p>The issue is one of precedence <fn>
      <url href="https://en.cppreference.com/w/cpp/language/operator_precedence">List of operator
    precedence at cppreference.com</url>
    </fn>. We intended to say, <q>first dereference the
    pointer, then use the getX member of that object</q>. However, <pf>.</pf> is interpreted before <pf>*</pf>.
    So what we said was <q>use the getX member of the pointer (<pf>.</pf>), then dereference the
    result (<pf>*</pf>).</q>. It is as if we had written <pf>*(myPointer.getX())</pf>, which does not make sense because <pf>myPointer</pf>
    is just a memory address, not an object, and thus has no <pf>getX()</pf>. One way to fix this is to
    use parentheses to make the order of operations clear: </p>

  <program>
    (*myPointer).getX();
  </program>

  <p> That will work as intended (you can try it in the program above). However, it is a bit clunky.
    And it can get really clunky if we have a series of pointers to dereference. Something like the
    statement below is quite hard to quickly read and comprehend:</p>
  <program>(*(*(*cylinderPointer).getBasePointer()).getCenterPointer()).getX();</program>
  <p>C++ provides a shorthand for this situation. Instead of using <pf>*</pf> and <pf>.</pf> together,
    we can use the <term>pointer member access operator</term> <pf>-></pf> (also sometimes called the <term>arrow
    operator</term>. This operator is used to access members of an object through a pointer. You can
    think of <pf>myPointer->getX()</pf> as saying <q>go to the thing myPointer points at and then use the getX()
    member of that object</q>. No parentheses needed! </p>

  <p>So the final correct version of our simple program using the <term>pointer member access
    operator</term> would look like:</p>

  <program label="pointers-aggregation_pointers-objects-program-2"
           interactive="activecode"
           compile-also="point-final-cxx">
<xi:include href="../../programs/pointers-aggregation/pointers-objects-2.cpp" parse="text"/>
  </program>


  <exercise label="pointers-aggregation_pointers-objects-ex-1">
    <statement>
      <p>We have a pointer to a Circle object called <pf>circlePointer</pf>. Write a statement that calls the <pf>setRadius()</pf>
        function of the Circle object that <pf>circlePointer</pf> points to and passes it the value 2. (Use the
        arrow operator).</p>
      <fillin answer="circlePointer->setRadius(2);"/>
    </statement>
    <evaluation>
      <evaluate>
        <test correct="yes">
          <strcmp>circlePointer\s*->\s*setRadius\s*\(\s*2\s*\);?</strcmp>
        </test>
        <test>
          <strcmp>.*\*.*</strcmp>
          <feedback>There should not be a <pf>*</pf>.</feedback>
        </test>
        <test>
          <strcmp>.*\..*</strcmp>
          <feedback>There should not be a <pf>.</pf>.</feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <exercise label="pointers-aggregation_pointers-objects-ex-2">
    <statement>
      <p>Which is the best way to pronounce <pf>p->foo()</pf>?</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>
            <q>go to the thing p points and use the foo method of it</q>
          </p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>
            <q>use the foo method of p</q>
          </p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>
            <q>go to the thing that p's foo method points at</q>
          </p>
        </statement>
      </choice>
    </choices>
  </exercise>


</section>