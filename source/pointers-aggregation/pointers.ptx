<section xml:id="pointers-aggregation_pointers"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Pointers</title>

  <p>
    Now that we know how to access the memory address of a variable, we need a way to store that address. We can do this using a <term>pointer</term>. A pointer is simply a variable that stores the memory address of another variable. We declare a pointer by using an asterisk <pf>*</pf> between the data type and name of a variable. For example, if we want to create a pointer to an integer, we would write <pf>int* p;</pf>. (This use of <pf>*</pf> is just like how we use <pf>&amp;</pf> to indicate a reference.)<idx><h>pointer</h></idx>
  </p>

  <p>Remember that it can help to read declarations backwards. A good way to pronounce <pf>int* p;</pf> is <q>p is a pointer to an integer</q> or <q>p holds the address of an integer</q>. We would pronounce <pf>Circle* c1;</pf> as <q>c1 is a pointer to a Circle</q>. Note that the <pf>*</pf> is part of the data type. <pf>p</pf> does not have the type integer, it has the type <pf>int*</pf>.</p>

  <note><p>The <pf>*</pf> can have spaces on either side of it. Some programmers prefer to write <pf>int *p;</pf> to make it clear that p is a pointer. In this book, we will always place the <pf>*</pf> next to the data type to focus on the idea <q>the type of p is pointer to an integer</q> rather than thinking <q>the type of *p is integer</q>.</p></note>

  <p>To initialize a pointer type, we use the <pf>&amp;</pf> to get the address of the variable we want ot <q>point</q> at. This sample sets <pf>p</pf> to point at <pf>x</pf>:</p>

  <program label="asdfadesdf" interactive="activecode" highlight-lines="11" line-numbers="yes" codelens="yes">
<xi:include href="../../programs/pointers-aggregation/pointers-1.cpp" parse="text"/>
  </program>

  <p>Note that printing out <pf>p</pf> produces the same value as printing <pf>&amp;x</pf>. This should not be surprising, as we initialized <pf>p</pf> to <pf>&amp;x</pf>. A memory diagram of this example is shown below.</p>

  <figure>
    <caption>Memory diagram of p storing x's address.</caption>
    <image source="images/pointers-p-points-x.svg"
           width="60%"
           alt="p holds the same value as x's address"/>
  </figure>

  <p>
    Now try running the program using Codelens. It shows <pf>p</pf> as an arrow pointing to <pf>x</pf>. This is a common way to represent pointers in memory diagrams and a useful way to think about them abstractly. (That is why they are called <q>pointers</q> - they point to things!) This kind of arrow should look familiar from working with references. It is not a coincidence - both references and pointers are ways to link to other memory.
  </p>

  <insight>
    <p>Although we like to draw abstract diagrams and think of pointers as magical arrows that point to other memory, it is important to remember that a pointer is really just a memory address. Any code that works with a pointer is just working with that address.</p>
  </insight>

  <p>
    It is possible to reassign pointers and to copy pointers. Try running this sample both in the ActiveCode and in Codelens. It changes the address that <pf>p</pf> is storing to make it <q>point</q> to <pf>y</pf> instead of <pf>x</pf>. It then copies that address to another <pf>int*</pf> named <pf>q</pf>, which means that <pf>q</pf> is also <q>pointing</q> at <pf>y</pf>:</p>
  
  <program label="asdfadesdf2" interactive="activecode" highlight-lines="13, 16" line-numbers="yes" codelens="yes">
<xi:include href="../../programs/pointers-aggregation/pointers-2.cpp" parse="text"/>
  </program>

  

</section>