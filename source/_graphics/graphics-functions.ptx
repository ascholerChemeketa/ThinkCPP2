<section xml:id="graphics_graphics-functions" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Graphics functions</title>
<p>
    <idx><h>coordinate</h></idx>
You are probably used to Cartesian <term>coordinates</term>, where <m>x</m> and <m>y</m> values can be positive or negative.
In contrast, Java uses a coordinate system where the origin is in the upper-left corner.
That way, <m>x</m> and <m>y</m> can always be positive integers.
<xref ref="fig_coordinates">Figure</xref> shows these coordinate systems side by side.
</p>
<figure xml:id="fig_coordinates" >
<caption>The difference between Cartesian coordinates and Java graphical coordinates.</caption>
<image width="93%" source="images/coordinates.png" />
</figure>
<p>
    <idx><h>pixel</h></idx>
Graphical coordinates are measured in <term>pixels</term>; each pixel corresponds to a dot on the screen.
</p>

<p>
To draw on the canvas, you invoke functions on a <pf>Graphics</pf> object.
You don't have to create the <pf>Graphics</pf> object; it gets created when you create the <pf>Canvas</pf>, and it gets passed as an argument to <pf>paint</pf>.
</p>

<p>
The previous example used <pf>fillOval</pf>, which has the following signature:
</p>

<program>
<xi:include href="../../programs/graphics/graphics-functions-1.cpp" parse="text"/>
</program>

<p>
    <idx><h>bounding box</h></idx>
The four parameters specify a <term>bounding box</term>, which is the rectangle in which the oval is drawn.
<pf>x</pf> and <pf>y</pf> specify the location of the upper-left corner of the bounding box.
The bounding box itself is not drawn (see <xref ref="fig_circle">Figure</xref>).
</p>
<figure xml:id="fig_circle" >
<caption>An oval inside its bounding box.</caption>
<image width="73%" source="images/circle.png" />
</figure>
<p>
    <idx><h>Color</h></idx>
To choose the color of a shape, invoke <pf>setColor</pf> on the <pf>Graphics</pf> object:
</p>

<program>
<xi:include href="../../programs/graphics/graphics-functions-2.cpp" parse="text"/>
</program>

<p>
The <pf>setColor</pf> function determines the color of everything that gets drawn afterward.
<pf>Color.red</pf> is a constant provided by the <pf>Color</pf> class; to use it, you have to <pf>import java.awt.Color</pf>.
Other colors include the following:
</p>

<console>
<output>
BLACK       BLUE      CYAN     DARKGRAY   GRAY    LIGHTGRAY
GREEN       MAGENTA   ORANGE   PINK       WHITE   YELLOW
</output>
</console>

<p>
    <idx><h>RGB</h></idx>
You can create your own colors by specifying the red, green, and blue (<term>RGB</term>) components.
For example:
</p>

<program>
<xi:include href="../../programs/graphics/graphics-functions-3.cpp" parse="text"/>
</program>

<p>
Each value is an integer in the range 0 (darkest) to 255 (lightest).
The color <pf>(0, 0, 0)</pf> is black, and <pf>(255, 255, 255)</pf> is white.
</p>

<p>
You can set the background color of the <pf>Canvas</pf> by invoking <pf>setBackground</pf>:
</p>

<program>
<xi:include href="../../programs/graphics/graphics-functions-4.cpp" parse="text"/>
</program>

</section>
