<section xml:id="loops_which-loop-to-use"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Which Loop to Use</title>
  <p>
    <pf>for</pf> and <pf>while</pf> loops have the same capabilities; any <pf>for</pf> loop can be rewritten as a <pf>while</pf>
    loop, and vice versa. For example, we could have printed letters of the alphabet by using a <pf>while</pf>
    loop: </p>

  <program xml:id="loops_which-loop-to-use-1">
<xi:include href="../../programs/loops/which-loop-to-use-1.cpp" parse="text"/>
</program>

  <p> You might wonder when to use one or the other. It depends on whether you know how many times
    the loop will repeat. </p>

  <p> A <pf>for</pf> loop is <q>definite</q>, which means we know, at the beginning of the loop, how many
    times it will repeat. In the alphabet example, we know it will run 26 times. In that case, it's
    better to use a <pf>for</pf> loop, which puts all of the loop control code on one line. </p>

  <p> A <pf>while</pf> loop is <q>indefinite</q>, which means we don't know how many times it will repeat.
    For example, when validating user input as in <xref ref="validate">Section</xref>, it's
    impossible to know how many times the user will enter a wrong value. In this case, a <pf>while</pf>
    loop is more appropriate: </p>

  <program xml:id="loops_which-loop-to-use-2">
<xi:include href="../../programs/loops/which-loop-to-use-2.cpp" parse="text"/>
</program>

  <p> It's easier to read the <pf>Scanner</pf> function calls when they're not all on one line of code. </p>
</section>