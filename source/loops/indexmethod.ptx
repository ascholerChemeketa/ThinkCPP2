<section xml:id="loops_indexfunction" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>The indexOf function</title>
<p>
    <idx><h>indexOf</h></idx>
To search for a specific character in a string, you could write a <pf>for</pf> loop and use <pf>charAt</pf> as in the previous section.
However, the <pf>String</pf> class already provides a function for doing just that:
</p>

<program>
<xi:include href="../../programs/loops/indexfunction-1.cpp" parse="text"/>
</program>

<p>
This example finds the index of <pf>'a'</pf> in the string.
But the letter appears three times, so it's not obvious what <pf>indexOf</pf> might do.
According to the documentation, it returns the index of the <term>first</term> appearance.
</p>

<p>
To find subsequent appearances, you can use another version of <pf>indexOf</pf>, which takes a second argument that indicates where in the string to start looking:
</p>

<program>
<xi:include href="../../programs/loops/indexfunction-2.cpp" parse="text"/>
</program>

<p>
To visualize how <pf>indexOf</pf> and other <pf>String</pf> functions work, it helps to draw a picture like <xref ref="fig_banana">Figure</xref>.
The previous code starts at index 2 (the first <pf>'n'</pf>) and finds the next <pf>'a'</pf>, which is at index 3.
</p>

<p>
    <idx><h>memory diagram</h></idx>
    <idx><h>diagram</h><h>memory</h></idx>
</p>
<figure xml:id="fig_banana" >
<caption>Memory diagram for a <pf>String</pf> of six characters.</caption>
<image width="73%" source="images/banana.png" />
</figure>
<p>
If the character happens to appear at the starting index, the starting index is the answer.
So <pf>fruit.indexOf('a', 5)</pf> returns <pf>5</pf>.
If the character does not appear in the string, <pf>indexOf</pf> returns <pf>-1</pf>.
Since indexes cannot be negative, this value indicates the character was not found.
</p>

<p>
You can also use <pf>indexOf</pf> to search for an entire string, not just a single character.
For example, the expression <pf>fruit.indexOf("nan")</pf> returns <pf>2</pf>.
</p>
</section>
