<section xml:id="loops_do-while"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Do While</title>
  <p>
    <idx>
      <h>do while loop</h>
    </idx>There is one other less common loop format worth mentioning. The <pf>do...while</pf> loop. It looks like:</p>
  
  <pre>
do {
    body
} while (condition);
</pre>

  <p>The <pf>do...while</pf> puts the test at the end of the loop. This means that the body of the loop is guaranteed to execute at least one time. Say you want to roll a pair of dice until you roll a pair. The know we want at least one iteration. So we might write it using do-while like this:</p>

  <listing>
  <program label="loops_do-while-program-1" interactive="activecode" compile-also="SimpleRandom-cxx" extra-compiler-args="-std=c++20 -fmodules-ts">
<xi:include href="../../programs/loops/do-while-1.cpp" parse="text"/>
</program>
  </listing>

  <p>Unfortunately, to test <pf>die1</pf> and <pf>die2</pf> in the condition, we need to declare them before the body of the loop. But you might still prefer that code to the <pf>while</pf> loop implementation. It starts the two dice with made up values that force the loop to run once:</p>

  <listing>
  <program label="loops_do-while-program-2" interactive="activecode" compile-also="SimpleRandom-cxx" extra-compiler-args="-std=c++20 -fmodules-ts">
<xi:include href="../../programs/loops/do-while-2.cpp" parse="text"/>
</program>
  </listing>

  <note>
    <p>This program violates the usual advice to do updates at the end of the body. All the updates (rolling dice, and incrementing tries) happen at the start of the body. When you construct a loop so that it always has to run at least once and processes even the last value produced by the update, this reversed structure can be easier to read. <q>Make a new value, do work with it, then if needed, continue.</q></p>
  </note>

</section>