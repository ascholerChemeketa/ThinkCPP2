<section xml:id="loops_random-numbers"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Random Numbers</title>

  <p>
    <idx>
      <h>Monte Carlo simulation</h>
    </idx>Another powerful use of loops is to run simulations involving chance. Sometimes, perfectly modeling something complex like the path of a hurricane is impossible due to limits in either our understanding of the thing being modeled or the computational power available. To handle imperfect knowledge, we can assign probabilities to possible events and then <q>roll the dice</q>. To see what happens. If we repeat that simulation many times and our estimated probabilities are accurate, we can learn about the possible outcomes and how likely each one is. This is often referred to as a <term>Monte Carlo</term> simulation (named after Europe's answer to Las Vagas).</p>

  <p>To do this kind of simulation, we need to generate random numbers. Computers struggle to produce truly random values - they are deterministic machines that are supposed to always do what is expected. But they can produce <term>pseudo-random</term> numbers. These are numbers generated by a formula that produces a sequence of numbers that appear random.
    <idx>
      <h>random</h>
    </idx> </p>

  <p>To produce reliable results in simulations, or to provide security in an encryption algorithm that relies on generating randomness, the generator we use needs to produce a <q>high quality</q> of randomness <mdash/>an unpredictable sequence of values where every possible value is as likely as every other to appear next.</p>

  <p>In C++ unfortunately, generating high quality random numbers requires uses of some slightly complex code. To make this process easier, we will rely on a custom library called <pf>SimpleRandom</pf>. We will learn later on how to build libraries like it. But for now, just recognize that any code sample that has <pf>import SimpleRandom;</pf> in it makes use of this library. The library provides three functions:</p>

<listing>
<program>
/**
 * @brief Seeds the random number generator. Calling this function with an integer
 *        will seed the generator with that value.
 * 
 * @param x Seed value to use.
 * 
 * @note If you don't call this function, the generator will
 *       be seeded with a random value.
 */
void seedRNG(unsigned int x);

/**
 * @brief Generates a random integer in the range [min, max].
 * 
 * @param min The minimum value of the range.
 * @param max The maximum value of the range.
 * @return A random integer in the range [min, max].
 */
int randRange(int min, int max);

/**
 * @brief Generates a random double in the range [0.0, 1.0).
 * 
 * @return A random double in the range [0.0, 1.0). i.e. 0-0.9999...
 */
double randDouble();
</program>
</listing>

  <p>Most of the time, we will just call something like <pf>randRange(1, 6)</pf> to get a random number from 1 to 6. Try running this program to generate 10 random dice rolls between 1 and 6. Every time you run it you should get a different sequence:</p>

  <listing>
  <program label="loops_random-numbers-program-1" interactive="activecode" compile-also="SimpleRandom-cxx" extra-compiler-args="-std=c++20 -fmodules-ts">
<xi:include href="../../programs/loops/random-1.cpp" parse="text"/>
</program>
  </listing>

  <p>The <term>seed</term> value is the value that is used to start the pseudo-random sequence. Normally we want the seed to be as random as possible (using something like the number of milliseconds on the system clock or random electrical noise for the randomness). But if you want a program to always generate the same sequence of values, perhaps because you are trying to debug it, you can specify a seed by calling <pf>seedRNG</pf> (Random Number Generator. You normally only do this ONCE when you first start using the random number generator. <idx><h>seed</h></idx></p>

  <p>This version of the same program seeds the number generator. Every time you run it you should get the same <q>random</q> sequence. If you change the seed you will get a new sequence.</p>

  <listing>
  <program label="loops_random-numbers-program-2" interactive="activecode" compile-also="SimpleRandom-cxx" extra-compiler-args="-std=c++20 -fmodules-ts">
<xi:include href="../../programs/loops/random-2.cpp" parse="text"/>
</program>
  </listing>


  <note><p>There is also a simpler way to make random numbers in C++ using the functions <pf>rand</pf> and <pf>srand</pf> from the <pf>cstdlib</pf>. Those functions have some significant limitations in terms of the quality of number they generate. So we will rely on the <pf>SimpleRandom</pf> library that makes the complex code easier to use for basic activities.</p></note>

  
  <exercise label="loops_random-numbers-ex-1">
    <statement>
      <p>Which are true statements about a <q>seed</q> for a random number generator?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>It is the first random value that will be produced.</p>
        </statement>
        <feedback>
          <p>The seed value usually won't be the first output.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It determines the sequence of random values that will be produced.</p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>Usually we want a fixed seed.</p>
        </statement>
        <feedback>
          <p>That would mean the program always generates the same pseudo-random values</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The seed is normally set to some changing value like the current time.</p>
        </statement>
      </choice>
      <choice correct="yes">
        <statement>
          <p>We normally only seed the random number generator once.</p>
        </statement>
      </choice>
    </choices>
  </exercise>

</section>