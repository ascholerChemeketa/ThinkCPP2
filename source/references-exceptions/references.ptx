<section xml:id="references-exceptions_references"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>References</title>

  <p>In the string chapter we mentioned that the a function that takes a string parameter probably should be written as:</p>

  <program>
  void foo(const string&amp; s);
  </program>

  <p>Instead of:</p>

  <program>
  void foo(string s);
  </program>

  <p>So why is the first version preferable? To answer that question, we will start by reviewing how normal variables work. Each regular variable is a name for a different location in memory (a different box to store things in). Given this code:</p>

  <program>
<xi:include href="../../programs/references-exceptions/references-1.cpp" parse="text"/>
</program>

    <p>There are two storage locations, each with its own name. The second line of main make a new storage area with the name <pf>b</pf> and copies the value <pf>a</pf> has to it. When reading that code, you should picture a memory diagram that looks like this:</p>

    <figure>
    <caption>Memory diagram of <pf>a</pf> and <pf>b</pf> that each hold 5.</caption>
    <image width="25%"
           source="images/references-1.svg"/>
  </figure>

  <p>Changing the value in the storage named by <pf>b</pf> does not change the value stored in <pf>a</pf>. This is how things usually work in C++.</p>
  <p>A <term>reference</term> changes this. A reference does not name its own storage, instead a reference always <q>points</q> to some other storage. We declare a variable to be a reference by adding <pf>&amp;</pf> to the data type, like <pf>int&amp; b;</pf>. The <pf>&amp;</pf> change the type of `b <mdash/>it no longer is an <q>int</q>, it is a <q>reference to an int</q>.
    <idx>
      <h>reference</h>
    </idx> 
    <idx>
      <h>&amp; (reference)</h>
    </idx></p>

  <insight><p>When trying to pronounce complex looking data types in C++ it sometimes helps to read the backwards. <pf>int&amp; b;</pf> can be read as <q>b is a reference to an integer</q>.</p></insight>

  <p>A memory diagram for <pf>int&amp; b = a;</pf> should look like:</p>

    <figure>
    <caption>Memory diagram of <pf>a</pf> that holds 5 and <pf>b</pf> that is a reference to <pf>a</pf>.</caption>
    <image width="25%"
           source="images/references-2.svg"/>
  </figure>

  <p><pf>b</pf> is an <term>alias</term> for <pf>a</pf> - it is another way to name the exact same storage that <pf>a</pf> names. If we change <pf>b</pf>, we change that value. Run this Codelens sample to see its animation of the situation:</p>

  <program label="references-exceptions_references-program-1" interactive="codelens">
<xi:include href="../../programs/references-exceptions/references-2.cpp" parse="text"/>
</program>

  <p>You can change either <pf>a</pf> or <pf>b</pf> and both variables <q>see</q> the new value.</p>

  <note><p>The formal name in C++ for variables that name their own storage is an <term>lvalue</term> (location). A reference is an <term>rvalue</term> (reference). It is also possible to have an <term>rvalue reference</term> using the symbol <pf>&amp;&amp;</pf>.</p>
  <p>Those terms and the concept of an rvalue reference are beyond the scope of this book.</p></note>
</section>