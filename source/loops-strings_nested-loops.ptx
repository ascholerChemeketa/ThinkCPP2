<section xml:id="loops-strings_nested-loops" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Nested Loops</title>
<p>
<idx><h>loop</h><h>nested</h></idx>
<idx><h>nested</h><h>loops</h></idx>
Like conditional statements, loops can be nested one inside the other.
Nested loops allow you to iterate over two variables.
For example, we can generate a <q>multiplication table</q> like this:
</p>

<program xml:id="loops-strings_nested-loops-1">
<xi:include href="../programs/loops-strings_nested-loops-1.cpp" parse="text"/>
</program>

<p>
<idx><h>loop variable</h></idx>
<idx><h>variable</h><h>loop</h></idx>
<idx><h>inner loop</h></idx>
<idx><h>outer loop</h></idx>
Variables like <c>x</c> and <c>y</c> are called <term>loop variables</term>, because they control the execution of a loop.
In this example, the first loop (<c>for x</c>) is known as the <q>outer loop</q>, and the second loop (<c>for y</c>) is known as the <q>inner loop</q>.
</p>

<p>
Each loop repeats its corresponding statements 10 times.
The outer loop iterates from 1 to 10 only once, but the inner loop iterates from 1 to 10 each of those 10 times.
As a result, the <c>printf</c> function is invoked 100 times.
</p>

<p>
<idx><h>format specifier</h></idx>
The format specifier <c>%4d</c> displays the value of <c>x * y</c> padded with spaces so it's four characters wide.
Doing so causes the output to align vertically, regardless of how many digits the numbers have:
</p>

<console>
<output>
1   2   3   4   5   6   7   8   9  10
   2   4   6   8  10  12  14  16  18  20
   3   6   9  12  15  18  21  24  27  30
   4   8  12  16  20  24  28  32  36  40
   5  10  15  20  25  30  35  40  45  50
   6  12  18  24  30  36  42  48  54  60
   7  14  21  28  35  42  49  56  63  70
   8  16  24  32  40  48  56  64  72  80
   9  18  27  36  45  54  63  72  81  90
  10  20  30  40  50  60  70  80  90 100
</output>
</console>

<p>
It's important to realize that the output is displayed row by row.
The inner loop displays a single row of output, followed by a newline.
The outer loop iterates over the rows themselves.
Another way to read nested loops, like the ones in this example, is: <q>For each row <c>x</c>, and for each column <c>y</c>, <ellipsis /></q>
</p>
</section>
