<section xml:id="loops-strings_substrings">
<title>Substrings</title>
<p>
<idx><h>substring</h></idx>
In addition to searching strings, we often need to extract parts of strings.
The <c>substring</c> method returns a new string that copies letters from an existing string, given a pair of indexes:
<ul>
<li><p><c>fruit.substring(0, 3)</c> returns <c>"ban"</c></p></li>
<li><p><c>fruit.substring(2, 5)</c> returns <c>"nan"</c></p></li>
<li><p><c>fruit.substring(6, 6)</c> returns <c>""</c></p></li>
</ul>
</p>

<p>
Notice that the character indicated by the second index is <em>not</em> included.
Defining <c>substring</c> this way simplifies some common operations.
For example, to select a substring with length <c>len</c>, starting at index <c>i</c>, you could write <c>fruit.substring(i, i + len)</c>.
</p>

<p>
<idx><h>overloaded</h></idx>
Like most string methods, <c>substring</c> is <em>overloaded</em>.
That is, there are other versions of <c>substring</c> that have different parameters.
If it's invoked with one argument, it returns the letters from that index to the end:
<ul>
<li><p><c>fruit.substring(0)</c> returns <c>"banana"</c></p></li>
<li><p><c>fruit.substring(2)</c> returns <c>"nana"</c></p></li>
<li><p><c>fruit.substring(6)</c> returns <c>""</c></p></li>
</ul>
</p>

<p>
The first example returns a copy of the entire string.
The second example returns all but the first two characters.
As the last example shows, <c>substring</c> returns the empty string if the argument is the length of the string.
</p>

<p>
We could also use <c>fruit.substring(2, fruit.length())</c> to get the result <c>"nana"</c>.
But calling <c>substring</c> with one argument is more convenient when you want the end of the string.
</p>
</section>
