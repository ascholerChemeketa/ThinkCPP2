<section xml:id="arrays-arrays_starting-game">
<title>Starting the Game</title>
<p>
Now we're ready to implement the game.
To encapsulate the rules of GoL, we define a class named <c>Conway</c>.
The <c>Conway</c> class <q>has<nbsp/>a</q> <c>GridCanvas</c> that represents the state of the game.
</p>

<p>
This constructor makes a <c>GridCanvas</c> with 5 rows and 10 columns, with cells that are 20 pixels wide and high.
It then sets up the initial conditions:
</p>

<program>
public class Conway {
    private GridCanvas grid;

    public Conway() {
        grid = new GridCanvas(5, 10, 20);
        grid.turnOn(2, 1);
        grid.turnOn(2, 2);
        grid.turnOn(2, 3);
        grid.turnOn(1, 7);
        grid.turnOn(2, 7);
        grid.turnOn(3, 7);
    }
}
</program>

<p>
Before we implement the rest of the game, we'll write a <c>main</c> method that creates a <c>Conway</c> object and displays it.
We can use this method to test <c>Cell</c> and <c>GridCanvas</c>, and to develop the other methods we need:
</p>

<program>
public static void main(String[] args) {
    String title = "Conway's Game of Life";
    Conway game = new Conway();
    JFrame frame = new JFrame(title);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setResizable(false);
    frame.add(game.grid);
    frame.pack();
    frame.setVisible(true);
    game.mainloop();
}
</program>

<p>
<idx><h>JFrame</h></idx>
After constructing the <c>game</c> object, <c>main</c> constructs a <c>JFrame</c>, which creates a window on the screen.
The <c>JFrame</c> is configured\footnotemark to exit the program when closed.
Resizing the window is disabled.
</p>

<p>
<c>main</c> then adds the <c>GridCanvas</c> inside the frame, resizes (<q>packs</q>) the frame to fit the canvas, and makes the frame visible.
<xref ref="fig_conway">Figure</xref> shows the result.
</p>
<figure xml:id="fig_conway" >
<caption>Screenshot of the initial <c>Conway</c> application.</caption>
<image width="73%" source="images/conway.png" />
</figure>
</section>
