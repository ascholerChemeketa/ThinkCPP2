<section xml:id="reusing-classes_uml-diagram">
<title>UML Diagram</title>
<p>
At the beginning of the chapter, we had three classes: <c>Cell</c>, <c>GridCanvas</c>, and <c>Conway</c>.
We then developed <c>Langton</c>, which had almost the same <c>main</c> and <c>mainloop</c> methods as <c>Conway</c>.
So we refactored the code and created <c>Automaton</c>.
<xref ref="fig_uml2">Figure</xref> summarizes the final design.
</p>
<figure xml:id="fig_uml2" >
<caption>UML class diagram of <c>Conway</c> and <c>Langton</c> applications.</caption>
<image width="75%" source="images/uml2.png" />
</figure>
<p>
<idx><h>IS-A</h></idx>
<idx><h>HAS-A</h></idx>
The diagram shows three examples of inheritance: <c>Conway</c> is an <c>Automaton</c>, <c>Langton</c> is an <c>Automaton</c>, and <c>GridCanvas</c> is a <c>Canvas</c>.
It also shows two examples of composition: <c>Automaton</c> has a <c>GridCanvas</c>, and <c>GridCanvas</c> has a 2D array of <c>Cell</c>s.
</p>

<p>
The diagram also shows that <c>Automaton</c> uses <c>JFrame</c>, <c>GridCanvas</c> uses <c>Graphics</c>, and <c>Cell</c> uses <c>Graphics</c> and <c>Color</c>.
</p>

<p>
<c>Automaton</c> is in italics to indicate that it is an abstract class.
As it happens, <c>Graphics</c> is an abstract class, too.
</p>

<p>
<idx><h>concrete class</h></idx>
Conway and Langton are <em>concrete classes</em>, because they provide an implementation for all of their methods.
In particular, they implement the <c>update</c> method that was declared <c>abstract</c> in <c>Automaton</c>.
</p>

<p>
<idx><h>object-oriented</h></idx>
One of the challenges of object-oriented programming is keeping track of a large number of classes and the relationships between them.
UML class diagrams can help.
</p>
</section>
