<section xml:id="advanced-topics_regular-polygons">
<title>Regular Polygons</title>
<p>
In mathematics, a regular polygon has all sides the same length and all angles equal in measure.
Regular polygons are a special case of polygons, so we will use specialization to define a class for them.
</p>

<p>
We could extend the <c>Polygon</c> class, as we did in the previous section.
But then we would not have the <c>Color</c> functionality we just added.
So we will make <c>RegularPolygon</c> extend <c>DrawablePolygon</c>.
</p>

<p>
To construct a <c>RegularPolygon</c>, we specify the number of sides, the radius (distance from the center to a vertex), and the color.
For example:
</p>

<program>
RegularPolygon rp = new RegularPolygon(6, 50, Color.BLUE);
</program>
  <figure xml:id="fig_hexagon" >
<caption>Determining the <m>x</m> and <m>y</m> coordinates of vertex V1, given the radius<nbsp/><m>r</m> and angle<nbsp/><m>\theta</m>.
The center of the polygon is at the origin <m>(0, 0)</m>.</caption>
<image width="73%" source="images/hexagon.png" />
</figure>
<p>
The constructor uses trigonometry to find the coordinates of each vertex.
<xref ref="fig_hexagon">Figure</xref> illustrates the process.
The number of sides (<m>n=6</m>) and the radius (<m>r=50</m>) are given as parameters.
<ul>
<li><p>Imagine a clock hand starting at V0 and rotating counterclockwise to V1, V2, and so forth.
In <xref ref="fig_hexagon">Figure</xref>, the hand is currently at V1.</p></li>
<li><p>The angle <m>\theta</m> is <m>2 \pi / n</m>, since there are <m>2\pi</m> radians in a circle.
In other words, we are dividing the rotation of the clock hand into <m>n</m> equal angles.</p></li>
<li><p>By definition, <m>\cos(\theta) = x/r</m> and <m>\sin(\theta) = y/r</m>.
Therefore, <m>x = r \cos(\theta)</m> and <m>y = r \sin(\theta)</m>.</p></li>
<li><p>We can determine the other <m>(x, y)</m> coordinates by multiplying <m>\theta</m> by <m>i</m>, where <m>i</m> is the vertex number.</p></li>
</ul>
</p>

<p>
Here is the constructor for <c>RegularPolygon</c>:
</p>

<program>
public RegularPolygon(int nsides, int radius, Color color) {

    // initialize DrawablePolygon attributes
    this.npoints = nsides;
    this.xpoints = new int[nsides];
    this.ypoints = new int[nsides];
    this.color = color;

    // the amount to rotate for each vertex (in radians)
    double theta = 2.0 * Math.PI / nsides;

    // compute x and y coordinates, centered at the origin
    for (int i = 0; i &lt; nsides; i++) {
        double x = radius * Math.cos(i * theta);
        double y = radius * Math.sin(i * theta);
        xpoints[i] = (int) Math.round(x);
        ypoints[i] = (int) Math.round(y);
    }
}
</program>

<p>
This constructor initializes all four <c>DrawablePolygon</c> attributes, so it doesn't have to invoke <c>super()</c>.
</p>

<p>
It initializes <c>xpoints</c> and <c>ypoints</c> by creating arrays of integer coordinates.
Inside the <c>for</c> loop, it uses <c>Math.sin</c> and <c>Math.cos</c> (see <xref ref="mathmeth">Section</xref>) to compute the coordinates of the vertices as floating-point numbers.
Then it rounds them off to integers and stores them in the arrays.
</p>

<p>
When we construct a <c>RegularPolygon</c>, the vertices are centered at the point <m>(0, 0)</m>.
If we want the center of the polygon to be somewhere else, we can use <c>translate</c>, which we inherit from <c>Polygon</c>:
</p>

<program>
RegularPolygon rp = new RegularPolygon(6, 50, Color.BLUE);
rp.translate(100, 100);
</program>

<p>
The result is a six-sided polygon with radius 50 centered at the point <m>(100, 100)</m>.
</p>
</section>
