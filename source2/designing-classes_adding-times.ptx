<section xml:id="designing-classes_adding-times">
<title>Adding Times</title>
<p>
Suppose you are going to a movie that starts at 18:50 (that is, 6:50 PM), and the running time is 2 hours, 16 minutes.
What time does the movie end?
We'll use <c>Time</c> objects to figure it out:
</p>

<program>
Time startTime = new Time(18, 50, 0.0);
Time runningTime = new Time(2, 16, 0.0);
</program>

<p>
<idx><h>Time</h><h>addition</h></idx>
<idx><h>addition</h><h>time</h></idx>
Here are two ways we could <q>add</q> the <c>Time</c> objects:
<ul>
<li><p>Write a static method that takes two <c>Time</c> objects as parameters.</p></li>
<li><p>Write an instance method that gets invoked on one object and takes the other as a parameter.</p></li>
</ul>
</p>

<p>
To demonstrate the difference, we'll do both.
Here is the static method:
</p>

<p>
<idx><h>static</h></idx>
<idx><h>method</h><h>static</h></idx>
</p>

<program>
public static Time add(Time t1, Time t2) {
    Time sum = new Time();
    sum.hour = t1.hour + t2.hour;
    sum.minute = t1.minute + t2.minute;
    sum.second = t1.second + t2.second;
    return sum;
}
</program>

<p>
And here's how we would invoke it:
</p>

<program>
Time endTime = Time.add(startTime, runningTime);
</program>

<p>
Here's what it looks like as an instance method:
</p>

<p>
<idx><h>instance method</h></idx>
<idx><h>method</h><h>instance</h></idx>
</p>

<program>
public Time add(Time t2) {
    Time sum = new Time();
    sum.hour = this.hour + t2.hour;
    sum.minute = this.minute + t2.minute;
    sum.second = this.second + t2.second;
    return sum;
}
</program>

<p>
And here's how we would invoke it:
</p>

<program>
Time endTime = startTime.add(runningTime);
</program>

<p>
Notice the differences:
<ul>
<li><p>The static method has the keyword <c>static</c>; the instance method does not.</p></li>
<li><p>The static method has two parameters, <c>t1</c> and <c>t2</c>.
The instance method has one explicit parameter, <c>t2</c>, and the implicit parameter, <c>this</c>.</p></li>
<li><p>We invoked the static method with the <c>Time</c> class;
we invoked the instance method with the <c>startTime</c> object.</p></li>
</ul>
</p>

<p>
That's all there is to it.
Static methods and instance methods do the same thing, and you can convert from one to the other with just a few changes.
</p>

<p>
However, there's a problem with both of these methods; they are not correct.
The result from either method is <c>20:66</c>, which is not a valid time.
</p>

<p>
If <c>second</c> exceeds 59, we have to carry into the minutes column, and if <c>minute</c> exceeds 59, we have to carry into <c>hour</c>.
</p>

<p>
Here is a better version of the instance method, <c>add</c>:
</p>

<program>
public Time add(Time t2) {
    Time sum = new Time();
    sum.hour = this.hour + t2.hour;
    sum.minute = this.minute + t2.minute;
    sum.second = this.second + t2.second;

    if (sum.second >= 60.0) {
        sum.second -= 60.0;
        sum.minute += 1;
    }
    if (sum.minute >= 60) {
        sum.minute -= 60;
        sum.hour += 1;
    }
    if (sum.hour >= 24) {
        sum.hour -= 24;
    }
    return sum;
}
</program>

<p>
If <c>hour</c> exceeds 23, we subtract 24 hours, but there's no
<c>days</c> attribute to carry into.
</p>
</section>
